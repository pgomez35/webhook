from fastapi import APIRouter, Request
from fastapi.responses import JSONResponse
import os, json
from dotenv import load_dotenv
from enviar_msg_wp import enviar_plantilla_generica, enviar_mensaje_texto_simple,enviar_boton_iniciar_Completa,enviar_botones_Completa
from main import guardar_mensaje
from utils import *
from rapidfuzz import process, fuzz
import unicodedata
import traceback

import psycopg2

load_dotenv()

# Configuraci√≥n
TOKEN = os.getenv("WHATSAPP_TOKEN")
PHONE_NUMBER_ID = os.getenv("WHATSAPP_PHONE_ID")
INTERNAL_DATABASE_URL = os.getenv("INTERNAL_DATABASE_URL")  # üîπ corregido nombre

router = APIRouter()

# Estado del flujo en memoria
usuarios_flujo = {}    # { numero: paso_actual }
respuestas = {}        # { numero: {campo: valor} }
usuarios_temp = {}

# ============================
# OPCIONES
# ============================
tiposContenido_opciones = {
    "1": ["Bailes"],
    "2": ["Charlas"],
    "3": ["Gaming", "streams de videojuegos"],
    "4": ["Tutoriales"],
    "5": ["Entretenimiento"],
    "6": ["Humor"],
    "7": ["M√∫sica en vivo"],
    "8": ["Reacci√≥n a videos"],
    "9": ["Religi√≥n"],
    "10": ["Temas sociales", "debates", "foros"],
    "11": ["Estudios/tareas"],
    "12": ["Ventas en vivo"],
    "13": ["Otro"]
}

interesesOpciones_opciones = {
    "1": ["Deportes"],
    "2": ["Moda"],
    "3": ["Maquillaje"],
    "4": ["Cocina"],
    "5": ["Fitness"],
    "6": ["M√∫sica"],
    "7": ["Bailes"],
    "8": ["Gaming"],
    "9": ["Lectura"],
    "10": ["Salud mental"],
    "11": ["Comedia"],
    "12": ["Religi√≥n"],
    "13": ["Pol√≠tica"],
    "14": ["Emprendimiento"],
    "15": ["Viajes"],
    "16": ["Idiomas"],
    "17": ["Educaci√≥n"],
    "18": ["Noticias"],
    "19": ["Relaciones"],
    "20": ["Arte"],
    "21": ["Tecnolog√≠a"],
    "22": ["Fotograf√≠a"],
    "23": ["Otro"]
}


mapa_paises = {
    "1": "argentina",
    "2": "bolivia",
    "3": "chile",
    "4": "colombia",
    "5": "costarica",
    "6": "cuba",
    "7": "ecuador",
    "8": "elsalvador",
    "9": "guatemala",
    "10": "honduras",
    "11": "mexico",
    "12": "nicaragua",
    "13": "panama",
    "14": "paraguay",
    "15": "peru",
    "16": "puertorico",
    "17": "dominicana",
    "18": "uruguay",
    "19": "venezuela"
}

# === Diccionario de ciudades por pa√≠s (Latinoam√©rica) ===
ciudades_por_pais = {
    "argentina": ["Buenos Aires", "C√≥rdoba", "Rosario", "Mendoza", "La Plata",
                  "San Miguel de Tucum√°n", "Mar del Plata", "Salta", "Santa Fe", "San Juan"],
    "bolivia": ["La Paz", "Santa Cruz de la Sierra", "Cochabamba", "Sucre", "Oruro",
                "Potos√≠", "Tarija", "El Alto", "Trinidad", "Cobija"],
    "chile": ["Santiago", "Valpara√≠so", "Concepci√≥n", "La Serena", "Antofagasta",
              "Temuco", "Rancagua", "Talca", "Arica", "Chill√°n"],
    "colombia": ["Bogot√°", "Medell√≠n", "Cali", "Barranquilla", "Cartagena",
                 "Bucaramanga", "Pereira", "Santa Marta", "Ibagu√©", "C√∫cuta"],
    "costarica": ["San Jos√©", "Alajuela", "Cartago", "Heredia", "Liberia",
                  "Puntarenas", "Lim√≥n", "San Carlos", "Desamparados", "San Ram√≥n"],
    "cuba": ["La Habana", "Santiago de Cuba", "Camag√ºey", "Holgu√≠n", "Guant√°namo",
             "Santa Clara", "Bayamo", "Pinar del R√≠o", "Cienfuegos", "Matanzas"],
    "ecuador": ["Quito", "Guayaquil", "Cuenca", "Santo Domingo", "Machala",
                "Manta", "Portoviejo", "Ambato", "Riobamba", "Esmeraldas"],
    "elsalvador": ["San Salvador", "Santa Ana", "San Miguel", "Soyapango", "Mejicanos",
                   "Santa Tecla", "Apopa", "Delgado", "Usulut√°n", "Sonsonate"],
    "guatemala": ["Ciudad de Guatemala", "Mixco", "Villa Nueva", "Quetzaltenango",
                  "Escuintla", "San Juan Sacatep√©quez", "Villa Canales", "Chinautla",
                  "Chimaltenango", "Amatitl√°n"],
    "honduras": ["Tegucigalpa", "San Pedro Sula", "Choloma", "La Ceiba", "El Progreso",
                 "Comayagua", "Puerto Cort√©s", "Choluteca", "Danl√≠", "Juticalpa"],
    "mexico": ["Ciudad de M√©xico", "Guadalajara", "Monterrey", "Puebla", "Tijuana",
               "Le√≥n", "Ju√°rez", "Torre√≥n", "Quer√©taro", "M√©rida"],
    "nicaragua": ["Managua", "Le√≥n", "Masaya", "Chinandega", "Matagalpa",
                  "Estel√≠", "Granada", "Jinotega", "Bluefields", "Carazo"],
    "panama": ["Ciudad de Panam√°", "San Miguelito", "Col√≥n", "David", "La Chorrera",
               "Santiago", "Chitr√©", "Penonom√©", "Aguadulce", "Arraij√°n"],
    "paraguay": ["Asunci√≥n", "Ciudad del Este", "Encarnaci√≥n", "San Lorenzo", "Luque",
                 "Capiat√°", "Fernando de la Mora", "Lambar√©", "Mariano Roque Alonso", "Itaugu√°"],
    "peru": ["Lima", "Arequipa", "Trujillo", "Chiclayo", "Piura",
             "Iquitos", "Cusco", "Chimbote", "Huancayo", "Tacna"],
    "puertorico": ["San Juan", "Bayam√≥n", "Carolina", "Ponce", "Caguas",
                   "Guaynabo", "Mayag√ºez", "Trujillo Alto", "Arecibo", "Fajardo"],
    "dominicana": ["Santo Domingo", "Santiago de los Caballeros", "La Romana",
                   "San Pedro de Macor√≠s", "San Francisco de Macor√≠s", "Puerto Plata",
                   "La Vega", "Hig√ºey", "Moca", "Bonao"],
    "uruguay": ["Montevideo", "Salto", "Paysand√∫", "Las Piedras", "Rivera",
                "Maldonado", "Tacuaremb√≥", "Melo", "Mercedes", "Artigas"],
    "venezuela": ["Caracas", "Maracaibo", "Valencia", "Barquisimeto", "Maracay",
                  "Ciudad Guayana", "San Crist√≥bal", "Matur√≠n", "Ciudad Bol√≠var", "Cuman√°"]
}

# ============================
# VALIDACIONES
# ============================
def validar_opciones_multiples(texto, opciones_validas):
    # Permitir separadores por coma, punto y coma, espacio
    import re
    items = [x.strip() for x in re.split(r"[,\s;]+", texto) if x.strip()]
    if not items:
        return None
    # Validar cada √≠tem
    seleccion = []
    for item in items:
        if item in opciones_validas:
            if item not in seleccion:  # evita duplicados
                seleccion.append(item)
        else:
            return None  # Si alguna opci√≥n no es v√°lida, rechaza todo
    return seleccion if seleccion else None

# ============================
# ENVIAR PREGUNTAS
# ============================
def enviar_pregunta(numero: str, paso: int):
    texto = preguntas[paso]
    return enviar_mensaje(numero, texto)

def enviar_mensaje(numero: str, texto: str):
    return enviar_mensaje_texto_simple(
        token=TOKEN,
        numero_id=PHONE_NUMBER_ID,
        telefono_destino=numero,
        texto=texto
    )

def enviar_boton_iniciar(numero: str, texto: str):
    return enviar_boton_iniciar_Completa(
        token=TOKEN,
        numero_id=PHONE_NUMBER_ID,
        telefono_destino=numero,
        texto=texto
    )

def enviar_botones(numero: str, texto: str, botones: list):
    return enviar_botones_Completa(
        token=TOKEN,
        numero_id=PHONE_NUMBER_ID,
        telefono_destino=numero,
        texto=texto,
        botones=botones
    )

import time

# üóÇÔ∏è Cach√©s en memoria con timestamp
usuarios_flujo = {}   # {numero: (paso, timestamp)}
usuarios_roles = {}   # {numero: (rol, timestamp)}

# Tiempo de vida en segundos (1 hora = 3600)
TTL = 1800


def actualizar_flujo(numero, paso):
    """Actualiza el paso del flujo sin perder otros datos del usuario."""
    if numero not in usuarios_flujo or not isinstance(usuarios_flujo[numero], dict):
        usuarios_flujo[numero] = {}
    usuarios_flujo[numero]["paso"] = paso
    usuarios_flujo[numero]["timestamp"] = time.time()


def obtener_flujo(numero):

    cache = usuarios_flujo.get(numero)
    ahora = time.time()

    if not cache:
        return None

    # ‚úÖ Formato nuevo (dict)
    if isinstance(cache, dict):
        t = cache.get("timestamp", 0)
        if ahora - t < TTL:
            return cache.get("paso")

    # ‚öôÔ∏è Compatibilidad con formato antiguo (tuple)
    elif isinstance(cache, tuple) and len(cache) == 2:
        paso, t = cache
        if ahora - t < TTL:
            return paso

    # üßπ Limpieza autom√°tica si expir√≥ o no coincide formato
    usuarios_flujo.pop(numero, None)
    return None


def obtener_rol_usuario(numero):
    cache = usuarios_roles.get(numero)
    now = time.time()
    # Verifica que el cache sea una tupla (rol, tiempo) y est√© vigente
    if cache and isinstance(cache, tuple) and len(cache) == 2:
        rol, cached_at = cache
        if now - cached_at < TTL:
            return rol
        else:
            usuarios_roles.pop(numero, None)  # Expira por tiempo
    else:
        usuarios_roles.pop(numero, None)  # Limpia formatos incorrectos

    # Consulta en la base de datos si no hay cache v√°lido
    usuario = buscar_usuario_por_telefono(numero)
    if usuario:
        rol = usuario.get("rol", "aspirante")
    else:
        rol = "aspirante"

    usuarios_roles[numero] = (rol, now)
    return rol

def consultar_rol_bd(numero):
    usuario = buscar_usuario_por_telefono(numero)
    if usuario:
        return usuario.get("rol", "aspirante")
    return "aspirante"

def enviar_menu_principal(numero, rol=None, nombre=None):
    # Obtener el rol del usuario si no se pasa expl√≠citamente
    if rol is None:
        rol = obtener_rol_usuario(numero)

    # Obtener el nombre desde la base de datos si no se pasa expl√≠citamente
    if nombre is None:
        usuario = buscar_usuario_por_telefono(numero)
        nombre = usuario.get("nombre") if usuario and usuario.get("nombre") else ""

    encabezado = f"üëã ¬°Hola {nombre}! üìã Te damos este men√∫ de opciones:\n\n" if nombre else "üëã ¬°Hola! üìã Te damos este men√∫ de opciones:\n\n"

    # --- MEN√ö POR ROL ---
    if rol == "aspirante":
        mensaje = (
            f"{encabezado}"
            "1Ô∏è‚É£ Actualizar mi informaci√≥n de perfil\n"
            "2Ô∏è‚É£ An√°lisis y diagn√≥stico de mi perfil\n"
            "3Ô∏è‚É£ Requisitos para ingresar a la agencia\n"
            "4Ô∏è‚É£ Chat libre con un asesor\n"
            "5Ô∏è‚É£ Preguntas frecuentes\n\n"
            "Por favor responde con el n√∫mero de la opci√≥n."
        )

    elif rol == "creador":
        mensaje = (
            f"{encabezado}"
            "1Ô∏è‚É£ Actualizar mi informaci√≥n de perfil\n"
            "3Ô∏è‚É£ Solicitar asesor√≠a personalizada\n"
            "4Ô∏è‚É£ Acceder a recursos exclusivos\n"
            "5Ô∏è‚É£ Ver pr√≥ximas actividades/eventos\n"
            "6Ô∏è‚É£ Solicitar soporte t√©cnico\n"
            "7Ô∏è‚É£ Chat libre con el equipo\n"
            "8Ô∏è‚É£ Ver mis estad√≠sticas/resultados\n"
            "9Ô∏è‚É£ Solicitar baja de la agencia"
        )

    elif rol == "admin":
        mensaje = (
            f"{encabezado}"
            "1Ô∏è‚É£ Ver panel de control\n"
            "2Ô∏è‚É£ Ver todos los perfiles\n"
            "3Ô∏è‚É£ Enviar comunicado a creadores/aspirantes\n"
            "4Ô∏è‚É£ Gesti√≥n de recursos\n"
            "5Ô∏è‚É£ Chat libre con el equipo"
        )

    else:
        mensaje = (
            f"{encabezado}"
            "1Ô∏è‚É£ Informaci√≥n general\n"
            "2Ô∏è‚É£ Chat libre"
        )

    enviar_mensaje(numero, mensaje)


def normalizar_texto(texto):
    texto = texto.strip().lower()
    texto = ''.join(c for c in unicodedata.normalize('NFD', texto)
                    if unicodedata.category(c) != 'Mn')
    return texto

# Une todas las ciudades en una sola lista para validaci√≥n
CIUDADES_LATAM = []
for ciudades in ciudades_por_pais.values():
    CIUDADES_LATAM.extend(ciudades)

def validar_aceptar_ciudad(usuario_ciudad, ciudades=CIUDADES_LATAM, score_minimo=75):
    usuario_norm = normalizar_texto(usuario_ciudad)
    ciudades_norm = [normalizar_texto(c) for c in ciudades]

    # Usar partial_ratio para que "Bogo" matchee con "Bogot√°"
    matches = process.extract(usuario_norm, ciudades_norm, scorer=fuzz.partial_ratio, limit=1)

    if matches and matches[0][1] >= score_minimo:
        idx = ciudades_norm.index(matches[0][0])
        ciudad_oficial = ciudades[idx]
        return {"ciudad": ciudad_oficial, "corregida": True}
    else:
        return {"ciudad": usuario_ciudad.strip(), "corregida": False}

def guardar_respuesta(numero: str, paso: int, texto: str):
    try:
        conn = psycopg2.connect(INTERNAL_DATABASE_URL)
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO perfil_creador_flujo_temp (telefono, paso, respuesta)
            VALUES (%s, %s, %s)
            ON CONFLICT (telefono, paso) DO UPDATE SET respuesta = EXCLUDED.respuesta
        """, (numero, paso, texto))
        conn.commit()
    except Exception as e:
        if 'conn' in locals():
            conn.rollback()
        print("‚ùå Error guardando respuesta:", e)
    finally:
        try:
            cur.close()
        except: pass
        try:
            conn.close()
        except: pass

def eliminar_flujo_temp(numero: str):
    """Elimina todos los datos temporales de la encuesta para un n√∫mero."""
    try:
        conn = psycopg2.connect(INTERNAL_DATABASE_URL)
        cur = conn.cursor()
        cur.execute("""
            DELETE FROM perfil_creador_flujo_temp
            WHERE telefono = %s
        """, (numero,))
        conn.commit()
        print(f"üóëÔ∏è Datos temporales eliminados para {numero}")
    except Exception as e:
        if 'conn' in locals():
            conn.rollback()
        print("‚ùå Error eliminando flujo temporal:", e)
    finally:
        try:
            cur.close()
        except:
            pass
        try:
            conn.close()
        except:
            pass



def enviar_diagnostico(numero: str):
    """Env√≠a el diagn√≥stico de un usuario tomando el campo mejoras_sugeridas de perfil_creador."""
    try:
        with psycopg2.connect(INTERNAL_DATABASE_URL) as conn:
            with conn.cursor() as cur:
                # 1Ô∏è‚É£ Buscar el creador por su n√∫mero
                cur.execute("""
                    SELECT id, usuario, COALESCE(nombre_real, usuario)
                    FROM creadores
                    WHERE whatsapp = %s
                """, (numero,))
                creador = cur.fetchone()

                if not creador:
                    print(f"‚ö†Ô∏è No se encontr√≥ creador con whatsapp {numero}")
                    enviar_mensaje(numero, "No encontramos tu perfil en el sistema. Verifica tu n√∫mero.")
                    return

                creador_id, usuario, nombre_real = creador

                # 2Ô∏è‚É£ Obtener mejoras_sugeridas desde perfil_creador
                cur.execute("""
                    SELECT mejoras_sugeridas
                    FROM perfil_creador
                    WHERE creador_id = %s
                """, (creador_id,))
                fila = cur.fetchone()

        # 3Ô∏è‚É£ Armar el diagn√≥stico
        if not fila or not fila[0] or not fila[0].strip():
            diagnostico = (
                f"üîé Diagn√≥stico para {nombre_real}:\n"
                "A√∫n estamos preparando la evaluaci√≥n de tu perfil. "
                "Te avisaremos tan pronto est√© lista. ‚è≥"
            )
        else:
            mejoras = fila[0].strip()
            diagnostico = f"üîé Diagn√≥stico para {nombre_real}:\n\n{mejoras}"

        # 4Ô∏è‚É£ Enviar el diagn√≥stico
        enviar_mensaje(numero, diagnostico)
        print(f"‚úÖ Diagn√≥stico enviado correctamente a {numero} ({nombre_real})")

    except Exception as e:
        print(f"‚ùå Error al enviar diagn√≥stico a {numero}: {e}")
        enviar_mensaje(numero, "Ocurri√≥ un error al generar tu diagn√≥stico. Intenta m√°s tarde.")


def enviar_requisitos(numero):
    requisitos = (
        "üìã *Requisitos para ingresar a la Agencia:*\n"
        "1Ô∏è‚É£ Ser mayor de 18 a√±os.\n"
        "2Ô∏è‚É£ Contar con documento de identidad vigente.\n"
        "3Ô∏è‚É£ Tener acceso a una computadora o smartphone con internet.\n"
        "4Ô∏è‚É£ Disponer de tiempo para transmisiones en vivo y capacitaciones.\n"
        "5Ô∏è‚É£ Contar con cuentas activas en al menos una red social (Instagram, TikTok, Facebook, etc.).\n"
        "6Ô∏è‚É£ Disposici√≥n para aprender y trabajar en equipo.\n"
        "7Ô∏è‚É£ Cumplir con las pol√≠ticas y normas internas de la Agencia.\n"
        "\n¬øTienes dudas? Responde este mensaje y te ayudamos. Puedes volver al *men√∫ principal* escribiendo 'menu'."
    )
    enviar_mensaje(numero, requisitos)

@router.post("/enviar_solicitud_informacion")
async def api_enviar_solicitar_informacion(data: dict):
    telefono = data.get("telefono")
    nombre = data.get("nombre", "").strip()

    if not telefono or not nombre:
        return JSONResponse({"error": "Faltan datos (telefono o nombre)"}, status_code=400)

    try:
        plantilla = "solicitar_informacion"
        parametros = [nombre]

        codigo, respuesta_api = enviar_plantilla_generica(
            token=TOKEN,
            phone_number_id=PHONE_NUMBER_ID,
            numero_destino=telefono,
            nombre_plantilla=plantilla,
            codigo_idioma="es_CO",
            parametros=parametros
        )

        guardar_mensaje(
            telefono,
            f"[Plantilla enviada: {plantilla} - {parametros}]",
            tipo="enviado"
        )

        return {
            "status": "ok",
            "mensaje": f"Se envi√≥ la plantilla {plantilla} a {telefono}",
            "codigo_api": codigo,
            "respuesta_api": respuesta_api
        }

    except Exception as e:
        return JSONResponse({"error": str(e)}, status_code=500)


from DataBase import *



import psycopg2
import json
from decimal import Decimal, ROUND_HALF_UP

# ================== MAPEOS ==================
map_genero = {
    "1": "Masculino",
    "2": "Femenino",
    "3": "Otro",
    "4": "Prefiero no decir"
}

#  opcionesPaises = [{value: "argentina", label: "Argentina"}, ...]
map_paises = {
    "1": "argentina",
    "2": "bolivia",
    "3": "chile",
    "4": "colombia",
    "5": "costarica",
    "6": "cuba",
    "7": "ecuador",
    "8": "elsalvador",
    "9": "guatemala",
    "10": "honduras",
    "11": "mexico",
    "12": "nicaragua",
    "13": "panama",
    "14": "paraguay",
    "15": "peru",
    "16": "puertorico",
    "17": "dominicana",
    "18": "uruguay",
    "19": "venezuela",
    "20": "otro"
}

#  opcionesEstudios = [{value: "ninguno", label: "Ninguno"}, ...]
map_estudios = {
    "1": "ninguno",
    "2": "primaria",
    "3": "secundaria",
    "4": "tecnico",
    "5": "universitario_incompleto",
    "6": "universitario",
    "7": "postgrado",
    "8": "autodidacta",
    "9": "otro"
}

#  opcionesIdiomas = [{value: "espanol", label: "Espa√±ol"}, ...]
map_idiomas = {
    "1": "espanol",
    "2": "ingles",
    "3": "portugues",
    "4": "frances",
    "5": "italiano",
    "6": "aleman",
    "7": "otro"
}

#  opcionesActividadActual = [{value: "estudiante_tiempo_completo", label: ...}, ...]
map_actividad = {
    "1": "estudiante_tiempo_completo",
    "2": "estudiante_tiempo_parcial",
    "3": "trabajo_tiempo_completo",
    "4": "trabajo_medio_tiempo",
    "5": "buscando_empleo",
    "6": "emprendiendo",
    "7": "work_medio_study_medio",  # ‚Üê Nuevo valor seg√∫n tu frontend
    "8": "disponible_total",
    "9": "otro"
}
#  opcionesHorarios = [{value: "manana", label: ...}, ...]
map_horario = {
    "1": "Ma√±ana (6am‚Äì12pm)",
    "2": "Tarde (12pm‚Äì6pm)",
    "3": "Noche (6pm‚Äì12am)",
    "4": "Madrugada (12am‚Äì6am)",
    "5": "Variable",
    "6": "Otro"
}

#  opcionesIntencionTrabajo = [{value: "trabajo_principal", label: ...}, ...]
map_intencion = {
    "1": "Fuente de ingresos principal",
    "2": "Fuente de ingresos secundario",
    "3": "Hobby, pero me gustar√≠a profesionalizarlo",
    "4": "diversi√≥n, sin intenci√≥n profesional",
    "5": "No estoy seguro"
}

#  tiposContenido = [{value: "bailes", label: ...}, ...]
map_tipo_contenido = {
    "1": "bailes",
    "2": "charlas",
    "3": "gaming",
    "4": "tutoriales",
    "5": "entretenimiento general",
    "6": "humor",
    "7": "m√∫sica en vivo",
    "8": "reacci√≥n a videos",
    "9": "religi√≥n y espiritualidad",
    "10": "temas sociales",
    "11": "estudios / tareas",
    "12": "ventas en vivo",
    "13": "Otro"
}

#  interesesOpciones = [{value: "deportes", label: ...}, ...]
map_intereses = {
    "1": "deportes",
    "2": "moda",
    "3": "maquillaje",
    "4": "cocina",
    "5": "fitness",
    "6": "m√∫sica",
    "7": "bailes",
    "8": "gaming",
    "9": "lectura",
    "10": "salud mental",
    "11": "comedia",
    "12": "religi√≥n",
    "13": "pol√≠tica",
    "14": "emprendimiento",
    "15": "viajes",
    "16": "idiomas",
    "17": "educaci√≥n",
    "18": "noticias",
    "19": "relaciones",
    "20": "arte",
    "21": "tecnolog√≠a",
    "22": "fotograf√≠a",
    "23": "Otro"
}

# ================== FUNCIONES ==================

import unicodedata

def _norm(s: str) -> str:
    if s is None:
        return ""
    s = unicodedata.normalize("NFD", s)
    s = "".join(ch for ch in s if not unicodedata.combining(ch))
    return s.strip().lower()

# Pa√≠s ‚Üí zona horaria (valores seg√∫n tu fuente)
_PAIS_A_TZ = {
    # M√©xico
    _norm("M√©xico"): "America/Mexico_City",

    # Colombia / Per√∫ / Ecuador / Panam√°
    _norm("Colombia"): "America/Bogota",
    _norm("Per√∫"): "America/Bogota",
    _norm("Ecuador"): "America/Bogota",
    _norm("Panam√°"): "America/Bogota",

    # Venezuela / Bolivia / Paraguay
    _norm("Venezuela"): "America/Caracas",
    _norm("Bolivia"): "America/Caracas",
    _norm("Paraguay"): "America/Caracas",

    # Chile
    _norm("Chile"): "America/Santiago",

    # Argentina / Uruguay
    _norm("Argentina"): "America/Argentina/Buenos_Aires",
    _norm("Uruguay"): "America/Argentina/Buenos_Aires",

    # ‚ÄúCentroam√©rica‚Äù (tu valor custom)
    _norm("Costa Rica"): "America/CentralAmerica",
    _norm("El Salvador"): "America/CentralAmerica",
    _norm("Guatemala"): "America/CentralAmerica",
    _norm("Honduras"): "America/CentralAmerica",
    _norm("Nicaragua"): "America/CentralAmerica",

    # Cuba
    _norm("Cuba"): "America/Cuba",

    # Caribe (Puerto Rico, Rep√∫blica Dominicana)
    _norm("Puerto Rico"): "America/Santo_Domingo",
    _norm("Rep√∫blica Dominicana"): "America/Santo_Domingo",

    # Brasil
    _norm("Brasil"): "America/Sao_Paulo",
}

def infer_zona_horaria(pais: str | None) -> str | None:
    if not pais:
        return None
    return _PAIS_A_TZ.get(_norm(pais))

def redondear_a_un_decimal(valor):
    return float(Decimal(valor).quantize(Decimal("0.1"), rounding=ROUND_HALF_UP))

def procesar_respuestas(respuestas):
    datos = {}

    datos["nombre"] = respuestas.get(1)
    datos["edad"] = int(respuestas.get(2)) if respuestas.get(2) else None
    datos["genero"] = map_genero.get(respuestas.get(3))
    datos["pais"] = map_paises.get(respuestas.get(4))

    # Ciudad: corrige antes de guardar
    ciudad_usuario = respuestas.get(5)
    if ciudad_usuario:
        resultado = validar_aceptar_ciudad(ciudad_usuario)
        datos["ciudad"] = resultado["ciudad"]
    else:
        datos["ciudad"] = None

    datos["actividad_actual"] = map_actividad.get(respuestas.get(6))
    datos["intencion_trabajo"] = map_intencion.get(respuestas.get(7))
    datos["tiempo_disponible"] = int(respuestas.get(10)) if respuestas.get(10) and respuestas.get(10).isdigit() else None
    datos["frecuencia_lives"] = int(respuestas.get(11)) if respuestas.get(11) and respuestas.get(11).isdigit() else None

    # ‚¨áÔ∏è NUEVO: zona_horaria con base al pa√≠s
    if datos.get("pais"):
        tz = infer_zona_horaria(datos["pais"])
        if tz:
            datos["zona_horaria"] = tz

    # Experiencia TikTok Live (paso 8 y 9)
    experiencia_tiktok = 0
    if respuestas.get(8, "").lower() in {"si", "s√≠", "s"}:
        try:
            meses = int(respuestas.get(9, 0))
            experiencia_tiktok = round(meses / 12, 1)
        except:
            experiencia_tiktok = 0

    experiencia = {
        "TikTok Live": experiencia_tiktok,
        "Bigo Live": 0,
        "NimoTV": 0,
        "Twitch": 0,
        "Otro": 0
    }
    datos["experiencia_otras_plataformas"] = json.dumps(experiencia)

    return datos


def consolidar_perfil(telefono: str):
    """Procesa y actualiza un solo n√∫mero en perfil_creador con manejo de errores"""
    try:
        with psycopg2.connect(INTERNAL_DATABASE_URL) as conn:
            with conn.cursor() as cur:
                # Buscar creador por n√∫mero
                cur.execute("SELECT id, usuario, nombre_real, whatsapp FROM creadores WHERE whatsapp=%s", (telefono,))
                creador = cur.fetchone()
                if not creador:
                    print(f"‚ö†Ô∏è No se encontr√≥ creador con whatsapp {telefono}")
                    return

                creador_id = creador[0]

                # Obtener respuestas de flujo temporal
                cur.execute("""
                    SELECT paso, respuesta 
                    FROM perfil_creador_flujo_temp 
                    WHERE telefono=%s 
                    ORDER BY paso ASC
                """, (telefono,))
                rows = cur.fetchall()
                respuestas = {int(p): r for p, r in rows}

                # Procesar respuestas
                datos_update = procesar_respuestas(respuestas)

                # ‚¨ÖÔ∏è A√ëADIMOS el tel√©fono al update de perfil_creador
                datos_update["telefono"] = telefono

                # ‚úÖ Si hay nombre, actualizamos tambi√©n en la tabla creadores
                if datos_update.get("nombre"):
                    cur.execute("""
                                       UPDATE creadores 
                                       SET nombre_real=%s 
                                       WHERE id=%s
                                   """, (datos_update["nombre"], creador_id))
                    print(f"üß© Actualizado nombre_real='{datos_update['nombre']}' en creadores")

                # Crear query din√°mico UPDATE
                set_clause = ", ".join([f"{k}=%s" for k in datos_update.keys()])
                values = list(datos_update.values())
                values.append(creador_id)

                query = f"UPDATE perfil_creador SET {set_clause} WHERE creador_id=%s"
                cur.execute(query, values)
                conn.commit()

                print(f"‚úÖ Actualizado perfil_creador para creador_id={creador_id} ({telefono})")

    except Exception as e:
        print(f"‚ùå Error al procesar n√∫mero {telefono}: {str(e)}")

    return {"status": "ok"}



# --------------------
# PREGUNTAS ASPIRANTES
# --------------------

preguntas = {
    1: "üë§‚ú® ¬øCu√°l es tu nombre completo sin apellidos?",

    2: (
        "üéÇ {nombre}, dime por favor en qu√© rango de edad te encuentras:\n"
        "1Ô∏è‚É£ üë∂ Menos de 18 a√±os\n"
        "2Ô∏è‚É£ üßë 18 - 24 a√±os\n"
        "3Ô∏è‚É£ üë®‚Äçü¶± 25 - 34 a√±os\n"
        "4Ô∏è‚É£ üë©‚Äçü¶≥ 35 - 45 a√±os\n"
        "5Ô∏è‚É£ üßì M√°s de 45 a√±os"
    ),

    3: (
        "üöª ¬øQu√© g√©nero eres?:\n"
        "1Ô∏è‚É£ ‚ôÇÔ∏è Masculino\n"
        "2Ô∏è‚É£ ‚ôÄÔ∏è Femenino\n"
        "3Ô∏è‚É£ üåà Otro\n"
        "4Ô∏è‚É£ üôä Prefiero no decir"
    ),

    4: (
        "üåé {nombre}, es importante conocer en qu√© pa√≠s te encuentras para continuar en el proceso:\n"
        "1Ô∏è‚É£ üá¶üá∑ Argentina\n"
        "2Ô∏è‚É£ üáßüá¥ Bolivia\n"
        "3Ô∏è‚É£ üá®üá± Chile\n"
        "4Ô∏è‚É£ üá®üá¥ Colombia\n"
        "5Ô∏è‚É£ üá®üá∑ Costa Rica\n"
        "6Ô∏è‚É£ üá®üá∫ Cuba\n"
        "7Ô∏è‚É£ üá™üá® Ecuador\n"
        "8Ô∏è‚É£ üá∏üáª El Salvador\n"
        "9Ô∏è‚É£ üá¨üáπ Guatemala\n"
        "üîü üá≠üá≥ Honduras\n"
        "1Ô∏è‚É£1Ô∏è‚É£ üá≤üáΩ M√©xico\n"
        "1Ô∏è‚É£2Ô∏è‚É£ üá≥üáÆ Nicaragua\n"
        "1Ô∏è‚É£3Ô∏è‚É£ üáµüá¶ Panam√°\n"
        "1Ô∏è‚É£4Ô∏è‚É£ üáµüáæ Paraguay\n"
        "1Ô∏è‚É£5Ô∏è‚É£ üáµüá™ Per√∫\n"
        "1Ô∏è‚É£6Ô∏è‚É£ üáµüá∑ Puerto Rico\n"
        "1Ô∏è‚É£7Ô∏è‚É£ üá©üá¥ Rep√∫blica Dominicana\n"
        "1Ô∏è‚É£8Ô∏è‚É£ üá∫üáæ Uruguay\n"
        "1Ô∏è‚É£9Ô∏è‚É£ üáªüá™ Venezuela\n"
        "2Ô∏è‚É£0Ô∏è‚É£ üåç Otro (escribe tu pa√≠s)"
    ),

    5: "üèôÔ∏è ¬øEn qu√© ciudad est√°s? (escr√≠bela en texto)",

    6: (
        "üëî Me gustar√≠a conocer tu actividad actual:\n"
        "1Ô∏è‚É£ üéì Estudia tiempo completo\n"
        "2Ô∏è‚É£ üìö Estudia medio tiempo\n"
        "3Ô∏è‚É£ üíº Trabaja tiempo completo\n"
        "4Ô∏è‚É£ üïí Trabaja medio tiempo\n"
        "5Ô∏è‚É£ üîç Buscando empleo\n"
        "6Ô∏è‚É£ üöÄ Emprendiendo\n"
        "7Ô∏è‚É£ ‚è≥ Trabaja/emprende medio tiempo y estudia medio tiempo\n"
        "8Ô∏è‚É£ üü¢ Disponible tiempo completo\n"
        "9Ô∏è‚É£ ‚ùì Otro"
    ),

    7: (
        "üåü {nombre}, dime cu√°l es tu objetivo principal en la plataforma TikTok:\n"
        "1Ô∏è‚É£ üí∞ Fuente de ingresos principal\n"
        "2Ô∏è‚É£ ü™ô Fuente de ingresos secundaria\n"
        "3Ô∏è‚É£ üé≠ Hobby, pero me gustar√≠a profesionalizarlo\n"
        "4Ô∏è‚É£ üòÑ Diversi√≥n, sin intenci√≥n profesional\n"
        "5Ô∏è‚É£ ü§î No estoy seguro"
    ),

    8: "üì∫ ¬øTienes experiencia transmitiendo lives en TikTok? Contesta *s√≠* o *no*.",

    9: "‚è±Ô∏è ¬øCu√°ntos meses de experiencia tienes en TikTok Live?",

    10: (
        "üï∞Ô∏è ¬øCu√°nto tiempo en horas estar√≠as dispuesto/a por d√≠a para hacer lives?\n"
        "1Ô∏è‚É£ ‚è≥ 0-1 hrs\n"
        "2Ô∏è‚É£ ‚è∞ 1-3 hrs\n"
        "3Ô∏è‚É£ üï∫ M√°s de 3 hrs"
    ),

    11: (
        "üìÖ ¬øCu√°ntos d√≠as a la semana podr√≠as transmitir?\n"
        "1Ô∏è‚É£ 1-2 d√≠as\n"
        "2Ô∏è‚É£ 3-5 d√≠as\n"
        "3Ô∏è‚É£ üåû Todos los d√≠as\n"
        "4Ô∏è‚É£ üö´ Ninguno"
    ),
}

# ------------------------------------------------------------------
# ------------------------------------------------------------------
# MENSAJES
# ------------------------------------------------------------------
Mensaje_bienvenida = (
    "üëã Bienvenido a Prestige Agency Live."
    "Soy *Prestigio*, tu asistente de experiencia ü§ñ.\n"
    "Es un gusto acompa√±arte en este proceso de aplicaci√≥n. üöÄ\n\n"
    "Para comenzar, dime por favor:\n"
    "¬øCu√°l es tu usuario de TikTok para validar en la plataforma?"
)

Mensaje_encuesta_incompleta = (
    "üìù Hemos detectado que a√∫n no has finalizado tu encuesta.\n\n"
    "Por favor, compl√©tala para que podamos continuar con tu proceso en *Prestige Agency Live*. üí´\n\n"
    "¬øDeseas retomarla ahora?"
)


def mensaje_confirmar_nombre(nombre: str) -> str:
    return f"Veo que tu nombre o seud√≥nimo es {nombre}. Para continuar Contesta *s√≠* o *no*."

def mensaje_proteccion_datos() -> str:
    return (
        "üîí *Protecci√≥n de datos y consentimiento*\n\n"
        "Antes de continuar, se te har√°n *preguntas personales b√°sicas* para evaluar tu perfil como aspirante a creador de contenido en *Prestige Agency Live*.\n\n"
        "Tus datos ser√°n usados √∫nicamente para este proceso y tienes derecho a conocer, actualizar o eliminar tu informaci√≥n en cualquier momento.\n\n"
        "Si aceptas y deseas iniciar la encuesta, haz clic en el siguiente bot√≥n."
    )

def mensaje_encuesta_final_parte1(nombre: str | None = None) -> str:

    if nombre:
        return (
            f"{nombre}, ya para finalizar esta primera parte del proceso, "
            "es importante que respondas estas 2 preguntas üí™"
        )
    else:
        return (
            "Ya para finalizar esta primera parte del proceso, "
            "es importante que respondas estas 2 preguntas üí™"
        )


def mensaje_encuesta_final(nombre: str | None = None) -> str:
    if nombre:
        return (
            f"‚úÖ ¬°Gracias, *{nombre}*! üôå\n"
            "Prestige validar√° tu informaci√≥n y en las pr√≥ximas 2 horas te daremos una respuesta.\n\n"
            "Si prefieres, tambi√©n puedes consultarla desde el men√∫ de opciones."
        )
    else:
        return (
            "‚úÖ ¬°Gracias! üôå\n"
            "Prestige validar√° tu informaci√≥n y en las pr√≥ximas 2 horas te daremos una respuesta.\n\n"
            "Si prefieres, tambi√©n puedes consultarla desde el men√∫ de opciones."
        )



def obtener_nombre_usuario(numero: str) -> str | None:
    datos = usuarios_flujo.get(numero)
    if isinstance(datos, dict):
        return datos.get("nombre")
    # Limpieza autom√°tica si el valor es inv√°lido
    usuarios_flujo.pop(numero, None)
    return None


def asegurar_flujo(numero: str) -> dict:
    if numero not in usuarios_flujo or not isinstance(usuarios_flujo[numero], dict):
        usuarios_flujo[numero] = {"timestamp": time.time()}
    return usuarios_flujo[numero]

def enviar_preguntas_frecuentes(numero):
    """
    Env√≠a una lista de preguntas frecuentes al usuario por WhatsApp.
    Temporal: se puede luego conectar a una base de datos o archivo din√°mico.
    """
    mensaje = (
        "‚ùì *Preguntas Frecuentes (FAQ)*\n\n"
        "1Ô∏è‚É£ *¬øQu√© requisitos necesito para ingresar a la Agencia Prestige?*\n"
        "Debes tener una cuenta activa en TikTok, con contenido propio y al menos 50 seguidores.\n\n"
        "2Ô∏è‚É£ *¬øDebo tener experiencia previa?*\n"
        "No es necesario. Contamos con capacitaciones para nuevos creadores.\n\n"
        "3Ô∏è‚É£ *¬øCu√°nto tiempo tarda el proceso de ingreso?*\n"
        "Generalmente entre 2 y 5 d√≠as h√°biles, dependiendo de la respuesta a las entrevistas.\n\n"
        "4Ô∏è‚É£ *¬øPuedo monetizar mis transmisiones en vivo?*\n"
        "S√≠, una vez seas parte de la Agencia y cumplas los requisitos de TikTok Live.\n\n"
        "5Ô∏è‚É£ *¬øQui√©n me asesora durante el proceso?*\n"
        "Uno de nuestros managers o asesores de reclutamiento te acompa√±ar√° paso a paso.\n\n"
        "‚ú® Si deseas volver al men√∫ principal, escribe *menu*."
    )
    enviar_mensaje(numero, mensaje)


def manejar_respuesta_v0(numero, texto):
    texto = texto.strip()
    texto_normalizado = texto.lower()
    paso = obtener_flujo(numero)
    rol = obtener_rol_usuario(numero)
    flujo = asegurar_flujo(numero)  # üîí Inicializaci√≥n segura
    nombre = flujo.get("nombre") or obtener_nombre_usuario(numero)

    # --- 1Ô∏è‚É£ SALUDOS INICIALES ---
    if texto_normalizado in {"hola", "buenas", "saludos", "brillar"}:
        usuario_bd = buscar_usuario_por_telefono(numero)
        if usuario_bd:
            nombre = usuario_bd.get("nombre", "").split(" ")[0] or ""
            rol = usuario_bd.get("rol", "aspirante")
            enviar_menu_principal(numero, rol=rol, nombre=nombre)
        else:
            enviar_mensaje(numero, Mensaje_bienvenida)
            actualizar_flujo(numero, "esperando_usuario_tiktok")
        return

    # --- 2Ô∏è‚É£ VOLVER AL MEN√ö PRINCIPAL ---
    if texto_normalizado in {"menu", "men√∫", "volver", "inicio"}:
        usuarios_flujo.pop(numero, None)
        enviar_menu_principal(numero, rol)
        return

    # üö´ CHAT LIBRE NO PROCESA FLUJOS
    if paso == "chat_libre":
        return

    # --- 3Ô∏è‚É£ MEN√ö PRINCIPAL POR ROL ---
    if paso is None:
        opciones = texto_normalizado
        match rol:
            # --- üåü MEN√ö ASPIRANTE PERSONALIZADO ---
            case "aspirante":
                match opciones:
                    case "1" | "mi informaci√≥n" | "perfil":
                        actualizar_flujo(numero, 1)
                        enviar_pregunta(numero, 1)
                    case "2" | "an√°lisis" | "diagn√≥stico" | "diagnostico":
                        actualizar_flujo(numero, "diagnostico")
                        enviar_diagnostico(numero)
                        usuarios_flujo.pop(numero, None)
                    case "3" | "requisitos":
                        actualizar_flujo(numero, "requisitos")
                        enviar_requisitos(numero)
                        usuarios_flujo.pop(numero, None)
                    case "4" | "chat libre":
                        actualizar_flujo(numero, "chat_libre")
                        enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
                    case "5" | "preguntas" | "faq":
                        actualizar_flujo(numero, "faq")
                        enviar_preguntas_frecuentes(numero)
                        usuarios_flujo.pop(numero, None)
                    case _:
                        enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
                return

            # --- üé¨ MEN√ö CREADOR ---
            case "creador":
                match opciones:
                    case "1":
                        actualizar_flujo(numero, 1)
                        enviar_pregunta(numero, 1)
                    case "3":
                        actualizar_flujo(numero, "asesoria")
                        enviar_mensaje(numero, "üìå Un asesor se pondr√° en contacto contigo pronto.")
                        usuarios_flujo.pop(numero, None)
                    case "4":
                        actualizar_flujo(numero, "recursos")
                        enviar_recursos_exclusivos(numero)
                        usuarios_flujo.pop(numero, None)
                    case "5":
                        actualizar_flujo(numero, "eventos")
                        enviar_eventos(numero)
                        usuarios_flujo.pop(numero, None)
                    case "6":
                        actualizar_flujo(numero, "soporte")
                        enviar_mensaje(numero, "üì© Describe tu problema y el equipo t√©cnico te responder√°.")
                    case "7" | "chat libre":
                        actualizar_flujo(numero, "chat_libre")
                        enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
                    case "8":
                        actualizar_flujo(numero, "estadisticas")
                        enviar_estadisticas(numero)
                        usuarios_flujo.pop(numero, None)
                    case "9":
                        actualizar_flujo(numero, "baja")
                        solicitar_baja(numero)
                        usuarios_flujo.pop(numero, None)
                    case _:
                        enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
                return

            # --- üõ†Ô∏è MEN√ö ADMIN ---
            case "admin":
                match opciones:
                    case "1":
                        actualizar_flujo(numero, "panel")
                        enviar_panel_control(numero)
                    case "2":
                        actualizar_flujo(numero, "ver_perfiles")
                        enviar_perfiles(numero)
                        usuarios_flujo.pop(numero, None)
                    case "3":
                        actualizar_flujo(numero, "comunicado")
                        enviar_mensaje(numero, "‚úâÔ∏è Escribe el comunicado a enviar a creadores/aspirantes:")
                    case "4":
                        actualizar_flujo(numero, "recursos_admin")
                        gestionar_recursos(numero)
                        usuarios_flujo.pop(numero, None)
                    case "5" | "chat libre":
                        actualizar_flujo(numero, "chat_libre")
                        enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
                    case _:
                        enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
                return

            # --- üß© DEFAULT (SIN ROL) ---
            case _:
                if opciones == "1":
                    actualizar_flujo(numero, "info")
                    enviar_info_general(numero)
                else:
                    enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
                return

    # --- 4Ô∏è‚É£ FLUJO DE ENCUESTA ---
    if isinstance(paso, int):
        if paso == 1:
            if len(texto) < 3:
                enviar_mensaje(numero, "‚ö†Ô∏è Ingresa tu nombre completo (m√≠nimo 3 caracteres).")
                return
            flujo["nombre"] = texto.title().strip()
            nombre = flujo["nombre"]

        validaciones = {
            2: lambda t: t.isdigit() and 1 <= int(t) <= 5,
            3: lambda t: t in {"1", "2", "3", "4"},
            4: lambda t: t in list(mapa_paises.keys()) + ["20"] or t.lower() in [v.lower() for v in mapa_paises.values()],
            6: lambda t: t in [str(i) for i in range(1, 10)],
            7: lambda t: t in [str(i) for i in range(1, 6)],
            9: lambda t: t in {"1", "2", "3"},
            10: lambda t: t in {"1", "2", "3", "4"}
        }

        if paso in validaciones and not validaciones[paso](texto_normalizado):
            enviar_mensaje(numero, f"‚ö†Ô∏è Ingresa una opci√≥n v√°lida para la pregunta {paso}.")
            return

        if paso == 5:
            resultado = validar_aceptar_ciudad(texto)
            texto = resultado["ciudad"]
            # enviar_mensaje(numero, f"‚úÖ Ciudad reconocida: {texto}")

        if paso == 7:
            enviar_mensaje(numero, "üìå ¬øTienes experiencia transmitiendo lives en TikTok? Contesta *s√≠* o *no*.")
            actualizar_flujo(numero, "7b")
            return

        if paso == 8:
            try:
                meses = int(texto)
                if not (0 <= meses <= 999):
                    raise ValueError
            except ValueError:
                enviar_mensaje(numero, "‚ö†Ô∏è Ingresa un n√∫mero v√°lido de meses (0‚Äì999).")
                return
            enviar_mensaje(numero, mensaje_encuesta_final_parte1(nombre))

        guardar_respuesta(numero, paso, texto)
        siguiente = paso + 1

        # ‚úÖ Finalizaci√≥n del flujo
        if siguiente not in preguntas:
            usuarios_flujo.pop(numero, None)
            enviar_mensaje(numero, mensaje_encuesta_final(nombre))
            consolidar_perfil(numero)
            enviar_mensaje(numero, '‚ú® Para ir al men√∫ principal escribe **brillar**')
            return

        actualizar_flujo(numero, siguiente)
        texto_pregunta = preguntas[siguiente]
        if "{nombre}" in texto_pregunta:
            texto_pregunta = texto_pregunta.format(nombre=nombre)
        enviar_mensaje(numero, texto_pregunta)
        return

    # --- 5Ô∏è‚É£ PREGUNTA CONDICIONAL (7b) ---
    if paso == "7b":
        if texto_normalizado in {"si", "s√≠", "s"}:
            enviar_mensaje(numero, preguntas[8])
            actualizar_flujo(numero, 8)
        elif texto_normalizado in {"no", "n"}:
            guardar_respuesta(numero, 8, "0")
            enviar_mensaje(numero, preguntas[9])
            actualizar_flujo(numero, 9)
        else:
            enviar_mensaje(numero, "Por favor responde solo *s√≠* o *no*.")


def manejar_menuv0(numero, texto, paso, rol):
    texto_normalizado = texto.strip().lower()
    # --- SALUDOS UNIVERSALES ---
    if texto_normalizado in {"hola", "buenas", "saludos", "brillar"}:
        usuario_bd = buscar_usuario_por_telefono(numero)
        if usuario_bd:
            nombre = usuario_bd.get("nombre", "").split(" ")[0] or ""
            rol = usuario_bd.get("rol", "aspirante")
            enviar_menu_principal(numero, rol=rol, nombre=nombre)
        else:
            enviar_mensaje(numero, Mensaje_bienvenida)
            actualizar_flujo(numero, "esperando_usuario_tiktok")
        return True

    # --- VOLVER AL MEN√ö PRINCIPAL ---
    if texto_normalizado in {"menu", "men√∫", "volver", "inicio"}:
        usuarios_flujo.pop(numero, None)
        enviar_menu_principal(numero, rol)
        return True

    # --- MENU PRINCIPAL POR ROL ---
    if paso is None:
        match rol:
            case "aspirante":
                match texto_normalizado:
                    case "1" | "mi informaci√≥n" | "perfil":
                        actualizar_flujo(numero, 1)
                        enviar_pregunta(numero, 1)
                    case "2" | "an√°lisis" | "diagn√≥stico" | "diagnostico":
                        actualizar_flujo(numero, "diagnostico")
                        enviar_diagnostico(numero)
                        usuarios_flujo.pop(numero, None)
                    case "3" | "requisitos":
                        actualizar_flujo(numero, "requisitos")
                        enviar_requisitos(numero)
                        usuarios_flujo.pop(numero, None)
                    case "4" | "chat libre":
                        actualizar_flujo(numero, "chat_libre")
                        enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
                    case "5" | "preguntas" | "faq":
                        actualizar_flujo(numero, "faq")
                        enviar_preguntas_frecuentes(numero)
                        usuarios_flujo.pop(numero, None)
                    case _:
                        enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
                return True
            # ... otros roles igual que antes ...
    return False  # No fue men√∫

# =========================
# Orquestador
# =========================
def manejar_respuesta(numero, texto):
    texto = texto.strip()
    texto_normalizado = texto.lower()

    # Estado actual
    paso = obtener_flujo(numero)              # puede ser None, int, o string (p.e. "chat_libre")
    rol = obtener_rol_usuario(numero)
    asegurar_flujo(numero)                    # asegura estructura en cach√©

    # 1) Atajos globales
    if _es_saludo(texto_normalizado):
        _procesar_saludo(numero, rol)
        return

    if _es_volver_menu(texto_normalizado):
        usuarios_flujo.pop(numero, None)
        enviar_menu_principal(numero, rol)
        return

    if paso == "chat_libre":
        # En chat libre no procesamos men√∫/encuesta
        return

    # 2) Delegar seg√∫n estado
    if paso is None or isinstance(paso, str):
        manejar_menu(numero, texto_normalizado, rol)     # üëà MEN√ö
    elif isinstance(paso, int):
        manejar_encuesta(numero, texto, texto_normalizado, paso, rol)  # üëà ENCUESTA
    else:
        enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")


# =========================
# Utilidades simples
# =========================
def _es_saludo(tn: str) -> bool:
    return tn in {"hola", "buenas", "saludos", "brillar"}

def _es_volver_menu(tn: str) -> bool:
    return tn in {"menu", "men√∫", "volver", "inicio"}

def _procesar_saludo(numero, rol_actual):
    usuario_bd = buscar_usuario_por_telefono(numero)
    if usuario_bd:
        nombre = (usuario_bd.get("nombre") or "").split(" ")[0]
        rol = usuario_bd.get("rol", rol_actual or "aspirante")
        enviar_menu_principal(numero, rol=rol, nombre=nombre)
    else:
        enviar_mensaje(numero, Mensaje_bienvenida)
        actualizar_flujo(numero, "esperando_usuario_tiktok")


# =========================
#  MEN√ö (por rol)
# =========================
def manejar_menu(numero, texto_normalizado, rol):
    # Men√∫s por rol

    if rol == "aspirante":
        if texto_normalizado in {"1", "actualizar mi informaci√≥n", "perfil"}:
            enviar_mensaje(numero, "‚úèÔ∏è Perfecto. Vamos a actualizar tu informaci√≥n. Empecemos...")
            marcar_encuesta_no_finalizada(numero)
            eliminar_flujo_temp(numero)
            actualizar_flujo(numero, 1)
            enviar_pregunta(numero, 1)
            return
        if texto_normalizado in {"2", "an√°lisis", "diagn√≥stico", "diagnostico"}:
            actualizar_flujo(numero, "diagnostico")
            enviar_diagnostico(numero)
            usuarios_flujo.pop(numero, None)
            return
        if texto_normalizado in {"3", "requisitos"}:
            actualizar_flujo(numero, "requisitos")
            enviar_requisitos(numero)
            usuarios_flujo.pop(numero, None)
            return
        if texto_normalizado in {"4", "chat libre"}:
            actualizar_flujo(numero, "chat_libre")
            enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
            return
        if texto_normalizado in {"5", "preguntas", "faq"}:
            actualizar_flujo(numero, "faq")
            enviar_preguntas_frecuentes(numero)
            usuarios_flujo.pop(numero, None)
            return
        # Si no es una opci√≥n v√°lida: muestra SIEMPRE el men√∫ principal de aspirante
        nombre = buscar_usuario_por_telefono(numero).get("nombre", "").split(" ")[0] or ""
        enviar_menu_principal(numero, rol=rol, nombre=nombre)
        return

    if rol == "creador":
        if texto_normalizado == "1":
            actualizar_flujo(numero, 1)
            enviar_pregunta(numero, 1)
            return
        if texto_normalizado == "3":
            actualizar_flujo(numero, "asesoria")
            enviar_mensaje(numero, "üìå Un asesor se pondr√° en contacto contigo pronto.")
            usuarios_flujo.pop(numero, None)
            return
        if texto_normalizado == "4":
            actualizar_flujo(numero, "recursos")
            enviar_recursos_exclusivos(numero)
            usuarios_flujo.pop(numero, None)
            return
        if texto_normalizado == "5":
            actualizar_flujo(numero, "eventos")
            enviar_eventos(numero)
            usuarios_flujo.pop(numero, None)
            return
        if texto_normalizado == "6":
            actualizar_flujo(numero, "soporte")
            enviar_mensaje(numero, "üì© Describe tu problema y el equipo t√©cnico te responder√°.")
            return
        if texto_normalizado in {"7", "chat libre"}:
            actualizar_flujo(numero, "chat_libre")
            enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
            return
        if texto_normalizado == "8":
            actualizar_flujo(numero, "estadisticas")
            enviar_estadisticas(numero)
            usuarios_flujo.pop(numero, None)
            return
        if texto_normalizado == "9":
            actualizar_flujo(numero, "baja")
            solicitar_baja(numero)
            usuarios_flujo.pop(numero, None)
            return
        # Si no es una opci√≥n v√°lida: muestra SIEMPRE el men√∫ principal de creador
        nombre = buscar_usuario_por_telefono(numero).get("nombre", "").split(" ")[0] or ""
        enviar_menu_principal(numero, rol=rol, nombre=nombre)
        return

    if rol == "admin":
        if texto_normalizado == "1":
            actualizar_flujo(numero, "panel")
            enviar_panel_control(numero)
            return
        if texto_normalizado == "2":
            actualizar_flujo(numero, "ver_perfiles")
            enviar_perfiles(numero)
            usuarios_flujo.pop(numero, None)
            return
        if texto_normalizado == "3":
            actualizar_flujo(numero, "comunicado")
            enviar_mensaje(numero, "‚úâÔ∏è Escribe el comunicado a enviar a creadores/aspirantes:")
            return
        if texto_normalizado == "4":
            actualizar_flujo(numero, "recursos_admin")
            gestionar_recursos(numero)
            usuarios_flujo.pop(numero, None)
            return
        if texto_normalizado in {"5", "chat libre"}:
            actualizar_flujo(numero, "chat_libre")
            enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
            return
        # Si no es una opci√≥n v√°lida: muestra SIEMPRE el men√∫ principal de admin
        nombre = buscar_usuario_por_telefono(numero).get("nombre", "").split(" ")[0] or ""
        enviar_menu_principal(numero, rol=rol, nombre=nombre)
        return

    # Rol desconocido ‚Üí men√∫ b√°sico
    if texto_normalizado == "1":
        actualizar_flujo(numero, "info")
        enviar_info_general(numero)
        return

    # Cualquier otro caso, men√∫ b√°sico para rol desconocido
    nombre = buscar_usuario_por_telefono(numero).get("nombre", "").split(" ")[0] or ""
    enviar_menu_principal(numero, rol=rol, nombre=nombre)

def manejar_encuesta(numero, texto, texto_normalizado, paso, rol):
    # ‚Äî Paso 1: Nombre
    if paso == 1:
        if len(texto) < 3:
            enviar_mensaje(numero, "‚ö†Ô∏è Ingresa tu nombre completo (m√≠nimo 3 caracteres).")
            return
        flujo = asegurar_flujo(numero)
        flujo["nombre"] = texto.title().strip()

    # ‚Äî Paso 2: Edad
    if paso == 2:
        try:
            edad = int(texto)
            if not (0 < edad < 120):
                raise ValueError
        except:
            enviar_mensaje(numero, "‚ö†Ô∏è Ingresa una edad v√°lida (1‚Äì119).")
            return

    # ‚Äî Paso 3: G√©nero
    if paso == 3 and texto not in {"1", "2", "3", "4"}:
        enviar_mensaje(numero, "‚ö†Ô∏è Ingresa solo el n√∫mero (1‚Äì4).")
        return

    # ‚Äî Paso 4: Pa√≠s
    if paso == 4:
        opciones_validas = [str(i) for i in range(1, 21)]
        if texto not in opciones_validas and len(texto) < 2:
            enviar_mensaje(numero, "‚ö†Ô∏è Ingresa el n√∫mero de tu pa√≠s.")
            return

    # ‚Äî Paso 5: Ciudad
    if paso == 5 and len(texto) < 2:
        enviar_mensaje(numero, "‚ö†Ô∏è Ingresa una ciudad v√°lida.")
    else:
        resultado = validar_aceptar_ciudad(texto)
        if resultado["corregida"]:
            texto = resultado["ciudad"]
            enviar_mensaje(numero, f"‚úÖ Ciudad reconocida y corregida: {texto}")
        return


    # ‚Äî Paso 6: Actividad actual
    if paso == 6 and texto not in [str(i) for i in range(1, 9)]:
        enviar_mensaje(numero, "‚ö†Ô∏è Ingresa solo el n√∫mero (1‚Äì8).")
        return

    # ‚Äî Paso 7: Intenci√≥n principal
    if paso == 7 and texto not in [str(i) for i in range(1, 6)]:
        enviar_mensaje(numero, "‚ö†Ô∏è Ingresa solo el n√∫mero (1‚Äì5).")
        return

    # ‚Äî Paso 8: ¬øTiene experiencia transmitiendo?
    if paso == 8:
        if texto_normalizado in {"si", "s√≠", "s"}:
            texto = "s√≠"
        elif texto_normalizado in {"no", "n"}:
            texto = "no"
        else:
            enviar_mensaje(numero, "‚ö†Ô∏è Por favor responde solo *s√≠* o *no*.")
            return

        guardar_respuesta(numero, paso, texto)
        nombre = (asegurar_flujo(numero).get("nombre") or "").split(" ")[0]

        # üëâ Si respondi√≥ NO, salta la 10
        if texto == "no":
            enviar_mensaje(
                numero,
                f"‚úÖ Gracias {nombre}. Para continuar en el proceso, responde estas **3 preguntas adicionales**."
            )
            actualizar_flujo(numero, 10)
            enviar_mensaje(numero, preguntas[10].format(nombre=nombre))
            return

        # üëâ Si respondi√≥ S√ç, contin√∫a normalmente a la 9
        actualizar_flujo(numero, 9)
        enviar_mensaje(numero, preguntas[9])
        return

    # ‚Äî Paso 9: Meses de experiencia (solo si respondi√≥ s√≠)
    if paso == 9:
        try:
            meses = int(texto)
            if not (0 <= meses <= 999):
                raise ValueError
        except:
            enviar_mensaje(numero, "‚ö†Ô∏è Ingresa un n√∫mero v√°lido de meses (0‚Äì999).")
            return

        guardar_respuesta(numero, paso, texto)

        # ‚úÖ Muestra el mensaje puente despu√©s de la 9
        nombre = (asegurar_flujo(numero).get("nombre") or "").split(" ")[0]
        enviar_mensaje(
            numero,
            f"‚úÖ Gracias {nombre}. Para continuar en el proceso, responde estas **3 preguntas adicionales**."
        )

        # Avanza al paso 10
        actualizar_flujo(numero, 10)
        enviar_mensaje(numero, preguntas[10].format(nombre=nombre))
        return

    # ‚Äî Paso 10: Horas/d√≠a
    if paso == 10:
        if texto not in {"1", "2", "3"}:
            enviar_mensaje(numero, "‚ö†Ô∏è Ingresa solo el n√∫mero (1‚Äì3).")
            return

    # ‚Äî Paso 11: D√≠as a la semana para transmitir
    if paso == 11:
        if texto not in {"1", "2", "3", "4"}:
            enviar_mensaje(numero, "‚ö†Ô∏è Ingresa solo el n√∫mero (1‚Äì4).")
            return

    # Guardar respuesta general
    guardar_respuesta(numero, paso, texto)

    # Determinar siguiente paso
    siguiente = paso + 1
    ultimo_paso = max(preguntas.keys())

    # üèÅ Si termin√≥ la encuesta
    if siguiente > ultimo_paso:
        usuarios_flujo.pop(numero, None)
        nombre = (asegurar_flujo(numero).get("nombre") or "").split(" ")[0]
        enviar_mensaje(numero, mensaje_encuesta_final(nombre))
        consolidar_perfil(numero)

        # ‚úÖ Marcar encuesta completada en la BD
        completada = marcar_encuesta_completada(numero)
        if completada:
            enviar_mensaje(numero, "üìä Tu encuesta fue registrada correctamente en el sistema.")
        else:
            enviar_mensaje(numero, "‚ö†Ô∏è No pudimos confirmar el registro en la base de datos, pero tus respuestas fueron guardadas.")

        enviar_mensaje(numero, '‚ú® Para ir al men√∫ principal escribe **brillar**')
        return

    # Continuar flujo normal
    actualizar_flujo(numero, siguiente)
    texto_pregunta = preguntas[siguiente]
    nombre = (asegurar_flujo(numero).get("nombre") or "").split(" ")[0]
    if "{nombre}" in texto_pregunta:
        texto_pregunta = texto_pregunta.format(nombre=nombre)
    enviar_mensaje(numero, texto_pregunta)

def eliminar_flujo(numero: str):
    """Reinicia cualquier flujo o estado temporal del usuario."""
    usuarios_flujo.pop(numero, None)
    usuarios_temp.pop(numero, None)
    print(f"üßπ Flujo reiniciado para {numero}")

@router.post("/webhook")
async def whatsapp_webhook(request: Request):
    data = await request.json()
    print("üì© Webhook recibido:", json.dumps(data, indent=2))

    try:
        cambios = data.get("entry", [])[0].get("changes", [])[0].get("value", {})
        mensajes = cambios.get("messages", [])
        if not mensajes:
            return {"status": "ok"}

        for mensaje in mensajes:
            numero = mensaje.get("from")
            tipo = mensaje.get("type")
            paso = obtener_flujo(numero)
            usuario_bd = buscar_usuario_por_telefono(numero)
            rol = obtener_rol_usuario(numero) if usuario_bd else None

            # === Obt√©n el texto antes de cualquier uso ===
            texto = mensaje.get("text", {}).get("body", "").strip()
            texto_lower = texto.lower()

            # === 4Ô∏è‚É£ CHAT LIBRE ===  (Esto va primero)
            if paso == "chat_libre":
                if tipo == "text":
                    guardar_mensaje(numero, texto, tipo="recibido", es_audio=False)
                elif tipo == "audio":
                    audio_id = mensaje.get("audio", {}).get("id")
                    url_cloudinary = descargar_audio(audio_id, TOKEN)
                    if url_cloudinary:
                        guardar_mensaje(numero, url_cloudinary, tipo="recibido", es_audio=True)
                        enviar_mensaje(numero, "üéß Recibimos tu audio. Un asesor lo revisar√° pronto.")
                    else:
                        enviar_mensaje(numero, "‚ö†Ô∏è No se pudo procesar tu audio, int√©ntalo de nuevo.")
                return {"status": "ok"}

            # === üü¢ 1Ô∏è‚É£ PRIORIDAD: MENSAJES INTERACTIVOS (botones) ===
            if tipo == "interactive":
                print("üîò [DEBUG] Se recibi√≥ un mensaje interactivo:", json.dumps(mensaje, indent=2))

                interactive = mensaje.get("interactive", {})
                if interactive.get("type") == "button_reply":
                    button_data = interactive.get("button_reply", {})
                    button_id = button_data.get("id")
                    button_title = button_data.get("title")

                    print(f"üß© [DEBUG] Bot√≥n presionado -> id='{button_id}', t√≠tulo='{button_title}'")
                    print(f"üìç [DEBUG] Paso actual del usuario: {paso}")

                    # ‚úÖ Inicio de encuesta
                    if paso == "esperando_inicio_encuesta" and button_id == "iniciar_encuesta":
                        print("üöÄ [DEBUG] Bot√≥n 'iniciar_encuesta' detectado. Iniciando encuesta...")
                        actualizar_flujo(numero, 1)
                        enviar_pregunta(numero, 1)
                        return {"status": "ok"}

                    # Aqu√≠ se pueden agregar m√°s botones en el futuro
                    enviar_mensaje(numero, "Este bot√≥n no es v√°lido en este momento.")
                    return {"status": "ok"}

            print(f"üìç [DEBUG] n√∫mero={numero}, paso={paso}, texto='{texto_lower}'")

            # === 1Ô∏è‚É£ NUEVO USUARIO: FLUJO DE ONBOARDING Y ENCUESTA ===
            if tipo == "text" and not usuario_bd:
                # Si el paso guardado no tiene sentido, reiniciamos el flujo
                if paso not in [None, "esperando_usuario_tiktok", "confirmando_nombre", "esperando_inicio_encuesta"]:
                    print(f"‚ö†Ô∏è Reiniciando flujo para {numero}, paso anterior: {paso}")
                    eliminar_flujo(numero)  # limpia memoria o cach√©
                    paso = None

                # === Inicio del flujo ===
                if paso is None:
                    enviar_mensaje(numero, Mensaje_bienvenida)
                    actualizar_flujo(numero, "esperando_usuario_tiktok")
                    return {"status": "ok"}

                # Se espera usuario de TikTok
                if paso == "esperando_usuario_tiktok":
                    usuario_tiktok = texto.strip()
                    aspirante = buscar_aspirante_por_usuario_tiktok(usuario_tiktok)
                    if aspirante:
                        nombre = aspirante.get("nickname") or aspirante.get("nombre_real") or "(sin nombre)"
                        enviar_mensaje(numero, mensaje_confirmar_nombre(nombre))
                        actualizar_flujo(numero, "confirmando_nombre")
                        usuarios_temp[numero] = aspirante
                    else:
                        enviar_mensaje(numero, "‚ùå No encontramos ese usuario de TikTok. ¬øPodr√≠as verificarlo?")
                    return {"status": "ok"}

                # Confirmar nickname y actualizar tel√©fono
                if paso == "confirmando_nombre":
                    if texto_lower in ["si", "s√≠", "s"]:
                        aspirante = usuarios_temp.get(numero)
                        if aspirante:
                            actualizar_telefono_aspirante(aspirante["id"], numero)
                        enviar_botones(
                            numero,
                            texto=mensaje_proteccion_datos(),
                            botones=[{"id": "iniciar_encuesta", "title": "‚úÖ S√≠, quiero iniciar"}]
                        )
                        actualizar_flujo(numero, "esperando_inicio_encuesta")
                    elif texto_lower in ["no", "n"]:
                        enviar_mensaje(numero, "‚ùå Por favor verifica tu nombre o usuario de TikTok.")
                    else:
                        enviar_mensaje(numero, "‚ö†Ô∏è Por favor responde solo *s√≠* o *no* para continuar.")
                    return {"status": "ok"}

                # Si el usuario est√° esperando iniciar la encuesta pero escribe texto
                if paso == "esperando_inicio_encuesta":
                    if texto_lower in ["s√≠", "si", "ok", "dale", "listo", "empezar", "continuar"]:
                        print("üöÄ [DEBUG] Usuario escribi√≥ 's√≠' o equivalente, iniciando encuesta manualmente.")
                        actualizar_flujo(numero, 1)
                        enviar_pregunta(numero, 1)
                        return {"status": "ok"}

                    if texto_lower in ["hola", "buenas", "hey", "saludos", "brillar"]:
                        print("üí¨ [DEBUG] Usuario salud√≥, repitiendo bienvenida.")
                        enviar_mensaje(
                            numero,
                            "üëã ¬°Hola! A√∫n no has iniciado la encuesta. "
                            "Por favor presiona el bot√≥n *‚úÖ S√≠, quiero iniciar* o escribe *s√≠* para comenzar üöÄ"
                        )
                        return {"status": "ok"}

                    enviar_mensaje(numero, "üí¨ Escribe *s√≠* o presiona el bot√≥n para comenzar la encuesta üìã")
                    return {"status": "ok"}

                # Flujo de encuesta
                if isinstance(paso, int):
                    manejar_encuesta(numero, texto, texto_lower, paso, "aspirante")
                    return {"status": "ok"}

            # === 2Ô∏è‚É£ ASPIRANTE EN BASE DE DATOS ===
            if usuario_bd and rol == "aspirante":
                finalizada = encuesta_finalizada(numero)
                # Si encuesta finalizada, SIEMPRE muestra el men√∫ para cualquier mensaje
                if finalizada:
                    manejar_menu(numero, texto_lower, rol)
                    return {"status": "ok"}

                # Si no ha terminado la encuesta
                if not finalizada:
                    if texto_lower in {"brillar", "menu", "men√∫", "inicio"}:
                        enviar_mensaje(numero, "üö© No has finalizado tu encuesta. Por favor contin√∫a para completar la informaci√≥n.")
                        ultimo_paso = 1
                        actualizar_flujo(numero, ultimo_paso)
                        enviar_pregunta(numero, ultimo_paso)
                        return {"status": "ok"}

                    # Flujo normal de encuesta
                    if isinstance(paso, int):
                        manejar_encuesta(numero, texto, texto_lower, paso, rol)
                        return {"status": "ok"}

                    manejar_respuesta(numero, texto)
                    return {"status": "ok"}

            # === 3Ô∏è‚É£ ADMIN O CREADOR EN BD ===
            if usuario_bd and rol in ("admin", "creador", "creadores"):
                manejar_menu(numero, texto_lower, rol)
                return {"status": "ok"}

            print(f"üü£ DEBUG CHAT LIBRE - paso actual: {paso}")

    except Exception as e:
        print("‚ùå Error procesando webhook:", e)
        import traceback
        traceback.print_exc()

    return {"status": "ok"}



# @router.post("/webhook")
# async def whatsapp_webhook(request: Request):
#     data = await request.json()
#     print("üì© Webhook recibido:", json.dumps(data, indent=2))
#
#     try:
#         cambios = data.get("entry", [])[0].get("changes", [])[0].get("value", {})
#         mensajes = cambios.get("messages", [])
#         if not mensajes:
#             return {"status": "ok"}
#
#         for mensaje in mensajes:
#             numero = mensaje.get("from")
#             tipo = mensaje.get("type")
#             paso = obtener_flujo(numero)
#             usuario_bd = buscar_usuario_por_telefono(numero)
#             rol = obtener_rol_usuario(numero) if usuario_bd else None
#
#             # === Obt√©n el texto antes de cualquier uso ===
#             texto = mensaje.get("text", {}).get("body", "").strip()
#             texto_lower = texto.lower()
#
#             # === 4Ô∏è‚É£ CHAT LIBRE ===  (Esto va primero)
#             if paso == "chat_libre":
#                 if tipo == "text":
#                     guardar_mensaje(numero, texto, tipo="recibido", es_audio=False)
#                 elif tipo == "audio":
#                     audio_id = mensaje.get("audio", {}).get("id")
#                     url_cloudinary = descargar_audio(audio_id, TOKEN)
#                     if url_cloudinary:
#                         guardar_mensaje(numero, url_cloudinary, tipo="recibido", es_audio=True)
#                         enviar_mensaje(numero, "üéß Recibimos tu audio. Un asesor lo revisar√° pronto.")
#                     else:
#                         enviar_mensaje(numero, "‚ö†Ô∏è No se pudo procesar tu audio, int√©ntalo de nuevo.")
#                 return {"status": "ok"}
#
#             # === üü¢ 1Ô∏è‚É£ PRIORIDAD: MENSAJES INTERACTIVOS (botones) ===
#             if tipo == "interactive":
#                 print("üîò [DEBUG] Se recibi√≥ un mensaje interactivo:", json.dumps(mensaje, indent=2))
#
#                 interactive = mensaje.get("interactive", {})
#                 if interactive.get("type") == "button_reply":
#                     button_data = interactive.get("button_reply", {})
#                     button_id = button_data.get("id")
#                     button_title = button_data.get("title")
#
#                     print(f"üß© [DEBUG] Bot√≥n presionado -> id='{button_id}', t√≠tulo='{button_title}'")
#                     print(f"üìç [DEBUG] Paso actual del usuario: {paso}")
#
#                     # ‚úÖ Inicio de encuesta
#                     if paso == "esperando_inicio_encuesta" and button_id == "iniciar_encuesta":
#                         print("üöÄ [DEBUG] Bot√≥n 'iniciar_encuesta' detectado. Iniciando encuesta...")
#                         actualizar_flujo(numero, 1)
#                         enviar_pregunta(numero, 1)
#                         return {"status": "ok"}
#
#                     # Aqu√≠ se pueden agregar m√°s botones en el futuro
#                     enviar_mensaje(numero, "Este bot√≥n no es v√°lido en este momento.")
#                     return {"status": "ok"}
#
#             print(f"üìç [DEBUG] n√∫mero={numero}, paso={paso}, texto='{texto_lower}'")
#
#             # === 1Ô∏è‚É£ NUEVO USUARIO: FLUJO DE ONBOARDING Y ENCUESTA ===
#             if tipo == "text" and not usuario_bd:
#                 # Si el paso guardado no tiene sentido, reiniciamos el flujo
#                 if paso not in [None, "esperando_usuario_tiktok", "confirmando_nombre", "esperando_inicio_encuesta"]:
#                     print(f"‚ö†Ô∏è Reiniciando flujo para {numero}, paso anterior: {paso}")
#                     eliminar_flujo(numero)  # limpia memoria o cach√©
#                     paso = None
#
#                 # === Inicio del flujo ===
#                 if paso is None:
#                     enviar_mensaje(numero, Mensaje_bienvenida)
#                     actualizar_flujo(numero, "esperando_usuario_tiktok")
#                     return {"status": "ok"}
#
#                 # Se espera usuario de TikTok
#                 if paso == "esperando_usuario_tiktok":
#                     usuario_tiktok = texto.strip()
#                     aspirante = buscar_aspirante_por_usuario_tiktok(usuario_tiktok)
#                     if aspirante:
#                         nombre = aspirante.get("nickname") or aspirante.get("nombre_real") or "(sin nombre)"
#                         enviar_mensaje(numero, mensaje_confirmar_nombre(nombre))
#                         actualizar_flujo(numero, "confirmando_nombre")
#                         usuarios_temp[numero] = aspirante
#                     else:
#                         enviar_mensaje(numero, "‚ùå No encontramos ese usuario de TikTok. ¬øPodr√≠as verificarlo?")
#                     return {"status": "ok"}
#
#                 # Confirmar nickname y actualizar tel√©fono
#                 if paso == "confirmando_nombre":
#                     if texto_lower in ["si", "s√≠", "s"]:
#                         aspirante = usuarios_temp.get(numero)
#                         if aspirante:
#                             actualizar_telefono_aspirante(aspirante["id"], numero)
#                         enviar_botones(
#                             numero,
#                             texto=mensaje_proteccion_datos(),
#                             botones=[{"id": "iniciar_encuesta", "title": "‚úÖ S√≠, quiero iniciar"}]
#                         )
#                         actualizar_flujo(numero, "esperando_inicio_encuesta")
#                     elif texto_lower in ["no", "n"]:
#                         enviar_mensaje(numero, "‚ùå Por favor verifica tu nombre o usuario de TikTok.")
#                     else:
#                         enviar_mensaje(numero, "‚ö†Ô∏è Por favor responde solo *s√≠* o *no* para continuar.")
#                     return {"status": "ok"}
#
#                 # Si el usuario est√° esperando iniciar la encuesta pero escribe texto
#                 if paso == "esperando_inicio_encuesta":
#                     if texto_lower in ["s√≠", "si", "ok", "dale", "listo", "empezar", "continuar"]:
#                         print("üöÄ [DEBUG] Usuario escribi√≥ 's√≠' o equivalente, iniciando encuesta manualmente.")
#                         actualizar_flujo(numero, 1)
#                         enviar_pregunta(numero, 1)
#                         return {"status": "ok"}
#
#                     if texto_lower in ["hola", "buenas", "hey", "saludos", "brillar"]:
#                         print("üí¨ [DEBUG] Usuario salud√≥, repitiendo bienvenida.")
#                         enviar_mensaje(
#                             numero,
#                             "üëã ¬°Hola! A√∫n no has iniciado la encuesta. "
#                             "Por favor presiona el bot√≥n *‚úÖ S√≠, quiero iniciar* o escribe *s√≠* para comenzar üöÄ"
#                         )
#                         return {"status": "ok"}
#
#                     enviar_mensaje(numero, "üí¨ Escribe *s√≠* o presiona el bot√≥n para comenzar la encuesta üìã")
#                     return {"status": "ok"}
#
#                 # Flujo de encuesta
#                 if isinstance(paso, int):
#                     manejar_encuesta(numero, texto, texto_lower, paso, "aspirante")
#                     return {"status": "ok"}
#
#             # === 2Ô∏è‚É£ ASPIRANTE EN BASE DE DATOS ===
#             if usuario_bd and rol == "aspirante":
#                 finalizada = encuesta_finalizada(numero)
#                 # Si encuesta finalizada y escribe comando de men√∫
#                 if finalizada and texto_lower in {"brillar", "menu", "men√∫", "inicio"}:
#                     nombre = usuario_bd.get("nombre", "").split(" ")[0] or ""
#                     enviar_menu_principal(numero, rol=rol, nombre=nombre)
#                     return {"status": "ok"}
#
#                 # Si no ha terminado la encuesta
#                 if not finalizada:
#                     if texto_lower in {"brillar", "menu", "men√∫", "inicio"}:
#                         enviar_mensaje(numero, "üö© No has finalizado tu encuesta. Por favor contin√∫a para completar la informaci√≥n.")
#                         ultimo_paso = 1
#                         actualizar_flujo(numero, ultimo_paso)
#                         enviar_pregunta(numero, ultimo_paso)
#                         return {"status": "ok"}
#
#                     # Flujo normal de encuesta
#                     if isinstance(paso, int):
#                         manejar_encuesta(numero, texto, texto_lower, paso, rol)
#                         return {"status": "ok"}
#
#                     manejar_respuesta(numero, texto)
#                     return {"status": "ok"}
#
#                 # Si encuesta finalizada y responde opci√≥n de men√∫
#                 if finalizada:
#                     manejar_menu(numero, texto_lower, rol)
#                     return {"status": "ok"}
#
#             # === 3Ô∏è‚É£ ADMIN O CREADOR EN BD ===
#             if usuario_bd and rol in ("admin", "creador", "creadores"):
#                 if texto_lower in {"brillar", "menu", "men√∫", "inicio"}:
#                     nombre = usuario_bd.get("nombre", "").split(" ")[0] or ""
#                     enviar_menu_principal(numero, rol=rol, nombre=nombre)
#                     return {"status": "ok"}
#
#                 manejar_menu(numero, texto_lower, rol)
#                 return {"status": "ok"}
#
#             print(f"üü£ DEBUG CHAT LIBRE - paso actual: {paso}")
#
#     except Exception as e:
#         print("‚ùå Error procesando webhook:", e)
#         import traceback
#         traceback.print_exc()
#
#     return {"status": "ok"}


# @router.post("/webhook")
# async def whatsapp_webhook(request: Request):
#     data = await request.json()
#     print("üì© Webhook recibido:", json.dumps(data, indent=2))
#
#     try:
#         cambios = data.get("entry", [])[0].get("changes", [])[0].get("value", {})
#         mensajes = cambios.get("messages", [])
#         if not mensajes:
#             return {"status": "ok"}
#
#         for mensaje in mensajes:
#             numero = mensaje.get("from")
#             tipo = mensaje.get("type")
#             paso = obtener_flujo(numero)
#             usuario_bd = buscar_usuario_por_telefono(numero)
#             rol = obtener_rol_usuario(numero) if usuario_bd else None
#
#             # === 4Ô∏è‚É£ CHAT LIBRE ===  (PON ESTO AQU√ç)
#             if paso == "chat_libre":
#                 if tipo == "text":
#                     guardar_mensaje(numero, texto, tipo="recibido", es_audio=False)
#                 elif tipo == "audio":
#                     audio_id = mensaje.get("audio", {}).get("id")
#                     url_cloudinary = descargar_audio(audio_id, TOKEN)
#                     if url_cloudinary:
#                         guardar_mensaje(numero, url_cloudinary, tipo="recibido", es_audio=True)
#                         enviar_mensaje(numero, "üéß Recibimos tu audio. Un asesor lo revisar√° pronto.")
#                     else:
#                         enviar_mensaje(numero, "‚ö†Ô∏è No se pudo procesar tu audio, int√©ntalo de nuevo.")
#                 return {"status": "ok"}
#
#             # === üü¢ 1Ô∏è‚É£ PRIORIDAD: MENSAJES INTERACTIVOS (botones) ===
#             if tipo == "interactive":
#                 print("üîò [DEBUG] Se recibi√≥ un mensaje interactivo:", json.dumps(mensaje, indent=2))
#
#                 interactive = mensaje.get("interactive", {})
#                 if interactive.get("type") == "button_reply":
#                     button_data = interactive.get("button_reply", {})
#                     button_id = button_data.get("id")
#                     button_title = button_data.get("title")
#
#                     print(f"üß© [DEBUG] Bot√≥n presionado -> id='{button_id}', t√≠tulo='{button_title}'")
#                     print(f"üìç [DEBUG] Paso actual del usuario: {paso}")
#
#                     # ‚úÖ Inicio de encuesta
#                     if paso == "esperando_inicio_encuesta" and button_id == "iniciar_encuesta":
#                         print("üöÄ [DEBUG] Bot√≥n 'iniciar_encuesta' detectado. Iniciando encuesta...")
#                         actualizar_flujo(numero, 1)
#                         enviar_pregunta(numero, 1)
#                         return {"status": "ok"}
#
#                     # Aqu√≠ se pueden agregar m√°s botones en el futuro
#                     enviar_mensaje(numero, "Este bot√≥n no es v√°lido en este momento.")
#                     return {"status": "ok"}
#
#             # === üü° 2Ô∏è‚É£ MENSAJES DE TEXTO (solo si no es interactivo) ===
#             texto = mensaje.get("text", {}).get("body", "").strip()
#             texto_lower = texto.lower()
#             print(f"üìç [DEBUG] n√∫mero={numero}, paso={paso}, texto='{texto_lower}'")
#
#             # === 1Ô∏è‚É£ NUEVO USUARIO: FLUJO DE ONBOARDING Y ENCUESTA ===
#             if tipo == "text" and not usuario_bd:
#                 # Si el paso guardado no tiene sentido, reiniciamos el flujo
#                 if paso not in [None, "esperando_usuario_tiktok", "confirmando_nombre", "esperando_inicio_encuesta"]:
#                     print(f"‚ö†Ô∏è Reiniciando flujo para {numero}, paso anterior: {paso}")
#                     eliminar_flujo(numero)  # limpia memoria o cach√©
#                     paso = None
#
#                 # === Inicio del flujo ===
#                 if paso is None:
#                     enviar_mensaje(numero, Mensaje_bienvenida)
#                     actualizar_flujo(numero, "esperando_usuario_tiktok")
#                     return {"status": "ok"}
#
#                 # Se espera usuario de TikTok
#                 if paso == "esperando_usuario_tiktok":
#                     usuario_tiktok = texto.strip()
#                     aspirante = buscar_aspirante_por_usuario_tiktok(usuario_tiktok)
#                     if aspirante:
#                         nombre = aspirante.get("nickname") or aspirante.get("nombre_real") or "(sin nombre)"
#                         enviar_mensaje(numero, mensaje_confirmar_nombre(nombre))
#                         actualizar_flujo(numero, "confirmando_nombre")
#                         usuarios_temp[numero] = aspirante
#                     else:
#                         enviar_mensaje(numero, "‚ùå No encontramos ese usuario de TikTok. ¬øPodr√≠as verificarlo?")
#                     return {"status": "ok"}
#
#                 # Confirmar nickname y actualizar tel√©fono
#                 if paso == "confirmando_nombre":
#                     if texto_lower in ["si", "s√≠", "s"]:
#                         aspirante = usuarios_temp.get(numero)
#                         if aspirante:
#                             actualizar_telefono_aspirante(aspirante["id"], numero)
#                         enviar_botones(
#                             numero,
#                             texto=mensaje_proteccion_datos(),
#                             botones=[{"id": "iniciar_encuesta", "title": "‚úÖ S√≠, quiero iniciar"}]
#                         )
#                         actualizar_flujo(numero, "esperando_inicio_encuesta")
#                     elif texto_lower in ["no", "n"]:
#                         enviar_mensaje(numero, "‚ùå Por favor verifica tu nombre o usuario de TikTok.")
#                     else:
#                         enviar_mensaje(numero, "‚ö†Ô∏è Por favor responde solo *s√≠* o *no* para continuar.")
#                     return {"status": "ok"}
#
#                 # Si el usuario est√° esperando iniciar la encuesta pero escribe texto
#                 if paso == "esperando_inicio_encuesta":
#                     if texto_lower in ["s√≠", "si", "ok", "dale", "listo", "empezar", "continuar"]:
#                         print("üöÄ [DEBUG] Usuario escribi√≥ 's√≠' o equivalente, iniciando encuesta manualmente.")
#                         actualizar_flujo(numero, 1)
#                         enviar_pregunta(numero, 1)
#                         return {"status": "ok"}
#
#                     if texto_lower in ["hola", "buenas", "hey", "saludos", "brillar"]:
#                         print("üí¨ [DEBUG] Usuario salud√≥, repitiendo bienvenida.")
#                         enviar_mensaje(
#                             numero,
#                             "üëã ¬°Hola! A√∫n no has iniciado la encuesta. "
#                             "Por favor presiona el bot√≥n *‚úÖ S√≠, quiero iniciar* o escribe *s√≠* para comenzar üöÄ"
#                         )
#                         return {"status": "ok"}
#
#                     enviar_mensaje(numero, "üí¨ Escribe *s√≠* o presiona el bot√≥n para comenzar la encuesta üìã")
#                     return {"status": "ok"}
#
#                 # Flujo de encuesta
#                 if isinstance(paso, int):
#                     manejar_encuesta(numero, texto, texto_lower, paso, "aspirante")
#                     return {"status": "ok"}
#
#             # === 2Ô∏è‚É£ ASPIRANTE EN BASE DE DATOS ===
#             if usuario_bd and rol == "aspirante":
#                 finalizada = encuesta_finalizada(numero)
#                 # Si encuesta finalizada y escribe comando de men√∫
#                 if finalizada and texto_lower in {"brillar", "menu", "men√∫", "inicio"}:
#                     nombre = usuario_bd.get("nombre", "").split(" ")[0] or ""
#                     enviar_menu_principal(numero, rol=rol, nombre=nombre)
#                     return {"status": "ok"}
#
#                 # Si no ha terminado la encuesta
#                 if not finalizada:
#                     if texto_lower in {"brillar", "menu", "men√∫", "inicio"}:
#                         enviar_mensaje(numero, "üö© No has finalizado tu encuesta. Por favor contin√∫a para completar la informaci√≥n.")
#                         ultimo_paso = 1
#                         actualizar_flujo(numero, ultimo_paso)
#                         enviar_pregunta(numero, ultimo_paso)
#                         return {"status": "ok"}
#
#                     # Flujo normal de encuesta
#                     if isinstance(paso, int):
#                         manejar_encuesta(numero, texto, texto_lower, paso, rol)
#                         return {"status": "ok"}
#
#                     manejar_respuesta(numero, texto)
#                     return {"status": "ok"}
#
#                 # Si encuesta finalizada y responde opci√≥n de men√∫
#                 if finalizada:
#                     manejar_menu(numero, texto_lower, rol)
#                     return {"status": "ok"}
#
#             # === 3Ô∏è‚É£ ADMIN O CREADOR EN BD ===
#             if usuario_bd and rol in ("admin", "creador", "creadores"):
#                 if texto_lower in {"brillar", "menu", "men√∫", "inicio"}:
#                     nombre = usuario_bd.get("nombre", "").split(" ")[0] or ""
#                     enviar_menu_principal(numero, rol=rol, nombre=nombre)
#                     return {"status": "ok"}
#
#                 manejar_menu(numero, texto_lower, rol)
#                 return {"status": "ok"}
#
#             print(f"üü£ DEBUG CHAT LIBRE - paso actual: {paso}")
#
#             # # === 4Ô∏è‚É£ CHAT LIBRE ===
#             # if paso == "chat_libre":
#             #     if tipo == "text":
#             #         guardar_mensaje(numero, texto, tipo="recibido", es_audio=False)
#             #     elif tipo == "audio":
#             #         audio_id = mensaje.get("audio", {}).get("id")
#             #         url_cloudinary = descargar_audio(audio_id, TOKEN)
#             #         if url_cloudinary:
#             #             guardar_mensaje(numero, url_cloudinary, tipo="recibido", es_audio=True)
#             #             enviar_mensaje(numero, "üéß Recibimos tu audio. Un asesor lo revisar√° pronto.")
#             #         else:
#             #             enviar_mensaje(numero, "‚ö†Ô∏è No se pudo procesar tu audio, int√©ntalo de nuevo.")
#             #     return {"status": "ok"}
#
#     except Exception as e:
#         print("‚ùå Error procesando webhook:", e)
#         import traceback
#         traceback.print_exc()
#
#     return {"status": "ok"}


from pydantic import BaseModel

class RespuestaInput(BaseModel):
    numero: str
    paso: int
    respuesta: str

class ConsolidarInput(BaseModel):
    numero: str

@router.post("/respuesta")
def guardar_respuesta_web(data: RespuestaInput):
    try:
        guardar_respuesta(data.numero, data.paso, data.respuesta)
        return {"ok": True, "msg": "Respuesta guardada"}
    except Exception as e:
        return {"ok": False, "error": str(e)}

@router.post("/consolidar")
def consolidar_perfil_web(data: ConsolidarInput):
    try:
        consolidar_perfil(data.numero)
        return {"ok": True, "msg": "Perfil consolidado"}
    except Exception as e:
        return {"ok": False, "error": str(e)}




# @router.post("/webhook")
# async def whatsapp_webhook(request: Request):
#     data = await request.json()
#     print("üì© Webhook recibido:", json.dumps(data, indent=2))
#
#     try:
#         cambios = data.get("entry", [])[0].get("changes", [])[0].get("value", {})
#         mensajes = cambios.get("messages", [])
#         if not mensajes:
#             return {"status": "ok"}
#
#         for mensaje in mensajes:
#             numero = mensaje.get("from")
#             tipo = mensaje.get("type")
#             texto = mensaje.get("text", {}).get("body", "").strip()
#             texto_lower = texto.lower()
#
#             # --- Variables auxiliares ---
#             paso = obtener_flujo(numero)
#             usuario_bd = buscar_usuario_por_telefono(numero)
#             rol = obtener_rol_usuario(numero)
#
#             print(f"üìç [DEBUG] n√∫mero={numero}, paso={paso}, texto='{texto_lower}'")
#
#             # === 1Ô∏è‚É£ COMANDOS UNIVERSALES: SALUDOS / MEN√ö / BRILLAR ===
#             if tipo == "text":
#                 palabras_clave = ["hola","buenas","brilla", "menu"]
#                 if any(palabra in texto_lower for palabra in palabras_clave):
#                     usuarios_flujo.pop(numero, None)  # reinicia cualquier flujo activo
#
#                     if usuario_bd:
#                         nombre = usuario_bd.get("nombre", "").split(" ")[0] or ""
#                         rol = usuario_bd.get("rol", "aspirante")
#                         enviar_mensaje(numero, f"üëã ¬°Hola {nombre}! üí´ Te damos este men√∫ de opciones.")
#                         enviar_menu_principal(numero, rol=rol, nombre=nombre)
#                     else:
#                         enviar_mensaje(numero, Mensaje_bienvenida)
#                         actualizar_flujo(numero, "esperando_usuario_tiktok")
#
#                     print(f"üîÅ [DEBUG] Reinicio de flujo con mensaje que contiene palabra clave ({numero})")
#                     return {"status": "ok"}
#
#             # === 2Ô∏è‚É£ NUEVO USUARIO SIN REGISTRO ===
#             if not usuario_bd and paso is None:
#                 enviar_mensaje(numero, Mensaje_bienvenida)
#                 actualizar_flujo(numero, "esperando_usuario_tiktok")
#                 print(f"üü¢ [DEBUG] Flujo inicial -> esperando_usuario_tiktok ({numero})")
#                 return {"status": "ok"}
#
#             # === 3Ô∏è‚É£ FLUJO DE VERIFICACI√ìN USUARIO TIKTOK ===
#             if paso == "esperando_usuario_tiktok" and tipo == "text":
#                 usuario_tiktok = texto.strip()
#                 aspirante = buscar_aspirante_por_usuario_tiktok(usuario_tiktok)
#
#                 # ----- Depuraci√≥n -----
#                 print(f"üîç Usuario TikTok recibido: {usuario_tiktok}")
#                 print(f"üîç Aspirante encontrado: {aspirante}")
#                 print(f"üîç usuarios_temp: {usuarios_temp}")
#                 print(f"üîç paso actual: {paso}")
#
#                 if aspirante:
#                     nombre = aspirante.get("nickname") or aspirante.get("nombre_real") or "(sin nombre)"
#                     enviar_mensaje(numero, mensaje_confirmar_nombre(nombre))
#                     actualizar_flujo(numero, "confirmando_nombre")
#                     usuarios_temp[numero] = aspirante
#                 else:
#                     enviar_mensaje(numero, "‚ùå No encontramos ese usuario de TikTok. ¬øPodr√≠as verificarlo?")
#                 return {"status": "ok"}
#
#             # === 4Ô∏è‚É£ CONFIRMAR NOMBRE ===
#             if paso == "confirmando_nombre" and tipo == "text":
#                 texto_normalizado = texto.lower().strip()
#
#                 # ‚úÖ Solo aceptamos 's√≠' o 'no'
#                 if texto_normalizado in ["si", "s√≠", "s"]:
#                     aspirante = usuarios_temp.get(numero)
#                     if aspirante:
#                         actualizar_telefono_aspirante(aspirante["id"], numero)
#
#                     enviar_botones(
#                         numero,
#                         texto=mensaje_proteccion_datos(),
#                         botones=[{"id": "iniciar_encuesta", "title": "‚úÖ S√≠, quiero iniciar"}],
#                     )
#                     actualizar_flujo(numero, "esperando_inicio_encuesta")
#                 elif texto_normalizado in ["no", "n"]:
#                     # Usuario confirma que el nombre NO es correcto
#                     enviar_mensaje(numero, "‚ùå Por favor verifica tu nombre o usuario de TikTok.")
#                     # Mantener el flujo en 'confirmando_nombre' para reintentar
#                 else:
#                     # Cualquier otra respuesta
#                     enviar_mensaje(numero, "‚ö†Ô∏è Por favor responde solo *s√≠* o *no* para continuar.")
#                     # Mantener el flujo en 'confirmando_nombre' hasta recibir respuesta v√°lida
#                 return {"status": "ok"}
#
#             # === 5Ô∏è‚É£ ESPERANDO INICIO ENCUESTA ===
#             if paso == "esperando_inicio_encuesta":
#                 interactive = mensaje.get("interactive", {})
#                 if interactive.get("type") == "button_reply":
#                     button_id = interactive.get("button_reply", {}).get("id")
#                     if button_id == "iniciar_encuesta":
#                         actualizar_flujo(numero, 1)
#                         enviar_pregunta(numero, 1)
#                         print(f"üü¢ [DEBUG] Encuesta iniciada -> paso=1 ({numero})")
#                         return {"status": "ok"}
#
#                 enviar_mensaje(numero, "Por favor usa el bot√≥n para iniciar la encuesta.")
#                 return {"status": "ok"}
#
#             # === 6Ô∏è‚É£ ASIGNAR ROL SI FALTA ===
#             if usuario_bd and numero not in usuarios_roles:
#                 usuarios_roles[numero] = (usuario_bd["rol"], time.time())
#
#             # === 7Ô∏è‚É£ CHAT LIBRE ===
#             if paso == "chat_libre":
#                 if tipo == "text":
#                     guardar_mensaje(numero, texto, tipo="recibido", es_audio=False)
#                     print(f"üí¨ Chat libre de {numero}: {texto}")
#                 elif tipo == "audio":
#                     audio_id = mensaje.get("audio", {}).get("id")
#                     url_cloudinary = descargar_audio(audio_id, TOKEN)
#                     if url_cloudinary:
#                         guardar_mensaje(numero, url_cloudinary, tipo="recibido", es_audio=True)
#                         enviar_mensaje(numero, "üéß Recibimos tu audio. Un asesor lo revisar√° pronto.")
#                     else:
#                         enviar_mensaje(numero, "‚ö†Ô∏è No se pudo procesar tu audio, int√©ntalo de nuevo.")
#                 return {"status": "ok"}
#
#             # === 8Ô∏è‚É£ REINICIO DESDE PLANTILLA ENVIADA PARA QUE ASPIRANTE CONTESTE UNA ENCUESTA CON BOT√ìN ‚ÄúS√≠, continuar‚Äù ===
#             if paso is None and tipo == "interactive":
#                 interactive = mensaje.get("interactive", {})
#                 boton_texto = interactive.get("button_reply", {}).get("title", "").lower()
#                 if boton_texto == "s√≠, continuar":
#                     actualizar_flujo(numero, 1)
#                     enviar_pregunta(numero, 1)
#                     print(f"üü¢ [DEBUG] Flujo reiniciado -> paso=1 ({numero})")
#                     return {"status": "ok"}
#
#             # === 9Ô∏è‚É£ ACTIVAR CHAT LIBRE SEG√öN ROL ===
#             if paso is None and tipo == "text":
#                 rol_usuario = usuarios_roles.get(numero, ("",))[0]
#                 if (texto_lower in ["4", "chat libre"] and rol_usuario == "aspirante") or \
#                    (texto_lower in ["7", "chat libre"] and rol_usuario == "creador") or \
#                    (texto_lower in ["5", "chat libre"] and rol_usuario == "admin"):
#                     actualizar_flujo(numero, "chat_libre")
#                     enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     return {"status": "ok"}
#
#             # === üîü MANEJAR RESPUESTA NORMAL (ENCUESTA) ===
#             manejar_respuesta(numero, texto)
#
#     except Exception as e:
#         print("‚ùå Error procesando webhook:", e)
#         traceback.print_exc()
#
#     return {"status": "ok"}


# @router.post("/webhook")
# async def whatsapp_webhook(request: Request):
#     data = await request.json()
#     print("üì© Webhook recibido:", json.dumps(data, indent=2))
#
#     try:
#         cambios = data.get("entry", [])[0].get("changes", [])[0].get("value", {})
#         mensajes = cambios.get("messages", [])
#         if not mensajes:
#             return {"status": "ok"}
#
#         for mensaje in mensajes:
#             numero = mensaje.get("from")
#             tipo = mensaje.get("type")
#             texto = mensaje.get("text", {}).get("body", "").strip()
#             texto_lower = texto.lower()
#
#             # --- Variables auxiliares ---
#             paso = obtener_flujo(numero)
#             usuario_bd = buscar_usuario_por_telefono(numero)
#             rol = obtener_rol_usuario(numero)
#
#             print(f"üìç [DEBUG] n√∫mero={numero}, paso={paso}, texto='{texto_lower}'")
#
#             # === 1Ô∏è‚É£ MENSAJES DE CONTROL UNIVERSALES ===
#             if tipo == "text":
#                 # --- üëã SALUDOS INICIALES ---
#                 if texto_lower in ["hola", "buenas", "saludos", "brillar"]:
#                     if usuario_bd:
#                         nombre = usuario_bd.get("nombre", "").split(" ")[0] or ""
#                         rol = usuario_bd.get("rol", "aspirante")
#                         enviar_menu_principal(numero, rol=rol, nombre=nombre)
#                     else:
#                         enviar_mensaje(numero, Mensaje_bienvenida)
#                         actualizar_flujo(numero, "esperando_usuario_tiktok")
#                     return {"status": "ok"}
#
#                 # --- üîÑ Reinicio manual del flujo (men√∫ principal) con saludo personalizado ---
#                 if texto_lower in ["menu", "men√∫", "brillar"]:
#                     usuarios_flujo.pop(numero, None)
#                     if usuario_bd:
#                         nombre = usuario_bd.get("nombre", "").split(" ")[0] or ""
#                         rol = usuario_bd.get("rol", "aspirante")
#                         enviar_mensaje(numero, f"üëã ¬°Hola {nombre}! Te damos nuevamente este men√∫ de opciones:")
#                         enviar_menu_principal(numero, rol=rol, nombre=nombre)
#                     else:
#                         enviar_mensaje(numero, "‚ú® Has vuelto al men√∫ principal.")
#                         enviar_menu_principal(numero, rol)
#                     return {"status": "ok"}
#
#             # === 2Ô∏è‚É£ NUEVO USUARIO ===
#             if not usuario_bd and paso is None:
#                 enviar_mensaje(numero, Mensaje_bienvenida)
#                 actualizar_flujo(numero, "esperando_usuario_tiktok")
#                 print(f"üü¢ [DEBUG] Flujo inicial -> esperando_usuario_tiktok ({numero})")
#                 return {"status": "ok"}
#
#             # === 3Ô∏è‚É£ FLUJO DE VERIFICACI√ìN USUARIO TIKTOK ===
#             if paso == "esperando_usuario_tiktok" and tipo == "text":
#                 usuario_tiktok = texto.strip()
#                 aspirante = buscar_aspirante_por_usuario_tiktok(usuario_tiktok)
#
#                 if aspirante:
#                     nombre = aspirante.get("nickname") or aspirante.get("nombre_real") or "(sin nombre)"
#                     enviar_mensaje(numero, mensaje_confirmar_nombre(nombre))
#                     actualizar_flujo(numero, "confirmando_nombre")
#                     usuarios_temp[numero] = aspirante
#                 else:
#                     enviar_mensaje(numero, "‚ùå No encontramos ese usuario de TikTok. ¬øPodr√≠as verificarlo?")
#                 return {"status": "ok"}
#
#             # === 4Ô∏è‚É£ CONFIRMAR NOMBRE ===
#             if paso == "confirmando_nombre" and tipo == "text":
#                 if texto_lower in ["si", "s√≠", "correcto", "yes", "ok", "sip", "acuerdo"]:
#                     aspirante = usuarios_temp.get(numero)
#                     if aspirante:
#                         actualizar_telefono_aspirante(aspirante["id"], numero)
#
#                     enviar_botones(
#                         numero,
#                         texto=mensaje_proteccion_datos(),
#                         botones=[{"id": "iniciar_encuesta", "title": "‚úÖ S√≠, quiero iniciar"}],
#                     )
#                     actualizar_flujo(numero, "esperando_inicio_encuesta")
#                 else:
#                     enviar_mensaje(numero, "Por favor escribe el nombre correcto o verifica tu usuario de TikTok.")
#                 return {"status": "ok"}
#
#             # === 5Ô∏è‚É£ ESPERANDO INICIO ENCUESTA ===
#             if paso == "esperando_inicio_encuesta":
#                 interactive = mensaje.get("interactive", {})
#                 if interactive.get("type") == "button_reply":
#                     button_id = interactive.get("button_reply", {}).get("id")
#                     if button_id == "iniciar_encuesta":
#                         actualizar_flujo(numero, 1)
#                         enviar_pregunta(numero, 1)
#                         print(f"üü¢ [DEBUG] Encuesta iniciada -> paso=1 ({numero})")
#                         return {"status": "ok"}
#
#                 enviar_mensaje(numero, "Por favor usa el bot√≥n para iniciar la encuesta.")
#                 return {"status": "ok"}
#
#             # === 6Ô∏è‚É£ ASIGNAR ROL SI FALTA ===
#             if usuario_bd and numero not in usuarios_roles:
#                 usuarios_roles[numero] = (usuario_bd["rol"], time.time())
#
#             # === 7Ô∏è‚É£ CHAT LIBRE ===
#             if paso == "chat_libre":
#                 if tipo == "text":
#                     if texto_lower in ["menu", "men√∫", "brillar"]:
#                         usuarios_flujo.pop(numero, None)
#                         if usuario_bd:
#                             nombre = usuario_bd.get("nombre", "").split(" ")[0] or ""
#                             rol = usuario_bd.get("rol", "aspirante")
#                             enviar_mensaje(numero, f"üëã ¬°Hola {nombre}! Te damos nuevamente este men√∫ de opciones:")
#                             enviar_menu_principal(numero, rol=rol, nombre=nombre)
#                         else:
#                             enviar_mensaje(numero, "üîô Has vuelto al men√∫ principal.")
#                             enviar_menu_principal(numero, rol)
#                         return {"status": "ok"}
#
#                     guardar_mensaje(numero, texto, tipo="recibido", es_audio=False)
#                     print(f"üí¨ Chat libre de {numero}: {texto}")
#
#                 elif tipo == "audio":
#                     audio_id = mensaje.get("audio", {}).get("id")
#                     url_cloudinary = descargar_audio(audio_id, TOKEN)
#                     if url_cloudinary:
#                         guardar_mensaje(numero, url_cloudinary, tipo="recibido", es_audio=True)
#                         enviar_mensaje(numero, "üéß Recibimos tu audio. Un asesor lo revisar√° pronto.")
#                     else:
#                         enviar_mensaje(numero, "‚ö†Ô∏è No se pudo procesar tu audio, int√©ntalo de nuevo.")
#                 return {"status": "ok"}
#
#             # === 8Ô∏è‚É£ REINICIO DESDE BOT√ìN ‚ÄúS√≠, continuar‚Äù ===
#             if paso is None and tipo == "interactive":
#                 interactive = mensaje.get("interactive", {})
#                 boton_texto = interactive.get("button_reply", {}).get("title", "").lower()
#                 if boton_texto == "s√≠, continuar":
#                     actualizar_flujo(numero, 1)
#                     enviar_pregunta(numero, 1)
#                     print(f"üü¢ [DEBUG] Flujo reiniciado -> paso=1 ({numero})")
#                     return {"status": "ok"}
#
#             # === 9Ô∏è‚É£ ACTIVAR CHAT LIBRE SEG√öN ROL ===
#             if paso is None and tipo == "text":
#                 rol_usuario = usuarios_roles.get(numero, ("",))[0]
#                 if (texto_lower in ["4", "chat libre"] and rol_usuario == "aspirante") or \
#                    (texto_lower in ["7", "chat libre"] and rol_usuario == "creador") or \
#                    (texto_lower in ["5", "chat libre"] and rol_usuario == "admin"):
#                     actualizar_flujo(numero, "chat_libre")
#                     enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     return {"status": "ok"}
#
#             # === üîü MANEJAR RESPUESTA NORMAL (ENCUESTA) ===
#             manejar_respuesta(numero, texto)
#
#     except Exception as e:
#         print("‚ùå Error procesando webhook:", e)
#         traceback.print_exc()
#
#     return {"status": "ok"}


# @router.post("/webhook")
# async def whatsapp_webhook(request: Request):
#     data = await request.json()
#     print("üì© Webhook recibido:", json.dumps(data, indent=2))
#
#     try:
#         cambios = data.get("entry", [])[0].get("changes", [])[0].get("value", {})
#         mensajes = cambios.get("messages", [])
#         if not mensajes:
#             return {"status": "ok"}
#
#         for mensaje in mensajes:
#             numero = mensaje.get("from")
#             tipo = mensaje.get("type")
#             texto = mensaje.get("text", {}).get("body", "").strip()
#             texto_lower = texto.lower()
#
#             # --- Variables auxiliares ---
#             paso = obtener_flujo(numero)
#             usuario_bd = buscar_usuario_por_telefono(numero)
#             rol = obtener_rol_usuario(numero)
#
#             print(f"üìç [DEBUG] n√∫mero={numero}, paso={paso}, texto='{texto_lower}'")
#
#             # === 1Ô∏è‚É£ MENSAJES DE CONTROL UNIVERSALES ===
#             if tipo == "text":
#                 # --- üëã SALUDOS INICIALES ---
#                 if texto_lower in ["hola", "buenas", "saludos"]:
#                     if usuario_bd:
#                         nombre = usuario_bd.get("nombre", "").split(" ")[0] or ""
#                         rol = usuario_bd.get("rol", "aspirante")
#                         # üîπ Nueva versi√≥n del men√∫ con saludo personalizado
#                         enviar_menu_principal(numero, rol=rol, nombre=nombre)
#                     else:
#                         enviar_mensaje(numero, Mensaje_bienvenida)
#                         actualizar_flujo(numero, "esperando_usuario_tiktok")
#                     return {"status": "ok"}
#
#                 # --- üîÑ Reinicio manual del flujo (men√∫ principal)
#                 if texto_lower in ["menu", "men√∫", "brillar"]:
#                     usuarios_flujo.pop(numero, None)
#                     enviar_mensaje(numero, "‚ú® Has vuelto al men√∫ principal.")
#                     enviar_menu_principal(numero, rol)
#                     return {"status": "ok"}
#
#             # === 2Ô∏è‚É£ NUEVO USUARIO ===
#             if not usuario_bd and paso is None:
#                 enviar_mensaje(numero, Mensaje_bienvenida)
#                 actualizar_flujo(numero, "esperando_usuario_tiktok")
#                 print(f"üü¢ [DEBUG] Flujo inicial -> esperando_usuario_tiktok ({numero})")
#                 return {"status": "ok"}
#
#             # === 3Ô∏è‚É£ FLUJO DE VERIFICACI√ìN USUARIO TIKTOK ===
#             if paso == "esperando_usuario_tiktok" and tipo == "text":
#                 usuario_tiktok = texto.strip()
#                 aspirante = buscar_aspirante_por_usuario_tiktok(usuario_tiktok)
#
#                 if aspirante:
#                     nombre = aspirante.get("nickname") or aspirante.get("nombre_real") or "(sin nombre)"
#                     enviar_mensaje(numero, mensaje_confirmar_nombre(nombre))
#                     actualizar_flujo(numero, "confirmando_nombre")
#                     usuarios_temp[numero] = aspirante
#                 else:
#                     enviar_mensaje(numero, "‚ùå No encontramos ese usuario de TikTok. ¬øPodr√≠as verificarlo?")
#                 return {"status": "ok"}
#
#             # === 4Ô∏è‚É£ CONFIRMAR NOMBRE ===
#             if paso == "confirmando_nombre" and tipo == "text":
#                 if texto_lower in ["si", "s√≠", "correcto", "yes", "ok", "sip", "acuerdo"]:
#                     aspirante = usuarios_temp.get(numero)
#                     if aspirante:
#                         actualizar_telefono_aspirante(aspirante["id"], numero)
#
#                     enviar_botones(
#                         numero,
#                         texto=mensaje_proteccion_datos(),
#                         botones=[{"id": "iniciar_encuesta", "title": "‚úÖ S√≠, quiero iniciar"}],
#                     )
#                     actualizar_flujo(numero, "esperando_inicio_encuesta")
#                 else:
#                     enviar_mensaje(numero, "Por favor escribe el nombre correcto o verifica tu usuario de TikTok.")
#                 return {"status": "ok"}
#
#             # === 5Ô∏è‚É£ ESPERANDO INICIO ENCUESTA ===
#             if paso == "esperando_inicio_encuesta":
#                 interactive = mensaje.get("interactive", {})
#                 if interactive.get("type") == "button_reply":
#                     button_id = interactive.get("button_reply", {}).get("id")
#                     if button_id == "iniciar_encuesta":
#                         actualizar_flujo(numero, 1)
#                         enviar_pregunta(numero, 1)
#                         print(f"üü¢ [DEBUG] Encuesta iniciada -> paso=1 ({numero})")
#                         return {"status": "ok"}
#
#                 enviar_mensaje(numero, "Por favor usa el bot√≥n para iniciar la encuesta.")
#                 return {"status": "ok"}
#
#             # === 6Ô∏è‚É£ ASIGNAR ROL SI FALTA ===
#             if usuario_bd and numero not in usuarios_roles:
#                 usuarios_roles[numero] = (usuario_bd["rol"], time.time())
#
#             # === 7Ô∏è‚É£ CHAT LIBRE ===
#             if paso == "chat_libre":
#                 if tipo == "text":
#                     if texto_lower in ["menu", "men√∫", "brillar"]:
#                         usuarios_flujo.pop(numero, None)
#                         enviar_mensaje(numero, "üîô Has vuelto al men√∫ inicial.")
#                         enviar_menu_principal(numero, rol)
#                         return {"status": "ok"}
#
#                     guardar_mensaje(numero, texto, tipo="recibido", es_audio=False)
#                     print(f"üí¨ Chat libre de {numero}: {texto}")
#
#                 elif tipo == "audio":
#                     audio_id = mensaje.get("audio", {}).get("id")
#                     url_cloudinary = descargar_audio(audio_id, TOKEN)
#                     if url_cloudinary:
#                         guardar_mensaje(numero, url_cloudinary, tipo="recibido", es_audio=True)
#                         enviar_mensaje(numero, "üéß Recibimos tu audio. Un asesor lo revisar√° pronto.")
#                     else:
#                         enviar_mensaje(numero, "‚ö†Ô∏è No se pudo procesar tu audio, int√©ntalo de nuevo.")
#                 return {"status": "ok"}
#
#             # === 8Ô∏è‚É£ REINICIO DESDE BOT√ìN ‚ÄúS√≠, continuar‚Äù ===
#             if paso is None and tipo == "interactive":
#                 interactive = mensaje.get("interactive", {})
#                 boton_texto = interactive.get("button_reply", {}).get("title", "").lower()
#                 if boton_texto == "s√≠, continuar":
#                     actualizar_flujo(numero, 1)
#                     enviar_pregunta(numero, 1)
#                     print(f"üü¢ [DEBUG] Flujo reiniciado -> paso=1 ({numero})")
#                     return {"status": "ok"}
#
#             # === 9Ô∏è‚É£ ACTIVAR CHAT LIBRE SEG√öN ROL ===
#             if paso is None and tipo == "text":
#                 rol_usuario = usuarios_roles.get(numero, ("",))[0]
#                 if (texto_lower in ["4", "chat libre"] and rol_usuario == "aspirante") or \
#                    (texto_lower in ["7", "chat libre"] and rol_usuario == "creador") or \
#                    (texto_lower in ["5", "chat libre"] and rol_usuario == "admin"):
#                     actualizar_flujo(numero, "chat_libre")
#                     enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     return {"status": "ok"}
#
#             # === üîü MANEJAR RESPUESTA NORMAL (ENCUESTA) ===
#             manejar_respuesta(numero, texto)
#
#     except Exception as e:
#         print("‚ùå Error procesando webhook:", e)
#         traceback.print_exc()
#
#     return {"status": "ok"}





# @router.post("/webhook")
# async def whatsapp_webhook(request: Request):
#     data = await request.json()
#     print("üì© Webhook recibido:", json.dumps(data, indent=2))
#
#     try:
#         cambios = data.get("entry", [])[0].get("changes", [])[0].get("value", {})
#         mensajes = cambios.get("messages", [])
#         if not mensajes:
#             return {"status": "ok"}
#
#         for mensaje in mensajes:
#             numero = mensaje.get("from")
#             tipo = mensaje.get("type")
#             texto = mensaje.get("text", {}).get("body", "").strip()
#             texto_lower = texto.lower()
#
#             # --- Variables auxiliares ---
#             paso = obtener_flujo(numero)
#             usuario_bd = buscar_usuario_por_telefono(numero)
#             rol = obtener_rol_usuario(numero)
#
#             print(f"üìç [DEBUG] n√∫mero={numero}, paso={paso}, texto='{texto_lower}'")
#
#             # === 1Ô∏è‚É£ MENSAJES DE CONTROL UNIVERSALES ===
#             if tipo == "text":
#                 # --- üëã SALUDOS INICIALES ---
#                 if texto_lower in ["hola", "buenas", "saludos","brillar"]:
#                     if usuario_bd:
#                         nombre = usuario_bd.get("nombre", "").split(" ")[0] or ""
#                         rol = usuario_bd.get("rol", "aspirante")
#                         # üîπ Nueva versi√≥n del men√∫ con saludo personalizado
#                         enviar_menu_principal(numero, rol=rol, nombre=nombre)
#                     else:
#                         enviar_mensaje(numero, Mensaje_bienvenida)
#                         actualizar_flujo(numero, "esperando_usuario_tiktok")
#                     return {"status": "ok"}
#
#                 # --- üîÑ Reinicio manual del flujo (men√∫ principal)
#                 if texto_lower in ["menu", "men√∫", "brillar"]:
#                     usuarios_flujo.pop(numero, None)
#                     enviar_mensaje(numero, "‚ú® Has vuelto al men√∫ principal.")
#                     enviar_menu_principal(numero, rol)
#                     return {"status": "ok"}
#
#             # === 2Ô∏è‚É£ NUEVO USUARIO ===
#             if not usuario_bd and paso is None:
#                 enviar_mensaje(numero, Mensaje_bienvenida)
#                 actualizar_flujo(numero, "esperando_usuario_tiktok")
#                 print(f"üü¢ [DEBUG] Flujo inicial -> esperando_usuario_tiktok ({numero})")
#                 return {"status": "ok"}
#
#             # === 3Ô∏è‚É£ FLUJO DE VERIFICACI√ìN USUARIO TIKTOK ===
#             if paso == "esperando_usuario_tiktok" and tipo == "text":
#                 usuario_tiktok = texto.strip()
#                 aspirante = buscar_aspirante_por_usuario_tiktok(usuario_tiktok)
#
#                 if aspirante:
#                     nombre = aspirante.get("nickname") or aspirante.get("nombre_real") or "(sin nombre)"
#                     enviar_mensaje(numero, mensaje_confirmar_nombre(nombre))
#                     actualizar_flujo(numero, "confirmando_nombre")
#                     usuarios_temp[numero] = aspirante
#                 else:
#                     enviar_mensaje(numero, "‚ùå No encontramos ese usuario de TikTok. ¬øPodr√≠as verificarlo?")
#                 return {"status": "ok"}
#
#             # === 4Ô∏è‚É£ CONFIRMAR NOMBRE ===
#             if paso == "confirmando_nombre" and tipo == "text":
#                 if texto_lower in ["si", "s√≠", "correcto", "yes", "ok", "sip", "acuerdo"]:
#                     aspirante = usuarios_temp.get(numero)
#                     if aspirante:
#                         actualizar_telefono_aspirante(aspirante["id"], numero)
#
#                     enviar_botones(
#                         numero,
#                         texto=mensaje_proteccion_datos(),
#                         botones=[{"id": "iniciar_encuesta", "title": "‚úÖ S√≠, quiero iniciar"}],
#                     )
#                     actualizar_flujo(numero, "esperando_inicio_encuesta")
#                 else:
#                     enviar_mensaje(numero, "Por favor escribe el nombre correcto o verifica tu usuario de TikTok.")
#                 return {"status": "ok"}
#
#             # === 5Ô∏è‚É£ ESPERANDO INICIO ENCUESTA ===
#             if paso == "esperando_inicio_encuesta":
#                 interactive = mensaje.get("interactive", {})
#                 if interactive.get("type") == "button_reply":
#                     button_id = interactive.get("button_reply", {}).get("id")
#                     if button_id == "iniciar_encuesta":
#                         actualizar_flujo(numero, 1)
#                         enviar_pregunta(numero, 1)
#                         print(f"üü¢ [DEBUG] Encuesta iniciada -> paso=1 ({numero})")
#                         return {"status": "ok"}
#
#                 enviar_mensaje(numero, "Por favor usa el bot√≥n para iniciar la encuesta.")
#                 return {"status": "ok"}
#
#             # === 6Ô∏è‚É£ ASIGNAR ROL SI FALTA ===
#             if usuario_bd and numero not in usuarios_roles:
#                 usuarios_roles[numero] = (usuario_bd["rol"], time.time())
#
#             # === 7Ô∏è‚É£ CHAT LIBRE ===
#             if paso == "chat_libre":
#                 if tipo == "text":
#                     if texto_lower in ["menu", "men√∫", "brillar"]:
#                         usuarios_flujo.pop(numero, None)
#                         enviar_mensaje(numero, "üîô Has vuelto al men√∫ inicial.")
#                         enviar_menu_principal(numero, rol)
#                         return {"status": "ok"}
#
#                     guardar_mensaje(numero, texto, tipo="recibido", es_audio=False)
#                     print(f"üí¨ Chat libre de {numero}: {texto}")
#
#                 elif tipo == "audio":
#                     audio_id = mensaje.get("audio", {}).get("id")
#                     url_cloudinary = descargar_audio(audio_id, TOKEN)
#                     if url_cloudinary:
#                         guardar_mensaje(numero, url_cloudinary, tipo="recibido", es_audio=True)
#                         enviar_mensaje(numero, "üéß Recibimos tu audio. Un asesor lo revisar√° pronto.")
#                     else:
#                         enviar_mensaje(numero, "‚ö†Ô∏è No se pudo procesar tu audio, int√©ntalo de nuevo.")
#                 return {"status": "ok"}
#
#             # === 8Ô∏è‚É£ REINICIO DESDE BOT√ìN ‚ÄúS√≠, continuar‚Äù ===
#             if paso is None and tipo == "interactive":
#                 interactive = mensaje.get("interactive", {})
#                 boton_texto = interactive.get("button_reply", {}).get("title", "").lower()
#                 if boton_texto == "s√≠, continuar":
#                     actualizar_flujo(numero, 1)
#                     enviar_pregunta(numero, 1)
#                     print(f"üü¢ [DEBUG] Flujo reiniciado -> paso=1 ({numero})")
#                     return {"status": "ok"}
#
#             # === 9Ô∏è‚É£ ACTIVAR CHAT LIBRE SEG√öN ROL ===
#             if paso is None and tipo == "text":
#                 rol_usuario = usuarios_roles.get(numero, ("",))[0]
#                 if (texto_lower in ["4", "chat libre"] and rol_usuario == "aspirante") or \
#                    (texto_lower in ["7", "chat libre"] and rol_usuario == "creador") or \
#                    (texto_lower in ["5", "chat libre"] and rol_usuario == "admin"):
#                     actualizar_flujo(numero, "chat_libre")
#                     enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     return {"status": "ok"}
#
#             # === üîü MANEJAR RESPUESTA NORMAL (ENCUESTA) ===
#             manejar_respuesta(numero, texto)
#
#     except Exception as e:
#         print("‚ùå Error procesando webhook:", e)
#         traceback.print_exc()
#
#     return {"status": "ok"}


# def manejar_respuesta(numero, texto):
#     texto_normalizado = texto.strip().lower()
#     paso = obtener_flujo(numero)
#     rol = obtener_rol_usuario(numero)
#     flujo = asegurar_flujo(numero)  # üîí inicializaci√≥n segura
#     nombre = flujo.get("nombre") or obtener_nombre_usuario(numero)
#
#     # --- 1Ô∏è‚É£ SALUDOS INICIALES ---
#     if texto_normalizado in {"hola", "buenas", "saludos"}:
#         usuario_bd = buscar_usuario_por_telefono(numero)
#         if usuario_bd:
#             enviar_mensaje(numero, "üëã Hola, bienvenido a la Agencia.")
#             enviar_menu_principal(numero, rol)
#         else:
#             enviar_mensaje(numero, Mensaje_bienvenida)
#             actualizar_flujo(numero, "esperando_usuario_tiktok")
#         return
#
#     # --- 2Ô∏è‚É£ VOLVER AL MEN√ö PRINCIPAL ---
#     if texto_normalizado in {"menu", "men√∫", "volver", "inicio", "brillar"}:
#         usuarios_flujo.pop(numero, None)
#         enviar_menu_principal(numero, rol)
#         return
#
#     # üö´ CHAT LIBRE NO PROCESA FLUJOS
#     if paso == "chat_libre":
#         return
#
#     # --- 3Ô∏è‚É£ MEN√ö PRINCIPAL POR ROL ---
#     if paso is None:
#         opciones = texto_normalizado
#         if rol == "aspirante":
#             match opciones:
#                 case "1" | "actualizar" | "perfil":
#                     actualizar_flujo(numero, 1)
#                     enviar_pregunta(numero, 1)
#                 case "2" | "diagn√≥stico" | "diagnostico":
#                     actualizar_flujo(numero, "diagnostico")
#                     enviar_diagnostico(numero)
#                     usuarios_flujo.pop(numero, None)
#                 case "3" | "requisitos":
#                     actualizar_flujo(numero, "requisitos")
#                     enviar_requisitos(numero)
#                     usuarios_flujo.pop(numero, None)
#                 case "4" | "chat libre":
#                     actualizar_flujo(numero, "chat_libre")
#                     enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                 case _:
#                     enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#             return
#
#         elif rol == "creador":
#             match opciones:
#                 case "1":
#                     actualizar_flujo(numero, 1)
#                     enviar_pregunta(numero, 1)
#                 case "3":
#                     actualizar_flujo(numero, "asesoria")
#                     enviar_mensaje(numero, "üìå Un asesor se pondr√° en contacto contigo pronto.")
#                     usuarios_flujo.pop(numero, None)
#                 case "4":
#                     actualizar_flujo(numero, "recursos")
#                     enviar_recursos_exclusivos(numero)
#                     usuarios_flujo.pop(numero, None)
#                 case "5":
#                     actualizar_flujo(numero, "eventos")
#                     enviar_eventos(numero)
#                     usuarios_flujo.pop(numero, None)
#                 case "6":
#                     actualizar_flujo(numero, "soporte")
#                     enviar_mensaje(numero, "üì© Describe tu problema y el equipo t√©cnico te responder√°.")
#                 case "7" | "chat libre":
#                     actualizar_flujo(numero, "chat_libre")
#                     enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                 case "8":
#                     actualizar_flujo(numero, "estadisticas")
#                     enviar_estadisticas(numero)
#                     usuarios_flujo.pop(numero, None)
#                 case "9":
#                     actualizar_flujo(numero, "baja")
#                     solicitar_baja(numero)
#                     usuarios_flujo.pop(numero, None)
#                 case _:
#                     enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#             return
#
#         elif rol == "admin":
#             match opciones:
#                 case "1":
#                     actualizar_flujo(numero, "panel")
#                     enviar_panel_control(numero)
#                 case "2":
#                     actualizar_flujo(numero, "ver_perfiles")
#                     enviar_perfiles(numero)
#                     usuarios_flujo.pop(numero, None)
#                 case "3":
#                     actualizar_flujo(numero, "comunicado")
#                     enviar_mensaje(numero, "‚úâÔ∏è Escribe el comunicado a enviar a creadores/aspirantes:")
#                 case "4":
#                     actualizar_flujo(numero, "recursos_admin")
#                     gestionar_recursos(numero)
#                     usuarios_flujo.pop(numero, None)
#                 case "5" | "chat libre":
#                     actualizar_flujo(numero, "chat_libre")
#                     enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                 case _:
#                     enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#             return
#
#         else:
#             if opciones == "1":
#                 actualizar_flujo(numero, "info")
#                 enviar_info_general(numero)
#             else:
#                 enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#             return
#
#     # --- 4Ô∏è‚É£ FLUJO DE ENCUESTA (PASOS NUM√âRICOS) ---
#     if isinstance(paso, int):
#         if paso == 1 and len(texto.strip()) < 3:
#             enviar_mensaje(numero, "‚ö†Ô∏è Ingresa tu nombre completo (m√≠nimo 3 caracteres).")
#             return
#
#         # Guardar nombre si es el paso 1
#         if paso == 1:
#             flujo.update({"nombre": texto.strip()})
#
#         validaciones = {
#             2: lambda t: t.isdigit() and 1 <= int(t) <= 5,
#             3: lambda t: t in {"1", "2", "3", "4"},
#             4: lambda t: t in list(mapa_paises.keys()) + ["20"] or t.lower() in [v.lower() for v in mapa_paises.values()],
#             6: lambda t: t in [str(i) for i in range(1, 10)],
#             7: lambda t: t in [str(i) for i in range(1, 6)],
#             9: lambda t: t in {"1", "2", "3"},
#             10: lambda t: t in {"1", "2", "3", "4"}
#         }
#
#         if paso in validaciones and not validaciones[paso](texto_normalizado):
#             enviar_mensaje(numero, f"‚ö†Ô∏è Ingresa una opci√≥n v√°lida para la pregunta {paso}.")
#             return
#
#         if paso == 5:
#             resultado = validar_aceptar_ciudad(texto)
#             texto = resultado["ciudad"]
#             enviar_mensaje(numero, f"‚úÖ Ciudad reconocida: {texto}")
#
#         if paso == 7:
#             enviar_mensaje(numero, "üé• ¬øTienes experiencia transmitiendo lives en TikTok? Contesta *s√≠* o *no*.")
#             actualizar_flujo(numero, "7b")
#             return
#
#         if paso == 8:
#             try:
#                 meses = int(texto)
#                 if not (0 <= meses <= 999):
#                     raise ValueError
#             except:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa un n√∫mero v√°lido de meses (0‚Äì999).")
#                 return
#             enviar_mensaje(numero, mensaje_encuesta_final_parte1(nombre))
#
#         guardar_respuesta(numero, paso, texto)
#         siguiente = paso + 1
#
#         if siguiente not in preguntas:
#             usuarios_flujo.pop(numero, None)
#             enviar_mensaje(numero, mensaje_encuesta_final(nombre))
#             consolidar_perfil(numero)
#
#             # En vez de mostrar el men√∫ autom√°ticamente:
#             enviar_mensaje(
#                 numero,
#                 '‚ú® Para ir al men√∫ principal escribe **"brillar"**'
#             )
#             return
#
#         actualizar_flujo(numero, siguiente)
#         texto_pregunta = preguntas[siguiente]
#         if "{nombre}" in texto_pregunta:
#             texto_pregunta = texto_pregunta.format(nombre=nombre)
#         enviar_mensaje(numero, texto_pregunta)
#         return
#
#     # --- 5Ô∏è‚É£ PREGUNTA CONDICIONAL (7b) ---
#     if paso == "7b":
#         respuesta = texto_normalizado
#         if respuesta in {"si", "s√≠", "s"}:
#             enviar_mensaje(numero, preguntas[8])
#             actualizar_flujo(numero, 8)
#         elif respuesta in {"no", "n"}:
#             guardar_respuesta(numero, 8, "0")
#             enviar_mensaje(numero, preguntas[9])
#             actualizar_flujo(numero, 9)
#         else:
#             enviar_mensaje(numero, "Por favor responde solo *s√≠* o *no*.")

# def manejar_respuesta(numero, texto):
#     texto = texto.strip()
#     texto_normalizado = texto.lower()
#     paso = obtener_flujo(numero)
#     rol = obtener_rol_usuario(numero)
#     flujo = asegurar_flujo(numero)  # üîí Inicializaci√≥n segura
#     nombre = flujo.get("nombre") or obtener_nombre_usuario(numero)
#
#     # --- 1Ô∏è‚É£ SALUDOS INICIALES ---
#     if texto_normalizado in {"hola", "buenas", "saludos"}:
#         usuario_bd = buscar_usuario_por_telefono(numero)
#         if usuario_bd:
#             rol = usuario_bd.get("rol", "aspirante")
#             enviar_mensaje(numero, "üëã Hola, bienvenido a la Agencia.")
#             enviar_menu_principal(numero, rol)
#         else:
#             enviar_mensaje(numero, Mensaje_bienvenida)
#             actualizar_flujo(numero, "esperando_usuario_tiktok")
#         return
#
#     # --- 2Ô∏è‚É£ VOLVER AL MEN√ö PRINCIPAL ---
#     if texto_normalizado in {"menu", "men√∫", "volver", "inicio", "brillar"}:
#         usuarios_flujo.pop(numero, None)
#         enviar_menu_principal(numero, rol)
#         return
#
#     # üö´ CHAT LIBRE NO PROCESA FLUJOS
#     if paso == "chat_libre":
#         return
#
#     # --- 3Ô∏è‚É£ MEN√ö PRINCIPAL POR ROL ---
#     if paso is None:
#         opciones = texto_normalizado
#         match rol:
#             case "aspirante":
#                 match opciones:
#                     case "1" | "actualizar" | "perfil":
#                         actualizar_flujo(numero, 1)
#                         enviar_pregunta(numero, 1)
#                     case "2" | "diagn√≥stico" | "diagnostico":
#                         actualizar_flujo(numero, "diagnostico")
#                         enviar_diagnostico(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case "3" | "requisitos":
#                         actualizar_flujo(numero, "requisitos")
#                         enviar_requisitos(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case "4" | "chat libre":
#                         actualizar_flujo(numero, "chat_libre")
#                         enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     case _:
#                         enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#                 return
#
#             case "creador":
#                 match opciones:
#                     case "1":
#                         actualizar_flujo(numero, 1)
#                         enviar_pregunta(numero, 1)
#                     case "3":
#                         actualizar_flujo(numero, "asesoria")
#                         enviar_mensaje(numero, "üìå Un asesor se pondr√° en contacto contigo pronto.")
#                         usuarios_flujo.pop(numero, None)
#                     case "4":
#                         actualizar_flujo(numero, "recursos")
#                         enviar_recursos_exclusivos(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case "5":
#                         actualizar_flujo(numero, "eventos")
#                         enviar_eventos(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case "6":
#                         actualizar_flujo(numero, "soporte")
#                         enviar_mensaje(numero, "üì© Describe tu problema y el equipo t√©cnico te responder√°.")
#                     case "7" | "chat libre":
#                         actualizar_flujo(numero, "chat_libre")
#                         enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     case "8":
#                         actualizar_flujo(numero, "estadisticas")
#                         enviar_estadisticas(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case "9":
#                         actualizar_flujo(numero, "baja")
#                         solicitar_baja(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case _:
#                         enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#                 return
#
#             case "admin":
#                 match opciones:
#                     case "1":
#                         actualizar_flujo(numero, "panel")
#                         enviar_panel_control(numero)
#                     case "2":
#                         actualizar_flujo(numero, "ver_perfiles")
#                         enviar_perfiles(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case "3":
#                         actualizar_flujo(numero, "comunicado")
#                         enviar_mensaje(numero, "‚úâÔ∏è Escribe el comunicado a enviar a creadores/aspirantes:")
#                     case "4":
#                         actualizar_flujo(numero, "recursos_admin")
#                         gestionar_recursos(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case "5" | "chat libre":
#                         actualizar_flujo(numero, "chat_libre")
#                         enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     case _:
#                         enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#                 return
#
#             case _:
#                 if opciones == "1":
#                     actualizar_flujo(numero, "info")
#                     enviar_info_general(numero)
#                 else:
#                     enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#                 return
#
#     # --- 4Ô∏è‚É£ FLUJO DE ENCUESTA ---
#     if isinstance(paso, int):
#         if paso == 1:
#             if len(texto) < 3:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa tu nombre completo (m√≠nimo 3 caracteres).")
#                 return
#             flujo["nombre"] = texto.title().strip()
#             nombre = flujo["nombre"]
#
#         validaciones = {
#             2: lambda t: t.isdigit() and 1 <= int(t) <= 5,
#             3: lambda t: t in {"1", "2", "3", "4"},
#             4: lambda t: t in list(mapa_paises.keys()) + ["20"] or t.lower() in [v.lower() for v in mapa_paises.values()],
#             6: lambda t: t in [str(i) for i in range(1, 10)],
#             7: lambda t: t in [str(i) for i in range(1, 6)],
#             9: lambda t: t in {"1", "2", "3"},
#             10: lambda t: t in {"1", "2", "3", "4"}
#         }
#
#         if paso in validaciones and not validaciones[paso](texto_normalizado):
#             enviar_mensaje(numero, f"‚ö†Ô∏è Ingresa una opci√≥n v√°lida para la pregunta {paso}.")
#             return
#
#         if paso == 5:
#             resultado = validar_aceptar_ciudad(texto)
#             texto = resultado["ciudad"]
#             enviar_mensaje(numero, f"‚úÖ Ciudad reconocida: {texto}")
#
#         if paso == 7:
#             enviar_mensaje(numero, "üé• ¬øTienes experiencia transmitiendo lives en TikTok? Contesta *s√≠* o *no*.")
#             actualizar_flujo(numero, "7b")
#             return
#
#         if paso == 8:
#             try:
#                 meses = int(texto)
#                 if not (0 <= meses <= 999):
#                     raise ValueError
#             except ValueError:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa un n√∫mero v√°lido de meses (0‚Äì999).")
#                 return
#             enviar_mensaje(numero, mensaje_encuesta_final_parte1(nombre))
#
#         guardar_respuesta(numero, paso, texto)
#         siguiente = paso + 1
#
#         # ‚úÖ Finalizaci√≥n del flujo
#         if siguiente not in preguntas:
#             usuarios_flujo.pop(numero, None)
#             enviar_mensaje(numero, mensaje_encuesta_final(nombre))
#             consolidar_perfil(numero)
#             enviar_mensaje(numero, '‚ú® Para ir al men√∫ principal escribe **"brillar"**')
#             return
#
#         actualizar_flujo(numero, siguiente)
#         texto_pregunta = preguntas[siguiente]
#         if "{nombre}" in texto_pregunta:
#             texto_pregunta = texto_pregunta.format(nombre=nombre)
#         enviar_mensaje(numero, texto_pregunta)
#         return
#
#     # --- 5Ô∏è‚É£ PREGUNTA CONDICIONAL (7b) ---
#     if paso == "7b":
#         if texto_normalizado in {"si", "s√≠", "s"}:
#             enviar_mensaje(numero, preguntas[8])
#             actualizar_flujo(numero, 8)
#         elif texto_normalizado in {"no", "n"}:
#             guardar_respuesta(numero, 8, "0")
#             enviar_mensaje(numero, preguntas[9])
#             actualizar_flujo(numero, 9)
#         else:
#             enviar_mensaje(numero, "Por favor responde solo *s√≠* o *no*.")
#
# @router.post("/webhook")
# async def whatsapp_webhook(request: Request):
#     data = await request.json()
#     print("üì© Webhook recibido:", json.dumps(data, indent=2))
#
#     try:
#         cambios = data.get("entry", [])[0].get("changes", [])[0].get("value", {})
#         mensajes = cambios.get("messages", [])
#         if not mensajes:
#             return {"status": "ok"}
#
#         for mensaje in mensajes:
#             numero = mensaje.get("from")
#             tipo = mensaje.get("type")
#             texto = mensaje.get("text", {}).get("body", "").strip()
#             texto_lower = texto.lower()
#
#             # --- Variables auxiliares ---
#             paso = obtener_flujo(numero)
#             usuario_bd = buscar_usuario_por_telefono(numero)
#             rol = obtener_rol_usuario(numero)
#
#             print(f"üìç [DEBUG] n√∫mero={numero}, paso={paso}, texto='{texto_lower}'")
#
#             # === 1Ô∏è‚É£ MENSAJES DE CONTROL UNIVERSALES ===
#             if tipo == "text":
#                 # --- üëã SALUDOS INICIALES ---
#                 if texto_lower in ["hola", "buenas", "saludos","brillar"]:
#                     if usuario_bd:
#                         nombre = usuario_bd.get("nombre", "").split(" ")[0] or ""
#                         rol = usuario_bd.get("rol", "aspirante")
#                         # üîπ Nueva versi√≥n del men√∫ con saludo personalizado
#                         enviar_menu_principal(numero, rol=rol, nombre=nombre)
#                     else:
#                         enviar_mensaje(numero, Mensaje_bienvenida)
#                         actualizar_flujo(numero, "esperando_usuario_tiktok")
#                     return {"status": "ok"}
#
#                 # --- üîÑ Reinicio manual del flujo (men√∫ principal)
#                 if texto_lower in ["menu", "men√∫", "brillar"]:
#                     usuarios_flujo.pop(numero, None)
#                     enviar_mensaje(numero, "‚ú® Has vuelto al men√∫ principal.")
#                     enviar_menu_principal(numero, rol)
#                     return {"status": "ok"}
#
#             # === 2Ô∏è‚É£ NUEVO USUARIO ===
#             if not usuario_bd and paso is None:
#                 enviar_mensaje(numero, Mensaje_bienvenida)
#                 actualizar_flujo(numero, "esperando_usuario_tiktok")
#                 print(f"üü¢ [DEBUG] Flujo inicial -> esperando_usuario_tiktok ({numero})")
#                 return {"status": "ok"}
#
#             # === 3Ô∏è‚É£ FLUJO DE VERIFICACI√ìN USUARIO TIKTOK ===
#             if paso == "esperando_usuario_tiktok" and tipo == "text":
#                 usuario_tiktok = texto.strip()
#                 aspirante = buscar_aspirante_por_usuario_tiktok(usuario_tiktok)
#
#                 if aspirante:
#                     nombre = aspirante.get("nickname") or aspirante.get("nombre_real") or "(sin nombre)"
#                     enviar_mensaje(numero, mensaje_confirmar_nombre(nombre))
#                     actualizar_flujo(numero, "confirmando_nombre")
#                     usuarios_temp[numero] = aspirante
#                 else:
#                     enviar_mensaje(numero, "‚ùå No encontramos ese usuario de TikTok. ¬øPodr√≠as verificarlo?")
#                 return {"status": "ok"}
#
#             # === 4Ô∏è‚É£ CONFIRMAR NOMBRE ===
#             if paso == "confirmando_nombre" and tipo == "text":
#                 if texto_lower in ["si", "s√≠", "correcto", "yes", "ok", "sip", "acuerdo"]:
#                     aspirante = usuarios_temp.get(numero)
#                     if aspirante:
#                         actualizar_telefono_aspirante(aspirante["id"], numero)
#
#                     enviar_botones(
#                         numero,
#                         texto=mensaje_proteccion_datos(),
#                         botones=[{"id": "iniciar_encuesta", "title": "‚úÖ S√≠, quiero iniciar"}],
#                     )
#                     actualizar_flujo(numero, "esperando_inicio_encuesta")
#                 else:
#                     enviar_mensaje(numero, "Por favor escribe el nombre correcto o verifica tu usuario de TikTok.")
#                 return {"status": "ok"}
#
#             # === 5Ô∏è‚É£ ESPERANDO INICIO ENCUESTA ===
#             if paso == "esperando_inicio_encuesta":
#                 interactive = mensaje.get("interactive", {})
#                 if interactive.get("type") == "button_reply":
#                     button_id = interactive.get("button_reply", {}).get("id")
#                     if button_id == "iniciar_encuesta":
#                         actualizar_flujo(numero, 1)
#                         enviar_pregunta(numero, 1)
#                         print(f"üü¢ [DEBUG] Encuesta iniciada -> paso=1 ({numero})")
#                         return {"status": "ok"}
#
#                 enviar_mensaje(numero, "Por favor usa el bot√≥n para iniciar la encuesta.")
#                 return {"status": "ok"}
#
#             # === 6Ô∏è‚É£ ASIGNAR ROL SI FALTA ===
#             if usuario_bd and numero not in usuarios_roles:
#                 usuarios_roles[numero] = (usuario_bd["rol"], time.time())
#
#             # === 7Ô∏è‚É£ CHAT LIBRE ===
#             if paso == "chat_libre":
#                 if tipo == "text":
#                     if texto_lower in ["menu", "men√∫", "brillar"]:
#                         usuarios_flujo.pop(numero, None)
#                         enviar_mensaje(numero, "üîô Has vuelto al men√∫ inicial.")
#                         enviar_menu_principal(numero, rol)
#                         return {"status": "ok"}
#
#                     guardar_mensaje(numero, texto, tipo="recibido", es_audio=False)
#                     print(f"üí¨ Chat libre de {numero}: {texto}")
#
#                 elif tipo == "audio":
#                     audio_id = mensaje.get("audio", {}).get("id")
#                     url_cloudinary = descargar_audio(audio_id, TOKEN)
#                     if url_cloudinary:
#                         guardar_mensaje(numero, url_cloudinary, tipo="recibido", es_audio=True)
#                         enviar_mensaje(numero, "üéß Recibimos tu audio. Un asesor lo revisar√° pronto.")
#                     else:
#                         enviar_mensaje(numero, "‚ö†Ô∏è No se pudo procesar tu audio, int√©ntalo de nuevo.")
#                 return {"status": "ok"}
#
#             # === 8Ô∏è‚É£ REINICIO DESDE BOT√ìN ‚ÄúS√≠, continuar‚Äù ===
#             if paso is None and tipo == "interactive":
#                 interactive = mensaje.get("interactive", {})
#                 boton_texto = interactive.get("button_reply", {}).get("title", "").lower()
#                 if boton_texto == "s√≠, continuar":
#                     actualizar_flujo(numero, 1)
#                     enviar_pregunta(numero, 1)
#                     print(f"üü¢ [DEBUG] Flujo reiniciado -> paso=1 ({numero})")
#                     return {"status": "ok"}
#
#             # === 9Ô∏è‚É£ ACTIVAR CHAT LIBRE SEG√öN ROL ===
#             if paso is None and tipo == "text":
#                 rol_usuario = usuarios_roles.get(numero, ("",))[0]
#                 if (texto_lower in ["4", "chat libre"] and rol_usuario == "aspirante") or \
#                    (texto_lower in ["7", "chat libre"] and rol_usuario == "creador") or \
#                    (texto_lower in ["5", "chat libre"] and rol_usuario == "admin"):
#                     actualizar_flujo(numero, "chat_libre")
#                     enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     return {"status": "ok"}
#
#             # === üîü MANEJAR RESPUESTA NORMAL (ENCUESTA) ===
#             manejar_respuesta(numero, texto)
#
#     except Exception as e:
#         print("‚ùå Error procesando webhook:", e)
#         traceback.print_exc()
#
#     return {"status": "ok"}

# @router.post("/webhook")
# async def whatsapp_webhook(request: Request):
#     data = await request.json()
#     print("üì© Webhook recibido:", json.dumps(data, indent=2))
#
#     try:
#         cambios = data.get("entry", [])[0].get("changes", [])[0].get("value", {})
#         mensajes = cambios.get("messages", [])
#         if not mensajes:
#             return {"status": "ok"}
#
#         for mensaje in mensajes:
#             numero = mensaje.get("from")
#             tipo = mensaje.get("type")
#             texto = mensaje.get("text", {}).get("body", "").strip()
#             texto_lower = texto.lower()
#
#             # --- Variables auxiliares ---
#             paso = obtener_flujo(numero)
#             usuario_bd = buscar_usuario_por_telefono(numero)
#             rol = obtener_rol_usuario(numero)
#
#             print(f"üìç [DEBUG] n√∫mero={numero}, paso={paso}, texto='{texto_lower}'")
#
#             # === 1Ô∏è‚É£ MENSAJES DE CONTROL UNIVERSALES ===
#             if tipo == "text":
#                 if texto_lower in ["hola", "buenas", "saludos"]:
#                     if usuario_bd:
#                         nombre = usuario_bd.get("nombre", "").split(" ")[0] or ""
#                         rol = usuario_bd.get("rol", "aspirante")
#
#                         if nombre:
#                             mensaje_bienvenida = f"üëã ¬°Hola {nombre}! üìã Te damos este men√∫ de opciones:"
#                         else:
#                             mensaje_bienvenida = "üëã ¬°Hola! üìã Te damos este men√∫ de opciones:"
#
#                         enviar_mensaje(numero, mensaje_bienvenida)
#                         enviar_menu_principal(numero, rol)
#                     else:
#                         enviar_mensaje(numero, Mensaje_bienvenida)
#                         actualizar_flujo(numero, "esperando_usuario_tiktok")
#                     return {"status": "ok"}
#
#                 # Reinicio manual del flujo (men√∫ principal)
#                 if texto_lower in ["menu", "men√∫", "brillar"]:
#                     usuarios_flujo.pop(numero, None)
#                     enviar_mensaje(numero, "‚ú® Has vuelto al men√∫ principal.")
#                     enviar_menu_principal(numero, rol)
#                     return {"status": "ok"}
#
#             # === 2Ô∏è‚É£ NUEVO USUARIO ===
#             if not usuario_bd and paso is None:
#                 enviar_mensaje(numero, Mensaje_bienvenida)
#                 actualizar_flujo(numero, "esperando_usuario_tiktok")
#                 print(f"üü¢ [DEBUG] Flujo inicial -> esperando_usuario_tiktok ({numero})")
#                 return {"status": "ok"}
#
#             # === 3Ô∏è‚É£ FLUJO DE VERIFICACI√ìN USUARIO TIKTOK ===
#             if paso == "esperando_usuario_tiktok" and tipo == "text":
#                 usuario_tiktok = texto.strip()
#                 aspirante = buscar_aspirante_por_usuario_tiktok(usuario_tiktok)
#
#                 if aspirante:
#                     nombre = aspirante.get("nickname") or aspirante.get("nombre_real") or "(sin nombre)"
#                     enviar_mensaje(numero, mensaje_confirmar_nombre(nombre))
#                     actualizar_flujo(numero, "confirmando_nombre")
#                     usuarios_temp[numero] = aspirante
#                 else:
#                     enviar_mensaje(numero, "‚ùå No encontramos ese usuario de TikTok. ¬øPodr√≠as verificarlo?")
#                 return {"status": "ok"}
#
#             # === 4Ô∏è‚É£ CONFIRMAR NOMBRE ===
#             if paso == "confirmando_nombre" and tipo == "text":
#                 if texto_lower in ["si", "s√≠", "correcto", "yes", "ok", "sip", "acuerdo"]:
#                     aspirante = usuarios_temp.get(numero)
#                     if aspirante:
#                         actualizar_telefono_aspirante(aspirante["id"], numero)
#
#                     enviar_botones(
#                         numero,
#                         texto=mensaje_proteccion_datos(),
#                         botones=[{"id": "iniciar_encuesta", "title": "‚úÖ S√≠, quiero iniciar"}],
#                     )
#                     actualizar_flujo(numero, "esperando_inicio_encuesta")
#                 else:
#                     enviar_mensaje(numero, "Por favor escribe el nombre correcto o verifica tu usuario de TikTok.")
#                 return {"status": "ok"}
#
#             # === 5Ô∏è‚É£ ESPERANDO INICIO ENCUESTA ===
#             if paso == "esperando_inicio_encuesta":
#                 interactive = mensaje.get("interactive", {})
#                 if interactive.get("type") == "button_reply":
#                     button_id = interactive.get("button_reply", {}).get("id")
#                     if button_id == "iniciar_encuesta":
#                         actualizar_flujo(numero, 1)
#                         enviar_pregunta(numero, 1)
#                         print(f"üü¢ [DEBUG] Encuesta iniciada -> paso=1 ({numero})")
#                         return {"status": "ok"}
#
#                 enviar_mensaje(numero, "Por favor usa el bot√≥n para iniciar la encuesta.")
#                 return {"status": "ok"}
#
#             # === 6Ô∏è‚É£ ASIGNAR ROL SI FALTA ===
#             if usuario_bd and numero not in usuarios_roles:
#                 usuarios_roles[numero] = (usuario_bd["rol"], time.time())
#
#             # === 7Ô∏è‚É£ CHAT LIBRE ===
#             if paso == "chat_libre":
#                 if tipo == "text":
#                     if texto_lower in ["menu", "men√∫", "brillar"]:
#                         usuarios_flujo.pop(numero, None)
#                         enviar_mensaje(numero, "üîô Has vuelto al men√∫ inicial.")
#                         enviar_menu_principal(numero, rol)
#                         return {"status": "ok"}
#
#                     guardar_mensaje(numero, texto, tipo="recibido", es_audio=False)
#                     print(f"üí¨ Chat libre de {numero}: {texto}")
#
#                 elif tipo == "audio":
#                     audio_id = mensaje.get("audio", {}).get("id")
#                     url_cloudinary = descargar_audio(audio_id, TOKEN)
#                     if url_cloudinary:
#                         guardar_mensaje(numero, url_cloudinary, tipo="recibido", es_audio=True)
#                         enviar_mensaje(numero, "üéß Recibimos tu audio. Un asesor lo revisar√° pronto.")
#                     else:
#                         enviar_mensaje(numero, "‚ö†Ô∏è No se pudo procesar tu audio, int√©ntalo de nuevo.")
#                 return {"status": "ok"}
#
#             # === 8Ô∏è‚É£ REINICIO DESDE BOT√ìN ‚ÄúS√≠, continuar‚Äù ===
#             if paso is None and tipo == "interactive":
#                 interactive = mensaje.get("interactive", {})
#                 boton_texto = interactive.get("button_reply", {}).get("title", "").lower()
#                 if boton_texto == "s√≠, continuar":
#                     actualizar_flujo(numero, 1)
#                     enviar_pregunta(numero, 1)
#                     print(f"üü¢ [DEBUG] Flujo reiniciado -> paso=1 ({numero})")
#                     return {"status": "ok"}
#
#             # === 9Ô∏è‚É£ ACTIVAR CHAT LIBRE SEG√öN ROL ===
#             if paso is None and tipo == "text":
#                 rol_usuario = usuarios_roles.get(numero, ("",))[0]
#                 if (texto_lower in ["4", "chat libre"] and rol_usuario == "aspirante") or \
#                    (texto_lower in ["7", "chat libre"] and rol_usuario == "creador") or \
#                    (texto_lower in ["5", "chat libre"] and rol_usuario == "admin"):
#                     actualizar_flujo(numero, "chat_libre")
#                     enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     return {"status": "ok"}
#
#             # === üîü MANEJAR RESPUESTA NORMAL (ENCUESTA) ===
#             manejar_respuesta(numero, texto)
#
#     except Exception as e:
#         print("‚ùå Error procesando webhook:", e)
#         traceback.print_exc()
#
#     return {"status": "ok"}


# def manejar_respuesta(numero, texto):
#     texto_normalizado = texto.strip().lower()
#     paso = obtener_flujo(numero)
#     rol = obtener_rol_usuario(numero)
#
#     asegurar_flujo(numero)  # üîí Inicializaci√≥n segura
#
#     # --- Detectar saludos ---
#     if texto_normalizado in ["hola", "buenas", "saludos"]:
#         usuario_bd = buscar_usuario_por_telefono(numero)
#         if usuario_bd:
#             enviar_mensaje(numero, f"üëã Hola, bienvenido a la Agencia.")
#             enviar_menu_principal(numero, rol)
#             return
#
#         enviar_mensaje(numero, Mensaje_bienvenida)
#
#         actualizar_flujo(numero, "esperando_usuario_tiktok")
#         return
#
#     # --- Volver al men√∫ principal ---
#     if texto_normalizado in ["menu", "men√∫", "volver", "inicio", "brillar"]:
#         usuarios_flujo.pop(numero, None)
#         enviar_menu_principal(numero, rol)
#         return
#
#     # üö´ Chat libre no procesa aqu√≠
#     if paso == "chat_libre":
#         return
#
#     # --- MEN√ö PRINCIPAL SEG√öN ROL ---
#     if paso is None:
#         if rol == "aspirante":
#             if texto_normalizado in ["1", "actualizar", "perfil"]:
#                 actualizar_flujo(numero, 1)
#                 enviar_pregunta(numero, 1)
#                 return
#             elif texto_normalizado in ["2", "diagn√≥stico", "diagnostico"]:
#                 actualizar_flujo(numero, "diagnostico")
#                 enviar_diagnostico(numero)
#                 usuarios_flujo.pop(numero, None)
#                 return
#             elif texto_normalizado in ["3", "requisitos"]:
#                 actualizar_flujo(numero, "requisitos")
#                 enviar_requisitos(numero)
#                 usuarios_flujo.pop(numero, None)
#                 return
#             elif texto_normalizado in ["4", "chat libre"]:
#                 actualizar_flujo(numero, "chat_libre")
#                 enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                 return
#             else:
#                 enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#                 return
#
#         elif rol == "creador":
#             if texto_normalizado == "1":
#                 actualizar_flujo(numero, 1)
#                 enviar_pregunta(numero, 1)
#                 return
#             elif texto_normalizado == "3":
#                 actualizar_flujo(numero, "asesoria")
#                 enviar_mensaje(numero, "üìå Un asesor se pondr√° en contacto contigo pronto.")
#                 usuarios_flujo.pop(numero, None)
#                 return
#             elif texto_normalizado == "4":
#                 actualizar_flujo(numero, "recursos")
#                 enviar_recursos_exclusivos(numero)
#                 usuarios_flujo.pop(numero, None)
#                 return
#             elif texto_normalizado == "5":
#                 actualizar_flujo(numero, "eventos")
#                 enviar_eventos(numero)
#                 usuarios_flujo.pop(numero, None)
#                 return
#             elif texto_normalizado == "6":
#                 actualizar_flujo(numero, "soporte")
#                 enviar_mensaje(numero, "üì© Describe tu problema y el equipo t√©cnico te responder√°.")
#                 return
#             elif texto_normalizado == "8":
#                 actualizar_flujo(numero, "estadisticas")
#                 enviar_estadisticas(numero)
#                 usuarios_flujo.pop(numero, None)
#                 return
#             elif texto_normalizado == "9":
#                 actualizar_flujo(numero, "baja")
#                 solicitar_baja(numero)
#                 usuarios_flujo.pop(numero, None)
#                 return
#             elif texto_normalizado in ["7", "chat libre"]:
#                 actualizar_flujo(numero, "chat_libre")
#                 enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                 return
#             else:
#                 enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#                 return
#
#         elif rol == "admin":
#             if texto_normalizado == "1":
#                 actualizar_flujo(numero, "panel")
#                 enviar_panel_control(numero)
#                 return
#             elif texto_normalizado == "2":
#                 actualizar_flujo(numero, "ver_perfiles")
#                 enviar_perfiles(numero)
#                 usuarios_flujo.pop(numero, None)
#                 return
#             elif texto_normalizado == "3":
#                 actualizar_flujo(numero, "comunicado")
#                 enviar_mensaje(numero, "‚úâÔ∏è Escribe el comunicado a enviar a creadores/aspirantes:")
#                 return
#             elif texto_normalizado == "4":
#                 actualizar_flujo(numero, "recursos_admin")
#                 gestionar_recursos(numero)
#                 usuarios_flujo.pop(numero, None)
#                 return
#             elif texto_normalizado in ["5", "chat libre"]:
#                 actualizar_flujo(numero, "chat_libre")
#                 enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                 return
#             else:
#                 enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#                 return
#
#         else:  # Rol desconocido -> men√∫ b√°sico
#             if texto_normalizado == "1":
#                 actualizar_flujo(numero, "info")
#                 enviar_info_general(numero)
#                 return
#             else:
#                 enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#                 return
#
#     # --- FLUJO DE PREGUNTAS ---
#     if isinstance(paso, int):
#         # üß© Validaciones por paso
#         if paso == 1:  # Nombre
#             if len(texto.strip()) < 3:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa tu nombre completo sin apellidos (m√≠nimo 3 caracteres).")
#                 return
#
#             # Guardamos el nombre para reutilizar
#             if numero not in usuarios_flujo or not isinstance(usuarios_flujo[numero], dict):
#                 usuarios_flujo[numero] = {}
#             usuarios_flujo[numero].update({"paso": paso, "nombre": texto.strip()})
#
#         elif paso == 2:  # Edad
#             try:
#                 opcion = int(texto)
#                 if opcion not in [1, 2, 3, 4, 5]:
#                     raise ValueError
#             except:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa una opci√≥n v√°lida para tu rango de edad (1-5).")
#                 return
#
#         elif paso == 3:  # G√©nero
#             if texto not in ["1", "2", "3", "4"]:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa solo el n√∫mero (1‚Äì4).")
#                 return
#
#         elif paso == 4:  # Pa√≠s
#             opciones_paises = list(mapa_paises.keys()) + ["20"]
#             if texto not in opciones_paises and texto.lower() not in [p.lower() for p in mapa_paises.values()]:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa el n√∫mero de tu pa√≠s o escr√≠belo si no est√° en la lista.")
#                 return
#
#         elif paso == 5:  # Ciudad principal
#             resultado = validar_aceptar_ciudad(texto)
#             if resultado["corregida"]:
#                 texto = resultado["ciudad"]
#                 enviar_mensaje(numero, f"‚úÖ Ciudad reconocida y corregida: {texto}")
#             else:
#                 enviar_mensaje(numero, f"‚úÖ Ciudad aceptada como la escribiste: {texto}")
#
#         elif paso == 6:  # Actividad actual
#             if texto not in [str(i) for i in range(1, 10)]:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa solo el n√∫mero (1‚Äì9).")
#                 return
#
#         elif paso == 7:  # Intenci√≥n principal
#             if texto not in [str(i) for i in range(1, 6)]:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa solo el n√∫mero (1‚Äì5).")
#                 return
#
#             # ‚úÖ Pregunta condicional: experiencia en lives
#             enviar_mensaje(numero, "üé• ¬øTienes experiencia transmitiendo lives en TikTok? Contesta *s√≠* o *no*.")
#             actualizar_flujo(numero, "7b")
#             return
#
#         elif paso == 8:  # Meses de experiencia
#             try:
#                 meses = int(texto)
#                 if not (0 <= meses <= 999):
#                     raise ValueError
#             except:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa un n√∫mero v√°lido de meses (0‚Äì999).")
#                 return
#
#         elif paso == 9:  # Horas por d√≠a
#             if texto not in ["1", "2", "3"]:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa solo el n√∫mero (1‚Äì3).")
#                 return
#
#         elif paso == 10:  # D√≠as por semana
#             if texto not in ["1", "2", "3", "4"]:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa solo el n√∫mero (1‚Äì4).")
#                 return
#
#         # ‚úÖ Guardar respuesta v√°lida en BD
#         guardar_respuesta(numero, paso, texto)
#
#         # --- L√≥gica de avance ---
#         siguiente = paso + 1
#
#         # üö´ Si ya no hay m√°s preguntas, finaliza el flujo
#         if siguiente not in preguntas:
#             usuarios_flujo.pop(numero, None)
#             nombre = obtener_nombre_usuario(numero)
#             enviar_mensaje(numero, mensaje_encuesta_final(nombre))
#             consolidar_perfil(numero)
#             enviar_menu_principal(numero, rol)
#             return
#
#         # ‚úÖ Avanzar al siguiente paso
#         actualizar_flujo(numero, siguiente)
#
#         # üü¢ Personalizar pregunta con nombre
#         nombre = obtener_nombre_usuario(numero)
#         texto_pregunta = preguntas[siguiente]
#         if "{nombre}" in texto_pregunta:
#             texto_pregunta = texto_pregunta.format(nombre=nombre)
#
#         # üí¨ Mensaje especial despu√©s de la 8
#         if paso == 8:
#             mensaje = mensaje_encuesta_final_parte1(nombre)
#             enviar_mensaje(numero, mensaje)
#
#         enviar_mensaje(numero, texto_pregunta)
#         return
#
#     # --- BLOQUE NUEVO: pregunta condicional ‚Äú7b‚Äù ---
#     if paso == "7b":
#         respuesta = texto.strip().lower()
#
#         if respuesta in ["si", "s√≠", "s"]:
#             # Tiene experiencia ‚Üí preguntar meses
#             enviar_mensaje(numero, preguntas[8])
#             actualizar_flujo(numero, 8)
#             return
#
#         elif respuesta in ["no", "n"]:
#             # No tiene experiencia ‚Üí registrar 0 y pasar a 9
#             guardar_respuesta(numero, 8, "0")
#             enviar_mensaje(numero, preguntas[9])
#             actualizar_flujo(numero, 9)
#             return
#
#         else:
#             enviar_mensaje(numero, "Por favor responde solo *s√≠* o *no*.")
#             return
#
#
# # --- FLUJO DE PREGUNTAS ---
#     if isinstance(paso, int):
#         # Validaciones seg√∫n paso
#         if paso == 1:  # Nombre
#             if len(texto.strip()) < 3:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa tu nombre completo sin apellidos (m√≠nimo 3 caracteres).")
#                 return
#
#             # Guardamos el nombre para reutilizar
#             if numero not in usuarios_flujo or not isinstance(usuarios_flujo[numero], dict):
#                 usuarios_flujo[numero] = {}
#             usuarios_flujo[numero].update({"paso": paso, "nombre": texto.strip()})
#
#
#         elif paso == 2:  # Edad
#             try:
#                 opcion = int(texto)
#                 if opcion not in [1, 2, 3, 4, 5]:
#                     raise ValueError
#             except:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa una opci√≥n v√°lida para tu rango de edad (1-5).")
#                 return
#
#         elif paso == 3:  # G√©nero
#             if texto not in ["1", "2", "3", "4"]:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa solo el n√∫mero (1‚Äì4).")
#                 return
#
#         if paso == 4:  # Pa√≠s
#             opciones_paises = list(mapa_paises.keys()) + ["20"]
#             if texto not in opciones_paises and texto.lower() not in [p.lower() for p in mapa_paises.values()]:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa el n√∫mero de tu pa√≠s o escr√≠belo si no est√° en la lista.")
#                 return
#
#         if paso == 5:  # Ciudad principal
#             resultado = validar_aceptar_ciudad(texto)
#             if resultado["corregida"]:
#                 texto = resultado["ciudad"]
#                 enviar_mensaje(numero, f"‚úÖ Ciudad reconocida y corregida: {texto}")
#             else:
#                 enviar_mensaje(numero, f"‚úÖ Ciudad aceptada como la escribiste: {texto}")
#
#         elif paso == 6:  # Actividad actual
#             if texto not in [str(i) for i in range(1, 10)]:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa solo el n√∫mero (1‚Äì9).")
#                 return
#
#         elif paso == 7:  # Intenci√≥n principal
#             if texto not in [str(i) for i in range(1, 6)]:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa solo el n√∫mero (1‚Äì5).")
#                 return
#
#             # ‚úÖ Despu√©s de la 7, se pregunta si tiene experiencia en lives
#             enviar_mensaje(numero, "üé• ¬øTienes experiencia transmitiendo lives en TikTok?. Contesta *s√≠* o *no*.")
#             actualizar_flujo(numero, "7b")
#             return
#
#         elif paso == 8:  # Meses de experiencia
#             try:
#                 meses = int(texto)
#                 if not (0 <= meses <= 999):
#                     raise ValueError
#             except:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa un n√∫mero v√°lido de meses (0‚Äì999).")
#                 return
#
#         elif paso == 9:  # Horas por d√≠a
#             if texto not in ["1", "2", "3"]:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa solo el n√∫mero (1‚Äì3).")
#                 return
#
#         elif paso == 10:  # D√≠as por semana
#             if texto not in ["1", "2", "3", "4"]:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa solo el n√∫mero (1‚Äì4).")
#                 return
#
#         # Guardar respuesta v√°lida
#         guardar_respuesta(numero, paso, texto)
#
#         # --- L√≥gica de avance ---
#         if paso < len(preguntas):
#             siguiente = paso + 1
#             actualizar_flujo(numero, siguiente)
#
#             # üü¢ Insertar el nombre en preguntas personalizadas
#             nombre = obtener_nombre_usuario(numero)
#             texto_pregunta = preguntas[siguiente]
#
#             if "{nombre}" in texto_pregunta:
#                 texto_pregunta = texto_pregunta.format(nombre=nombre)
#
#             # üí¨ Mensaje especial despu√©s de la 8
#             if paso == 8:
#                 mensaje = mensaje_encuesta_final_parte1(nombre)
#                 enviar_mensaje(numero, mensaje)
#
#             enviar_mensaje(numero, texto_pregunta)
#
#         else:
#             # üèÅ Fin del flujo
#             usuarios_flujo.pop(numero, None)
#             nombre = obtener_nombre_usuario(numero)
#             enviar_mensaje(numero, mensaje_encuesta_final(nombre))
#             consolidar_perfil(numero)
#             enviar_menu_principal(numero, rol)
#         return
#
#     # --- BLOQUE NUEVO: validaci√≥n para la pregunta condicional ‚Äú7b‚Äù ---
#     if paso == "7b":
#         respuesta = texto.strip().lower()
#
#         if respuesta in ["si", "s√≠", "s"]:
#             # Tiene experiencia ‚Üí preguntar meses
#             enviar_mensaje(numero, preguntas[8])
#             actualizar_flujo(numero, 8)
#             return
#
#         elif respuesta in ["no", "n"]:
#             # No tiene experiencia ‚Üí registrar 0 y saltar a 9
#             guardar_respuesta(numero, 8, "0")
#             # enviar_mensaje(numero, "‚úÖ Perfecto, registramos que no tienes experiencia previa en TikTok Live.")
#             enviar_mensaje(numero, preguntas[9])
#             actualizar_flujo(numero, 9)
#             return
#
#         else:
#             enviar_mensaje(numero, "Por favor responde solo *s√≠* o *no*.")
#             return



# @router.post("/webhook")
# async def whatsapp_webhook(request: Request):
#     data = await request.json()
#     print("üì© Webhook recibido:", json.dumps(data, indent=2))
#
#     try:
#         mensajes = data["entry"][0]["changes"][0]["value"].get("messages", [])
#         if not mensajes:
#             return {"status": "ok"}
#
#         for mensaje in mensajes:
#             numero = mensaje["from"]
#             tipo = mensaje.get("type")
#             texto = mensaje.get("text", {}).get("body", "").strip().lower()
#             paso = obtener_flujo(numero)  # <-- usa cach√© robusta!
#             usuario_bd = buscar_usuario_por_telefono(numero)
#             rol = obtener_rol_usuario(numero)
#
#             # 1. FLUJO DE NUEVO USUARIO (Onboarding)
#             if not usuario_bd and paso is None:
#                 enviar_mensaje(numero,Mensaje_bienvenida)
#                 actualizar_flujo(numero, "esperando_usuario_tiktok")
#                 return {"status": "ok"}
#
#             # 2. Saludos en cualquier momento
#             if tipo == "text" and texto in ["hola", "buenas", "saludos"]:
#                 if usuario_bd:
#                     enviar_mensaje(numero, f"üëã Hola, bienvenido a la Agencia Prestige.")
#                     enviar_menu_principal(numero, rol)
#                 else:
#                     enviar_mensaje(numero,Mensaje_bienvenida)
#                     actualizar_flujo(numero, "esperando_usuario_tiktok")
#                 return {"status": "ok"}
#
#             # 3. Volver al men√∫ principal
#             if tipo == "text" and texto in ["menu","brillar"]:
#                 usuarios_flujo.pop(numero, None)
#                 enviar_menu_principal(numero, rol)
#                 return {"status": "ok"}
#
#             # 4. Esperando usuario TikTok
#             if paso == "esperando_usuario_tiktok" and tipo == "text":
#                 usuario_tiktok = mensaje["text"]["body"].strip()
#                 aspirante = buscar_aspirante_por_usuario_tiktok(usuario_tiktok)
#                 if aspirante:
#                     nombre = aspirante.get('nickname') or aspirante.get('nombre_real') or '(sin nombre)'
#                     enviar_mensaje(numero, mensaje_confirmar_nombre(nombre))
#                     actualizar_flujo(numero, "confirmando_nombre")
#                     usuarios_temp[numero] = aspirante
#                 else:
#                     enviar_mensaje(numero, "No encontramos ese usuario de TikTok en nuestra plataforma. ¬øPuedes verificarlo?")
#                 return {"status": "ok"}
#
#             # 5. Confirmando nombre
#             if paso == "confirmando_nombre" and tipo == "text":
#                 if texto.strip().lower() in ["si", "correct", "yes", "yeah", "yep", "sip", "sipis","acuerdo"]:
#                     aspirante = usuarios_temp.get(numero)
#                     if aspirante:
#                         actualizar_telefono_aspirante(aspirante["id"], numero)
#
#                     # üîí Mensaje legal + inicio en un solo bot√≥n
#                     enviar_botones(
#                         numero,
#                         texto=mensaje_proteccion_datos(),
#                         botones=[
#                             {"id": "iniciar_encuesta", "title": "‚úÖ S√≠, quiero iniciar"}])
#                     actualizar_flujo(numero, "esperando_inicio_encuesta")
#                 else:
#                     enviar_mensaje(numero, "Por favor escribe el nombre correcto o verifica tu usuario de TikTok.")
#                 return {"status": "ok"}
#
#             # 6. Esperando inicio encuesta (bot√≥n √∫nico)
#             if paso == "esperando_inicio_encuesta":
#                 if tipo == "interactive":
#                     interactive = mensaje.get("interactive", {})
#                     if interactive.get("type") == "button_reply":
#                         button_id = interactive.get("button_reply", {}).get("id")
#                         if button_id == "iniciar_encuesta":
#                             actualizar_flujo(numero, 1)
#                             enviar_pregunta(numero, 1)
#                             return {"status": "ok"}
#                 # fallback si no usa botones
#                 enviar_mensaje(numero, "Por favor usa el bot√≥n para iniciar la encuesta.")
#                 return {"status": "ok"}
#
#             # 7. Asignar rol si usuario existe
#             if usuario_bd and numero not in usuarios_roles:
#                 usuarios_roles[numero] = (usuario_bd["rol"], time.time())
#
#             # 8. Chat libre
#             if paso == "chat_libre":
#                 if tipo == "text":
#                     if texto in ["menu", "brillar"]:
#                         usuarios_flujo.pop(numero, None)
#                         enviar_mensaje(numero, "üîô Volviste al men√∫ inicial.")
#                         enviar_menu_principal(numero, rol)
#                         return {"status": "ok"}
#                     print(f"üí¨ Chat libre de {numero}: {texto}")
#                     guardar_mensaje(numero, texto, tipo="recibido", es_audio=False)
#
#                 elif tipo == "audio":
#                     audio_id = mensaje.get("audio", {}).get("id")
#                     print(f"üé§ Audio recibido de {numero}: {audio_id}")
#                     url_cloudinary = descargar_audio(audio_id, TOKEN)
#                     if url_cloudinary:
#                         guardar_mensaje(numero, url_cloudinary, tipo="recibido", es_audio=True)
#                         enviar_mensaje(numero, "üéß Recibimos tu audio. Un asesor lo revisar√° pronto.")
#                     else:
#                         enviar_mensaje(numero, "‚ö†Ô∏è No se pudo procesar tu audio, int√©ntalo de nuevo.")
#
#                 elif tipo == "interactive":
#                     interactive = mensaje.get("interactive", {})
#                     boton_texto = interactive.get("button_reply", {}).get("title", "")
#                     print(f"üëÜ Bot√≥n en chat libre: {boton_texto}")
#                     guardar_mensaje(numero, boton_texto, tipo="recibido", es_audio=False)
#
#                 return {"status": "ok"}
#
#             # 9. Flujo normal (encuesta)
#             if paso is None and tipo == "interactive":
#                 interactive = mensaje.get("interactive", {})
#                 boton_texto = interactive.get("button_reply", {}).get("title", "").lower()
#                 if boton_texto == "s√≠, continuar":
#                     actualizar_flujo(numero, 1)
#                     enviar_pregunta(numero, 1)
#                     return {"status": "ok"}
#
#             if paso is None and tipo == "text":
#                 if texto in ["4", "chat libre"] and usuarios_roles.get(numero, ("",))[0] == "aspirante":
#                     actualizar_flujo(numero, "chat_libre")
#                     enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     return {"status": "ok"}
#                 if texto in ["7", "chat libre"] and usuarios_roles.get(numero, ("",))[0] == "creador":
#                     actualizar_flujo(numero, "chat_libre")
#                     enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     return {"status": "ok"}
#                 if texto in ["5", "chat libre"] and usuarios_roles.get(numero, ("",))[0] == "admin":
#                     actualizar_flujo(numero, "chat_libre")
#                     enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     return {"status": "ok"}
#
#             # 10. FLUJO DE PREGUNTAS (encuesta)
#             manejar_respuesta(numero, texto)
#
#     except Exception as e:
#         print("‚ùå Error procesando webhook:", e)
#         traceback.print_exc()
#
#     return {"status": "ok"}
#

# @router.post("/webhook")
# async def whatsapp_webhook(request: Request):
#     data = await request.json()
#     print("üì© Webhook recibido:", json.dumps(data, indent=2))
#
#     try:
#         mensajes = data["entry"][0]["changes"][0]["value"].get("messages", [])
#         if not mensajes:
#             return {"status": "ok"}
#
#         for mensaje in mensajes:
#             numero = mensaje["from"]
#             tipo = mensaje.get("type")
#             texto = mensaje.get("text", {}).get("body", "").strip()
#             texto_lower = texto.lower()
#
#             paso = obtener_flujo(numero)  # usa cach√© robusta
#             usuario_bd = buscar_usuario_por_telefono(numero)
#             rol = obtener_rol_usuario(numero)
#
#             print(f"üìç [DEBUG] n√∫mero={numero}, paso={paso}, usuario_bd={bool(usuario_bd)}, texto='{texto}'")
#
#             # --- 1. FLUJO DE NUEVO USUARIO ---
#             if not usuario_bd and paso is None:
#                 enviar_mensaje(numero, Mensaje_bienvenida)
#                 actualizar_flujo(numero, "esperando_usuario_tiktok")
#                 print(f"üü¢ [DEBUG] Flujo inicial asignado: esperando_usuario_tiktok -> {numero}")
#                 return {"status": "ok"}
#
#             # --- 2. SALUDOS EN CUALQUIER MOMENTO ---
#             if tipo == "text" and texto_lower in ["hola", "buenas", "saludos"]:
#                 if usuario_bd:
#                     enviar_mensaje(numero, "üëã Hola, bienvenido a la Agencia Prestige.")
#                     enviar_menu_principal(numero, rol)
#                 else:
#                     enviar_mensaje(numero, Mensaje_bienvenida)
#                     actualizar_flujo(numero, "esperando_usuario_tiktok")
#                 return {"status": "ok"}
#
#             # --- 3. VOLVER AL MEN√ö PRINCIPAL ---
#             if tipo == "text" and texto_lower in ["menu", "brillar"]:
#                 usuarios_flujo.pop(numero, None)
#                 enviar_menu_principal(numero, rol)
#                 return {"status": "ok"}
#
#             # --- 4. ESPERANDO USUARIO TIKTOK ---
#             if paso == "esperando_usuario_tiktok" and tipo == "text":
#                 usuario_tiktok = texto.strip()
#                 aspirante = buscar_aspirante_por_usuario_tiktok(usuario_tiktok)
#                 print(f"üîç [DEBUG] Buscando aspirante TikTok: {usuario_tiktok} -> {bool(aspirante)}")
#
#                 if aspirante:
#                     nombre = aspirante.get("nickname") or aspirante.get("nombre_real") or "(sin nombre)"
#                     enviar_mensaje(numero, mensaje_confirmar_nombre(nombre))
#                     actualizar_flujo(numero, "confirmando_nombre")
#                     usuarios_temp[numero] = aspirante
#                     print(f"üü° [DEBUG] Flujo actualizado a confirmando_nombre -> {numero}")
#                 else:
#                     enviar_mensaje(numero, "No encontramos ese usuario de TikTok en nuestra plataforma. ¬øPuedes verificarlo?")
#                 return {"status": "ok"}
#
#             # --- 5. CONFIRMANDO NOMBRE ---
#             if paso == "confirmando_nombre" and tipo == "text":
#                 if texto_lower in ["si", "s√≠", "correcto", "yes", "ok", "sip", "acuerdo"]:
#                     aspirante = usuarios_temp.get(numero)
#                     if aspirante:
#                         actualizar_telefono_aspirante(aspirante["id"], numero)
#
#                     enviar_botones(
#                         numero,
#                         texto=mensaje_proteccion_datos(),
#                         botones=[{"id": "iniciar_encuesta", "title": "‚úÖ S√≠, quiero iniciar"}],
#                     )
#                     actualizar_flujo(numero, "esperando_inicio_encuesta")
#                     print(f"üü¢ [DEBUG] Flujo actualizado a esperando_inicio_encuesta -> {numero}")
#                 else:
#                     enviar_mensaje(numero, "Por favor escribe el nombre correcto o verifica tu usuario de TikTok.")
#                 return {"status": "ok"}
#
#             # --- 6. ESPERANDO INICIO ENCUESTA ---
#             if paso == "esperando_inicio_encuesta":
#                 if tipo == "interactive":
#                     interactive = mensaje.get("interactive", {})
#                     if interactive.get("type") == "button_reply":
#                         button_id = interactive.get("button_reply", {}).get("id")
#                         if button_id == "iniciar_encuesta":
#                             actualizar_flujo(numero, 1)
#                             enviar_pregunta(numero, 1)
#                             print(f"üü¢ [DEBUG] Encuesta iniciada -> paso=1 para {numero}")
#                             return {"status": "ok"}
#                 enviar_mensaje(numero, "Por favor usa el bot√≥n para iniciar la encuesta.")
#                 return {"status": "ok"}
#
#             # --- 7. ASIGNAR ROL ---
#             if usuario_bd and numero not in usuarios_roles:
#                 usuarios_roles[numero] = (usuario_bd["rol"], time.time())
#
#             # --- 8. CHAT LIBRE ---
#             if paso == "chat_libre":
#                 if tipo == "text":
#                     if texto_lower in ["menu", "brillar"]:
#                         usuarios_flujo.pop(numero, None)
#                         enviar_mensaje(numero, "üîô Volviste al men√∫ inicial.")
#                         enviar_menu_principal(numero, rol)
#                         return {"status": "ok"}
#                     print(f"üí¨ Chat libre de {numero}: {texto}")
#                     guardar_mensaje(numero, texto, tipo="recibido", es_audio=False)
#
#                 elif tipo == "audio":
#                     audio_id = mensaje.get("audio", {}).get("id")
#                     print(f"üé§ Audio recibido de {numero}: {audio_id}")
#                     url_cloudinary = descargar_audio(audio_id, TOKEN)
#                     if url_cloudinary:
#                         guardar_mensaje(numero, url_cloudinary, tipo="recibido", es_audio=True)
#                         enviar_mensaje(numero, "üéß Recibimos tu audio. Un asesor lo revisar√° pronto.")
#                     else:
#                         enviar_mensaje(numero, "‚ö†Ô∏è No se pudo procesar tu audio, int√©ntalo de nuevo.")
#                 return {"status": "ok"}
#
#             # --- 9. FLUJO NORMAL (bot√≥n continuar) ---
#             if paso is None and tipo == "interactive":
#                 interactive = mensaje.get("interactive", {})
#                 boton_texto = interactive.get("button_reply", {}).get("title", "").lower()
#                 if boton_texto == "s√≠, continuar":
#                     actualizar_flujo(numero, 1)
#                     enviar_pregunta(numero, 1)
#                     print(f"üü¢ [DEBUG] Flujo reiniciado con 's√≠, continuar' -> {numero}")
#                     return {"status": "ok"}
#
#             # --- 10. ENTRADA DE TEXTO NORMAL ---
#             if paso is None and tipo == "text":
#                 rol_usuario = usuarios_roles.get(numero, ("",))[0]
#                 if texto_lower in ["4", "chat libre"] and rol_usuario == "aspirante":
#                     actualizar_flujo(numero, "chat_libre")
#                     enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     return {"status": "ok"}
#                 if texto_lower in ["7", "chat libre"] and rol_usuario == "creador":
#                     actualizar_flujo(numero, "chat_libre")
#                     enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     return {"status": "ok"}
#                 if texto_lower in ["5", "chat libre"] and rol_usuario == "admin":
#                     actualizar_flujo(numero, "chat_libre")
#                     enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     return {"status": "ok"}
#
#             # --- 11. FLUJO DE PREGUNTAS (ENCUESTA) ---
#             manejar_respuesta(numero, texto)
#
#     except Exception as e:
#         print("‚ùå Error procesando webhook:", e)
#         traceback.print_exc()
#
#     return {"status": "ok"}

# ------------------------------------------------------------------
# ------------------------------------------------------------------

# def obtener_nombre_usuario(numero: str) -> str:
#     datos = usuarios_flujo.get(numero, {})
#     return datos.get("nombre", None)

# def obtener_nombre_usuario(numero: str) -> str:
#     datos = usuarios_flujo.get(numero, {})
#     assert isinstance(datos, dict), f"usuarios_flujo[{numero}] no es un dict: {type(datos)}"
#     return datos.get("nombre", None)
#
#
# # --- Funci√≥n de inicializaci√≥n segura ---
# def asegurar_flujo(numero):
#     if numero not in usuarios_flujo or not isinstance(usuarios_flujo[numero], dict):
#         usuarios_flujo[numero] = {}



# def manejar_respuesta(numero, texto):
#     texto = texto.strip()
#     texto_normalizado = texto.lower()
#     paso = obtener_flujo(numero)
#     rol = obtener_rol_usuario(numero)
#     flujo = asegurar_flujo(numero)  # üîí Inicializaci√≥n segura
#     nombre = flujo.get("nombre") or obtener_nombre_usuario(numero)
#
#     # --- 1Ô∏è‚É£ SALUDOS INICIALES ---
#     if texto_normalizado in {"hola", "buenas", "saludos"}:
#         usuario_bd = buscar_usuario_por_telefono(numero)
#         if usuario_bd:
#             rol = usuario_bd.get("rol", "aspirante")
#             enviar_mensaje(numero, "üëã Hola, bienvenido a la Agencia.")
#             enviar_menu_principal(numero, rol)
#         else:
#             enviar_mensaje(numero, Mensaje_bienvenida)
#             actualizar_flujo(numero, "esperando_usuario_tiktok")
#         return
#
#     # --- 2Ô∏è‚É£ VOLVER AL MEN√ö PRINCIPAL ---
#     if texto_normalizado in {"menu", "men√∫", "volver", "inicio", "brillar"}:
#         usuarios_flujo.pop(numero, None)
#         enviar_menu_principal(numero, rol)
#         return
#
#     # üö´ CHAT LIBRE NO PROCESA FLUJOS
#     if paso == "chat_libre":
#         return
#
#     # --- 3Ô∏è‚É£ MEN√ö PRINCIPAL POR ROL ---
#     if paso is None:
#         opciones = texto_normalizado
#         match rol:
#             case "aspirante":
#                 match opciones:
#                     case "1" | "actualizar" | "perfil":
#                         actualizar_flujo(numero, 1)
#                         enviar_pregunta(numero, 1)
#                     case "2" | "diagn√≥stico" | "diagnostico":
#                         actualizar_flujo(numero, "diagnostico")
#                         enviar_diagnostico(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case "3" | "requisitos":
#                         actualizar_flujo(numero, "requisitos")
#                         enviar_requisitos(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case "4" | "chat libre":
#                         actualizar_flujo(numero, "chat_libre")
#                         enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     case _:
#                         enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#                 return
#
#             case "creador":
#                 match opciones:
#                     case "1":
#                         actualizar_flujo(numero, 1)
#                         enviar_pregunta(numero, 1)
#                     case "3":
#                         actualizar_flujo(numero, "asesoria")
#                         enviar_mensaje(numero, "üìå Un asesor se pondr√° en contacto contigo pronto.")
#                         usuarios_flujo.pop(numero, None)
#                     case "4":
#                         actualizar_flujo(numero, "recursos")
#                         enviar_recursos_exclusivos(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case "5":
#                         actualizar_flujo(numero, "eventos")
#                         enviar_eventos(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case "6":
#                         actualizar_flujo(numero, "soporte")
#                         enviar_mensaje(numero, "üì© Describe tu problema y el equipo t√©cnico te responder√°.")
#                     case "7" | "chat libre":
#                         actualizar_flujo(numero, "chat_libre")
#                         enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     case "8":
#                         actualizar_flujo(numero, "estadisticas")
#                         enviar_estadisticas(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case "9":
#                         actualizar_flujo(numero, "baja")
#                         solicitar_baja(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case _:
#                         enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#                 return
#
#             case "admin":
#                 match opciones:
#                     case "1":
#                         actualizar_flujo(numero, "panel")
#                         enviar_panel_control(numero)
#                     case "2":
#                         actualizar_flujo(numero, "ver_perfiles")
#                         enviar_perfiles(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case "3":
#                         actualizar_flujo(numero, "comunicado")
#                         enviar_mensaje(numero, "‚úâÔ∏è Escribe el comunicado a enviar a creadores/aspirantes:")
#                     case "4":
#                         actualizar_flujo(numero, "recursos_admin")
#                         gestionar_recursos(numero)
#                         usuarios_flujo.pop(numero, None)
#                     case "5" | "chat libre":
#                         actualizar_flujo(numero, "chat_libre")
#                         enviar_mensaje(numero, "üü¢ Est√°s en chat libre. Puedes escribir o enviar audios.")
#                     case _:
#                         enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#                 return
#
#             case _:
#                 if opciones == "1":
#                     actualizar_flujo(numero, "info")
#                     enviar_info_general(numero)
#                 else:
#                     enviar_mensaje(numero, "Opci√≥n no v√°lida. Escribe 'menu' para ver las opciones.")
#                 return
#
#     # --- 4Ô∏è‚É£ FLUJO DE ENCUESTA ---
#     if isinstance(paso, int):
#         if paso == 1:
#             if len(texto) < 3:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa tu nombre completo (m√≠nimo 3 caracteres).")
#                 return
#             flujo["nombre"] = texto.title().strip()
#             nombre = flujo["nombre"]
#
#         validaciones = {
#             2: lambda t: t.isdigit() and 1 <= int(t) <= 5,
#             3: lambda t: t in {"1", "2", "3", "4"},
#             4: lambda t: t in list(mapa_paises.keys()) + ["20"] or t.lower() in [v.lower() for v in mapa_paises.values()],
#             6: lambda t: t in [str(i) for i in range(1, 10)],
#             7: lambda t: t in [str(i) for i in range(1, 6)],
#             9: lambda t: t in {"1", "2", "3"},
#             10: lambda t: t in {"1", "2", "3", "4"}
#         }
#
#         if paso in validaciones and not validaciones[paso](texto_normalizado):
#             enviar_mensaje(numero, f"‚ö†Ô∏è Ingresa una opci√≥n v√°lida para la pregunta {paso}.")
#             return
#
#         if paso == 5:
#             resultado = validar_aceptar_ciudad(texto)
#             texto = resultado["ciudad"]
#             enviar_mensaje(numero, f"‚úÖ Ciudad reconocida: {texto}")
#
#         if paso == 7:
#             enviar_mensaje(numero, "üé• ¬øTienes experiencia transmitiendo lives en TikTok? Contesta *s√≠* o *no*.")
#             actualizar_flujo(numero, "7b")
#             return
#
#         if paso == 8:
#             try:
#                 meses = int(texto)
#                 if not (0 <= meses <= 999):
#                     raise ValueError
#             except ValueError:
#                 enviar_mensaje(numero, "‚ö†Ô∏è Ingresa un n√∫mero v√°lido de meses (0‚Äì999).")
#                 return
#             enviar_mensaje(numero, mensaje_encuesta_final_parte1(nombre))
#
#         guardar_respuesta(numero, paso, texto)
#         siguiente = paso + 1
#
#         # ‚úÖ Finalizaci√≥n del flujo
#         if siguiente not in preguntas:
#             usuarios_flujo.pop(numero, None)
#             enviar_mensaje(numero, mensaje_encuesta_final(nombre))
#             consolidar_perfil(numero)
#             enviar_mensaje(numero, '‚ú® Para ir al men√∫ principal escribe **"brillar"**')
#             return
#
#         actualizar_flujo(numero, siguiente)
#         texto_pregunta = preguntas[siguiente]
#         if "{nombre}" in texto_pregunta:
#             texto_pregunta = texto_pregunta.format(nombre=nombre)
#         enviar_mensaje(numero, texto_pregunta)
#         return
#
#     # --- 5Ô∏è‚É£ PREGUNTA CONDICIONAL (7b) ---
#     if paso == "7b":
#         if texto_normalizado in {"si", "s√≠", "s"}:
#             enviar_mensaje(numero, preguntas[8])
#             actualizar_flujo(numero, 8)
#         elif texto_normalizado in {"no", "n"}:
#             guardar_respuesta(numero, 8, "0")
#             enviar_mensaje(numero, preguntas[9])
#             actualizar_flujo(numero, 9)
#         else:
#             enviar_mensaje(numero, "Por favor responde solo *s√≠* o *no*.")



# def enviar_menu_principal(numero, rol=None):
#     if rol is None:
#         rol = obtener_rol_usuario(numero)
#
#     if rol == "aspirante":
#         mensaje = (
#             "üëã ¬°Hola! Qu√© alegr√≠a tenerte en la Agencia Prestige.\n\n"
#             "¬øEn qu√© puedo ayudarte hoy?\n"
#             "1Ô∏è‚É£ Actualizar mi informaci√≥n de perfil\n"
#             "2Ô∏è‚É£ Diagn√≥stico y mejoras de mi perfil\n"
#             "3Ô∏è‚É£ Ver requisitos para ingresar a la Agencia\n"
#             "4Ô∏è‚É£ Chat libre con un asesor\n"
#             "Por favor responde con el n√∫mero de la opci√≥n."
#         )
#     elif rol == "creador":
#         mensaje = (
#             "üëã ¬°Hola, creador de la Agencia Prestige!\n\n"
#             "¬øEn qu√© puedo ayudarte hoy?\n"
#             "1Ô∏è‚É£ Actualizar mi informaci√≥n de perfil\n"
#             "3Ô∏è‚É£ Solicitar asesor√≠a personalizada\n"
#             "4Ô∏è‚É£ Acceder a recursos exclusivos\n"
#             "5Ô∏è‚É£ Ver pr√≥ximas actividades/eventos\n"
#             "6Ô∏è‚É£ Solicitar soporte t√©cnico\n"
#             "7Ô∏è‚É£ Chat libre con el equipo\n"
#             "8Ô∏è‚É£ Ver mis estad√≠sticas/resultados\n"
#             "9Ô∏è‚É£ Solicitar baja de la agencia"
#         )
#     elif rol == "admin":
#         mensaje = (
#             "üëã ¬°Hola, administrador  de la Agencia Prestige!\n\n"
#             "¬øEn qu√© puedo ayudarte hoy?\n"
#             "1Ô∏è‚É£ Ver panel de control\n"
#             "2Ô∏è‚É£ Ver todos los perfiles\n"
#             "3Ô∏è‚É£ Enviar comunicado a creadores/aspirantes\n"
#             "4Ô∏è‚É£ Gesti√≥n de recursos\n"
#             "5Ô∏è‚É£ Chat libre con el equipo"
#         )
#     else:
#         mensaje = (
#             "üëã ¬°Hola! Qu√© alegr√≠a tenerte en la Agencia Prestige.\n\n"
#             "¬øEn qu√© puedo ayudarte hoy?\n"
#             "1Ô∏è‚É£ Informaci√≥n general\n"
#             "2Ô∏è‚É£ Chat libre"
#         )
#     enviar_mensaje(numero, mensaje)

# def actualizar_flujo(numero, paso):
#     usuarios_flujo[numero] = (paso, time.time())

# def actualizar_flujo(numero, paso):
#     if numero not in usuarios_flujo or not isinstance(usuarios_flujo[numero], dict):
#         usuarios_flujo[numero] = {}
#     usuarios_flujo[numero]['paso'] = paso
#     usuarios_flujo[numero]['timestamp'] = time.time()
# def actualizar_flujo(numero, paso):
#     usuarios_flujo[numero] = {
#         "paso": paso,
#         "timestamp": time.time()
#     }

# def obtener_flujo(numero):
#     cache = usuarios_flujo.get(numero)
#     if cache and isinstance(cache, tuple) and len(cache) == 2:
#         paso, t = cache
#         if time.time() - t < TTL:
#             return paso
#         else:
#             usuarios_flujo.pop(numero, None)  # üßπ expira por inactividad
#     return None

# def obtener_flujo(numero):
#     cache = usuarios_flujo.get(numero)
#     if cache and isinstance(cache, tuple) and len(cache) == 2:
#         paso, t = cache
#         if time.time() - t < TTL:
#             return paso
#         else:
#             usuarios_flujo.pop(numero, None)  # üßπ expira por inactividad
#     return None


# def obtener_flujo(numero):
#     cache = usuarios_flujo.get(numero)
#     ahora = time.time()
#
#     # üß± Nuevo formato (dict)
#     if isinstance(cache, dict):
#         paso = cache.get("paso")
#         t = cache.get("timestamp", 0)
#         if paso and ahora - t < TTL:
#             return paso
#         usuarios_flujo.pop(numero, None)
#         return None
#
#     # üß© Formato antiguo (tuple)
#     if isinstance(cache, tuple) and len(cache) == 2:
#         paso, t = cache
#         if paso and ahora - t < TTL:
#             return paso
#         usuarios_flujo.pop(numero, None)
#         return None
#
#     return None

# def actualizar_flujo(numero, paso):
#     ahora = time.time()
#
#     # üßπ Limpieza ligera de entradas viejas (TTL global)
#     for k, v in list(usuarios_flujo.items()):
#         if isinstance(v, dict) and ahora - v.get("timestamp", 0) > TTL:
#             usuarios_flujo.pop(k, None)
#
#     # Actualizaci√≥n directa
#     usuarios_flujo[numero] = {"paso": paso, "timestamp": ahora}

# def enviar_diagnostico(numero: str):
#     """Env√≠a el diagn√≥stico de un usuario tomando el campo observaciones de perfil_creador"""
#     try:
#         with psycopg2.connect(INTERNAL_DATABASE_URL) as conn:
#             with conn.cursor() as cur:
#
#                 # 1Ô∏è‚É£ Buscar el creador por su n√∫mero
#                 cur.execute("SELECT id, usuario, nombre_real FROM creadores WHERE whatsapp = %s", (numero,))
#                 creador = cur.fetchone()
#                 if not creador:
#                     print(f"‚ö†Ô∏è No se encontr√≥ creador con whatsapp {numero}")
#                     enviar_mensaje(numero, "No encontramos tu perfil en el sistema. Verifica tu n√∫mero.")
#                     return
#
#                 creador_id, usuario, nombre_real = creador
#
#                 # 2Ô∏è‚É£ Obtener observaciones desde perfil_creador
#                 cur.execute("SELECT mejoras_sugeridas FROM perfil_creador WHERE creador_id = %s", (creador_id,))
#                 fila = cur.fetchone()
#
#         nombre = nombre_real if nombre_real else usuario
#         if not fila or not fila[0]:
#             diagnostico = f"üîé Diagn√≥stico para {nombre}:\nEstamos preparando tu evaluaci√≥n de tu perfil."
#         else:
#             diagnostico = f"üîé Diagn√≥stico para {nombre}:\n\n{fila[0]}"
#
#         # 3Ô∏è‚É£ Enviar el diagn√≥stico
#         enviar_mensaje(numero, diagnostico)
#         print(f"‚úÖ Diagn√≥stico enviado a {numero}")
#
#     except Exception as e:
#         print(f"‚ùå Error al enviar diagn√≥stico a {numero}:", str(e))
#         enviar_mensaje(numero, "Ocurri√≥ un error al generar tu diagn√≥stico. Intenta m√°s tarde.")
