from fastapi import APIRouter, Request
from fastapi.responses import JSONResponse
import os, json
from dotenv import load_dotenv
from enviar_msg_wp import enviar_plantilla_generica, enviar_mensaje_texto_simple
from main import guardar_mensaje
from utils import *
import traceback

import psycopg2

load_dotenv()

# Configuraci√≥n
TOKEN = os.getenv("WHATSAPP_TOKEN")
PHONE_NUMBER_ID = os.getenv("WHATSAPP_PHONE_ID")
DATABASE_URL = os.getenv("EXTERNAL_DATABASE_URL")  # üîπ corregido nombre

router = APIRouter()

# Estado del flujo en memoria
usuarios_flujo = {}    # { numero: paso_actual }
respuestas = {}        # { numero: {campo: valor} }


# ============================
# OPCIONES
# ============================
opciones_plataformas = {
    "1": "YouTube", "2": "Instagram", "3": "Twitch", "4": "Facebook",
    "5": "Twitter/X", "6": "LinkedIn", "7": "TikTok", "8": "Otro"
}

tiposContenido_opciones  = {
    "1": "bailes", "2": "charlas", "3": "gaming", "4": "tutoriales",
    "5": "entretenimiento general", "6": "humor", "7": "m√∫sica en vivo",
    "8": "reacci√≥n a videos", "9": "religi√≥n y espiritualidad",
    "10": "temas sociales", "11": "estudios / tareas", "12": "ventas en vivo",
    "13": "Otro"
}

interesesOpciones_opciones = {
    "1": "Deportes", "2": "Moda", "3": "Maquillaje", "4": "Cocina", "5": "Fitness",
    "6": "M√∫sica", "7": "Bailes", "8": "Gaming", "9": "Lectura", "10": "Salud mental",
    "11": "Comedia", "12": "Religi√≥n", "13": "Pol√≠tica", "14": "Emprendimiento",
    "15": "Viajes", "16": "Idiomas", "17": "Educaci√≥n", "18": "Noticias",
    "19": "Relaciones", "20": "Arte", "21": "Tecnolog√≠a", "22": "Fotograf√≠a", "23": "Otro"
}

mapa_paises = {
    "1": "argentina",
    "2": "bolivia",
    "3": "chile",
    "4": "colombia",
    "5": "costarica",
    "6": "cuba",
    "7": "ecuador",
    "8": "elsalvador",
    "9": "guatemala",
    "10": "honduras",
    "11": "mexico",
    "12": "nicaragua",
    "13": "panama",
    "14": "paraguay",
    "15": "peru",
    "16": "puertorico",
    "17": "dominicana",
    "18": "uruguay",
    "19": "venezuela"
}

# === Diccionario de ciudades por pa√≠s (Latinoam√©rica) ===
ciudades_por_pais = {
    "argentina": ["Buenos Aires", "C√≥rdoba", "Rosario", "Mendoza", "La Plata",
                  "San Miguel de Tucum√°n", "Mar del Plata", "Salta", "Santa Fe", "San Juan"],
    "bolivia": ["La Paz", "Santa Cruz de la Sierra", "Cochabamba", "Sucre", "Oruro",
                "Potos√≠", "Tarija", "El Alto", "Trinidad", "Cobija"],
    "chile": ["Santiago", "Valpara√≠so", "Concepci√≥n", "La Serena", "Antofagasta",
              "Temuco", "Rancagua", "Talca", "Arica", "Chill√°n"],
    "colombia": ["Bogot√°", "Medell√≠n", "Cali", "Barranquilla", "Cartagena",
                 "Bucaramanga", "Pereira", "Santa Marta", "Ibagu√©", "C√∫cuta"],
    "costarica": ["San Jos√©", "Alajuela", "Cartago", "Heredia", "Liberia",
                  "Puntarenas", "Lim√≥n", "San Carlos", "Desamparados", "San Ram√≥n"],
    "cuba": ["La Habana", "Santiago de Cuba", "Camag√ºey", "Holgu√≠n", "Guant√°namo",
             "Santa Clara", "Bayamo", "Pinar del R√≠o", "Cienfuegos", "Matanzas"],
    "ecuador": ["Quito", "Guayaquil", "Cuenca", "Santo Domingo", "Machala",
                "Manta", "Portoviejo", "Ambato", "Riobamba", "Esmeraldas"],
    "elsalvador": ["San Salvador", "Santa Ana", "San Miguel", "Soyapango", "Mejicanos",
                   "Santa Tecla", "Apopa", "Delgado", "Usulut√°n", "Sonsonate"],
    "guatemala": ["Ciudad de Guatemala", "Mixco", "Villa Nueva", "Quetzaltenango",
                  "Escuintla", "San Juan Sacatep√©quez", "Villa Canales", "Chinautla",
                  "Chimaltenango", "Amatitl√°n"],
    "honduras": ["Tegucigalpa", "San Pedro Sula", "Choloma", "La Ceiba", "El Progreso",
                 "Comayagua", "Puerto Cort√©s", "Choluteca", "Danl√≠", "Juticalpa"],
    "mexico": ["Ciudad de M√©xico", "Guadalajara", "Monterrey", "Puebla", "Tijuana",
               "Le√≥n", "Ju√°rez", "Torre√≥n", "Quer√©taro", "M√©rida"],
    "nicaragua": ["Managua", "Le√≥n", "Masaya", "Chinandega", "Matagalpa",
                  "Estel√≠", "Granada", "Jinotega", "Bluefields", "Carazo"],
    "panama": ["Ciudad de Panam√°", "San Miguelito", "Col√≥n", "David", "La Chorrera",
               "Santiago", "Chitr√©", "Penonom√©", "Aguadulce", "Arraij√°n"],
    "paraguay": ["Asunci√≥n", "Ciudad del Este", "Encarnaci√≥n", "San Lorenzo", "Luque",
                 "Capiat√°", "Fernando de la Mora", "Lambar√©", "Mariano Roque Alonso", "Itaugu√°"],
    "peru": ["Lima", "Arequipa", "Trujillo", "Chiclayo", "Piura",
             "Iquitos", "Cusco", "Chimbote", "Huancayo", "Tacna"],
    "puertorico": ["San Juan", "Bayam√≥n", "Carolina", "Ponce", "Caguas",
                   "Guaynabo", "Mayag√ºez", "Trujillo Alto", "Arecibo", "Fajardo"],
    "dominicana": ["Santo Domingo", "Santiago de los Caballeros", "La Romana",
                   "San Pedro de Macor√≠s", "San Francisco de Macor√≠s", "Puerto Plata",
                   "La Vega", "Hig√ºey", "Moca", "Bonao"],
    "uruguay": ["Montevideo", "Salto", "Paysand√∫", "Las Piedras", "Rivera",
                "Maldonado", "Tacuaremb√≥", "Melo", "Mercedes", "Artigas"],
    "venezuela": ["Caracas", "Maracaibo", "Valencia", "Barquisimeto", "Maracay",
                  "Ciudad Guayana", "San Crist√≥bal", "Matur√≠n", "Ciudad Bol√≠var", "Cuman√°"]
}

# ============================
# PREGUNTAS
# ============================
preguntas = {
    1: "üìå ¬øCu√°l es tu nombre completo?",
    2: "üìå ¬øCu√°l es tu edad?",
    3: "üìå G√©nero:\n"
       "1Ô∏è‚É£ Masculino\n"
       "2Ô∏è‚É£ Femenino\n"
       "3Ô∏è‚É£ Otro\n"
       "4Ô∏è‚É£ Prefiero no decir",
    4: "üìå Pa√≠s (elige de la lista o escribe el tuyo si no aparece):\n"
       "1Ô∏è‚É£ Argentina\n"
       "2Ô∏è‚É£ Bolivia\n"
       "3Ô∏è‚É£ Chile\n"
       "4Ô∏è‚É£ Colombia\n"
       "5Ô∏è‚É£ Costa Rica\n"
       "6Ô∏è‚É£ Cuba\n"
       "7Ô∏è‚É£ Ecuador\n"
       "8Ô∏è‚É£ El Salvador\n"
       "9Ô∏è‚É£ Guatemala\n"
       "üîü Honduras\n"
       "1Ô∏è‚É£1Ô∏è‚É£ M√©xico\n"
       "1Ô∏è‚É£2Ô∏è‚É£ Nicaragua\n"
       "1Ô∏è‚É£3Ô∏è‚É£ Panam√°\n"
       "1Ô∏è‚É£4Ô∏è‚É£ Paraguay\n"
       "1Ô∏è‚É£5Ô∏è‚É£ Per√∫\n"
       "1Ô∏è‚É£6Ô∏è‚É£ Puerto Rico\n"
       "1Ô∏è‚É£7Ô∏è‚É£ Rep√∫blica Dominicana\n"
       "1Ô∏è‚É£8Ô∏è‚É£ Uruguay\n"
       "1Ô∏è‚É£9Ô∏è‚É£ Venezuela\n"
       "2Ô∏è‚É£0Ô∏è‚É£ Otro (escribe tu pa√≠s)",
    5: "üìå Ciudad principal (escr√≠bela en texto)",
    6: "üìå Nivel de estudios:\n"
       "1Ô∏è‚É£ Ninguno\n"
       "2Ô∏è‚É£ Primaria completa\n"
       "3Ô∏è‚É£ Secundaria completa\n"
       "4Ô∏è‚É£ T√©cnico\n"
       "5Ô∏è‚É£ Universitario\n"
       "6Ô∏è‚É£ Posgrado\n"
       "7Ô∏è‚É£ Otro",
    7: "üìå Idioma principal:\n"
       "1Ô∏è‚É£ Espa√±ol\n"
       "2Ô∏è‚É£ Ingl√©s\n"
       "3Ô∏è‚É£ Portugu√©s\n"
       "4Ô∏è‚É£ Otro",
    8: "üìå Actividad actual:\n"
       "1Ô∏è‚É£ Estudia tiempo completo\n"
       "2Ô∏è‚É£ Trabaja medio tiempo\n"
       "3Ô∏è‚É£ Trabaja tiempo completo\n"
       "4Ô∏è‚É£ Crea contenido a tiempo completo\n"
       "5Ô∏è‚É£ Otro",

    # üîπ H√°bitos
    9: "üìå ¬øCu√°l es tu horario preferido para hacer lives?\n"
       "1Ô∏è‚É£ Ma√±ana (6am‚Äì12pm)\n"
       "2Ô∏è‚É£ Tarde (12pm‚Äì6pm)\n"
       "3Ô∏è‚É£ Noche (6pm‚Äì12am)\n"
       "4Ô∏è‚É£ Madrugada (12am‚Äì6am)\n"
       "5Ô∏è‚É£ Variable\n"
       "6Ô∏è‚É£ Otro",
    10: "üìå ¬øCu√°l es tu intenci√≥n principal en la plataforma?\n"
        "1Ô∏è‚É£ Trabajo principal\n"
        "2Ô∏è‚É£ Trabajo secundario\n"
        "3Ô∏è‚É£ No estoy seguro",
    11: "üìå ¬øCu√°ntos lives haces por semana?",
    12: "üìå ¬øCu√°ntas horas a la semana tienes disponibles para crear contenido?",

    # üîπ Experiencia en plataformas
    13: "üìå ¬øEn qu√© plataformas tienes experiencia como creador de contenido?\n"
        "Responde con los n√∫meros separados por coma.\n\n"
        "1Ô∏è‚É£ YouTube\n"
        "2Ô∏è‚É£ Instagram\n"
        "3Ô∏è‚É£ Twitch\n"
        "4Ô∏è‚É£ Facebook\n"
        "5Ô∏è‚É£ Twitter/X\n"
        "6Ô∏è‚É£ LinkedIn\n"
        "7Ô∏è‚É£ TikTok\n"
        "8Ô∏è‚É£ Otro",
    14: "üìå Indica tu experiencia en A√ëOS para cada plataforma seleccionada.\n"
        "Responde en el formato: Plataforma=A√±os.\n\n"
        "Ejemplo: YouTube=2, TikTok=1, Otro=Kick=0.5",

    # üîπ Tipo de contenido
    15: "üìå ¬øQu√© tipo de contenido sueles crear?\n"
        "Responde con los n√∫meros correspondientes (puedes elegir varios separados por coma).\n\n"
        "1Ô∏è‚É£ Bailes\n"
        "2Ô∏è‚É£ Charlas\n"
        "3Ô∏è‚É£ Gaming\n"
        "4Ô∏è‚É£ Tutoriales\n"
        "5Ô∏è‚É£ Entretenimiento general\n"
        "6Ô∏è‚É£ Humor\n"
        "7Ô∏è‚É£ M√∫sica en vivo\n"
        "8Ô∏è‚É£ Reacci√≥n a videos\n"
        "9Ô∏è‚É£ Religi√≥n y espiritualidad\n"
        "üîü Temas sociales\n"
        "1Ô∏è‚É£1Ô∏è‚É£ Estudios / tareas\n"
        "1Ô∏è‚É£2Ô∏è‚É£ Ventas en vivo\n"
        "1Ô∏è‚É£3Ô∏è‚É£ Otro",

    # üîπ Intereses
    16: "üìå ¬øCu√°les son tus intereses principales?\n"
        "Responde con los n√∫meros separados por coma.\n\n"
        "1Ô∏è‚É£ Deportes\n"
        "2Ô∏è‚É£ Moda\n"
        "3Ô∏è‚É£ Maquillaje\n"
        "4Ô∏è‚É£ Cocina\n"
        "5Ô∏è‚É£ Fitness\n"
        "6Ô∏è‚É£ M√∫sica\n"
        "7Ô∏è‚É£ Bailes\n"
        "8Ô∏è‚É£ Gaming\n"
        "9Ô∏è‚É£ Lectura\n"
        "1Ô∏è‚É£0Ô∏è‚É£ Salud mental\n"
        "1Ô∏è‚É£1Ô∏è‚É£ Comedia\n"
        "1Ô∏è‚É£2Ô∏è‚É£ Religi√≥n\n"
        "1Ô∏è‚É£3Ô∏è‚É£ Pol√≠tica\n"
        "1Ô∏è‚É£4Ô∏è‚É£ Emprendimiento\n"
        "1Ô∏è‚É£5Ô∏è‚É£ Viajes\n"
        "1Ô∏è‚É£6Ô∏è‚É£ Idiomas\n"
        "1Ô∏è‚É£7Ô∏è‚É£ Educaci√≥n\n"
        "1Ô∏è‚É£8Ô∏è‚É£ Noticias\n"
        "1Ô∏è‚É£9Ô∏è‚É£ Relaciones\n"
        "2Ô∏è‚É£0Ô∏è‚É£ Arte\n"
        "2Ô∏è‚É£1Ô∏è‚É£ Tecnolog√≠a\n"
        "2Ô∏è‚É£2Ô∏è‚É£ Fotograf√≠a\n"
        "2Ô∏è‚É£3Ô∏è‚É£ Otro"
}

# ============================
# VALIDACIONES
# ============================
def validar_opciones_multiples(texto, opciones_validas):
    # Permitir separadores por coma, punto y coma, espacio
    import re
    items = [x.strip() for x in re.split(r"[,\s;]+", texto) if x.strip()]
    if not items:
        return None
    # Validar cada √≠tem
    seleccion = []
    for item in items:
        if item in opciones_validas:
            if item not in seleccion:  # evita duplicados
                seleccion.append(item)
        else:
            return None  # Si alguna opci√≥n no es v√°lida, rechaza todo
    return seleccion if seleccion else None

# ============================
# ENVIAR PREGUNTAS
# ============================
def enviar_pregunta(numero: str, paso: int):
    texto = preguntas[paso]
    return enviar_mensaje(numero, texto)

def enviar_mensaje(numero: str, texto: str):
    return enviar_mensaje_texto_simple(
        token=TOKEN,
        numero_id=PHONE_NUMBER_ID,
        telefono_destino=numero,
        texto=texto
    )

miembros_agencia = [
    {"telefono": "+573001234567", "nombre": "Pedro", "rol": "miembro"},
    {"telefono": "+5491133344455", "nombre": "Luc√≠a", "rol": "miembro"},
    {"telefono": "+34666111222", "nombre": "Carlos", "rol": "miembro"},
]
admins = [
    {"telefono": "+573005551234", "nombre": "Admin Juan"},
    {"telefono": "+5491177788899", "nombre": "Admin Paula"},
    {"telefono": "+34666111223", "nombre": "Admin Sergio"}
]
def obtener_rol_usuario(numero):
    # Ejemplo: consulta a base de datos
    # Retorna: 'aspirante', 'miembro', 'admin', etc.
    # Aqu√≠ s√≥lo para ejemplo:

    if numero in miembros_agencia:
        return "miembro"
    elif numero in admins:
        return "admin"
    else:
        return "aspirante"




def enviar_menu_principal(numero):
    rol = obtener_rol_usuario(numero)

    if rol == "aspirante":
        mensaje = (
            "üëã ¬°Hola, bienvenido a la Agencia!\n"
            "¬øQu√© deseas hacer hoy?\n"
            "1Ô∏è‚É£ Actualizar mi informaci√≥n de perfil\n"
            "2Ô∏è‚É£ Diagn√≥stico y mejoras de mi perfil\n"
            "3Ô∏è‚É£ Ver requisitos para ingresar a la Agencia\n"
            "4Ô∏è‚É£ Chat libre con un asesor\n"
            "Por favor responde con el n√∫mero de la opci√≥n."
        )
    elif rol == "miembro":
        mensaje = (
            "üëã ¬°Hola, miembro de la Agencia!\n"
            "¬øQu√© deseas hacer hoy?\n"
            "1Ô∏è‚É£ Actualizar mi informaci√≥n de perfil\n"
            "3Ô∏è‚É£ Solicitar asesor√≠a personalizada\n"
            "4Ô∏è‚É£ Acceder a recursos exclusivos\n"
            "5Ô∏è‚É£ Ver pr√≥ximas actividades/eventos\n"
            "6Ô∏è‚É£ Solicitar soporte t√©cnico\n"
            "7Ô∏è‚É£ Chat libre con el equipo\n"
            "8Ô∏è‚É£ Ver mis estad√≠sticas/resultados\n"
            "9Ô∏è‚É£ Solicitar baja de la agencia"
        )
    elif rol == "admin":
        mensaje = (
            "üëã ¬°Hola, administrador!\n"
            "¬øQu√© deseas hacer hoy?\n"
            "1Ô∏è‚É£ Ver panel de control\n"
            "2Ô∏è‚É£ Ver todos los perfiles\n"
            "3Ô∏è‚É£ Enviar comunicado a miembros/aspirantes\n"
            "4Ô∏è‚É£ Gesti√≥n de recursos\n"
            "5Ô∏è‚É£ Chat libre con el equipo"
        )
    else:
        mensaje = (
            "üëã ¬°Hola! ¬øQu√© deseas hacer hoy?\n"
            "1Ô∏è‚É£ Informaci√≥n general\n"
            "2Ô∏è‚É£ Chat libre"
        )
    enviar_mensaje(numero, mensaje)

# ============================
# MANEJO RESPUESTAS
# ============================
def manejar_respuesta(numero, texto):
    paso = usuarios_flujo.get(numero)

    # --- MEN√ö PRINCIPAL SEG√öN ROL ---
    if paso is None:
        rol = obtener_rol_usuario(numero)

        if rol == "aspirante":
            if texto in ["1", "actualizar", "perfil"]:
                usuarios_flujo[numero] = 1
                enviar_pregunta(numero, 1)
                return
            elif texto in ["2", "diagn√≥stico", "diagnostico"]:
                usuarios_flujo[numero] = "diagnostico"
                enviar_diagnostico(numero)
                return
            elif texto in ["3", "requisitos"]:
                usuarios_flujo[numero] = "requisitos"
                enviar_requisitos(numero)
                return
            elif texto in ["4", "chat", "asesor"]:
                usuarios_flujo[numero] = "chat_libre"
                enviar_mensaje(numero, "Est√°s en chat libre. Escribe tu consulta y un asesor te responder√° pronto.")
                return
            else:
                enviar_menu_principal(numero)
                return

        elif rol == "miembro":
            if texto == "1":
                usuarios_flujo[numero] = 1
                enviar_pregunta(numero, 1)
                return
            elif texto == "3":
                usuarios_flujo[numero] = "asesoria"
                enviar_mensaje(numero, "üìå Un asesor se pondr√° en contacto contigo pronto.")
                return
            elif texto == "4":
                usuarios_flujo[numero] = "recursos"
                enviar_recursos_exclusivos(numero)
                return
            elif texto == "5":
                usuarios_flujo[numero] = "eventos"
                enviar_eventos(numero)
                return
            elif texto == "6":
                usuarios_flujo[numero] = "soporte"
                enviar_mensaje(numero, "üì© Describe tu problema y el equipo t√©cnico te responder√°.")
                return
            elif texto == "7":
                usuarios_flujo[numero] = "chat_libre"
                enviar_mensaje(numero, "Est√°s en chat libre con el equipo.")
                return
            elif texto == "8":
                usuarios_flujo[numero] = "estadisticas"
                enviar_estadisticas(numero)
                return
            elif texto == "9":
                usuarios_flujo[numero] = "baja"
                solicitar_baja(numero)
                return
            else:
                enviar_menu_principal(numero)
                return

        elif rol == "admin":
            if texto == "1":
                usuarios_flujo[numero] = "panel"
                enviar_panel_control(numero)
                return
            elif texto == "2":
                usuarios_flujo[numero] = "ver_perfiles"
                enviar_perfiles(numero)
                return
            elif texto == "3":
                usuarios_flujo[numero] = "comunicado"
                enviar_mensaje(numero, "‚úâÔ∏è Escribe el comunicado a enviar a miembros/aspirantes:")
                return
            elif texto == "4":
                usuarios_flujo[numero] = "recursos_admin"
                gestionar_recursos(numero)
                return
            elif texto == "5":
                usuarios_flujo[numero] = "chat_libre"
                enviar_mensaje(numero, "Est√°s en chat libre con el equipo.")
                return
            else:
                enviar_menu_principal(numero)
                return

        else:  # Rol desconocido -> men√∫ b√°sico
            if texto == "1":
                usuarios_flujo[numero] = "info"
                enviar_info_general(numero)
                return
            elif texto == "2":
                usuarios_flujo[numero] = "chat_libre"
                enviar_mensaje(numero, "Est√°s en chat libre.")
                return
            else:
                enviar_menu_principal(numero)
                return

    # --- FLUJOS ESPECIALES ---

    # # Selecci√≥n ciudad principal
    # if paso == 5:
    #     ciudad_seleccionada = texto.strip()
    #     ciudades_mostradas = respuestas.setdefault(numero, {}).get("ciudades_mostradas")
    #
    #     if ciudades_mostradas:
    #         if ciudad_seleccionada.isdigit():
    #             idx = int(ciudad_seleccionada) - 1
    #             if 0 <= idx < len(ciudades_mostradas):
    #                 ciudad = ciudades_mostradas[idx]
    #                 respuestas[numero]["ciudad"] = ciudad
    #                 guardar_respuesta(numero, 5, ciudad)
    #                 usuarios_flujo[numero] += 1
    #                 enviar_pregunta(numero, usuarios_flujo[numero])
    #                 return
    #             elif idx == len(ciudades_mostradas):
    #                 usuarios_flujo[numero] = "ciudad_otro"
    #                 enviar_mensaje(numero, "Por favor, escribe tu ciudad principal:")
    #                 return
    #         enviar_mensaje(numero, "Por favor elige una opci√≥n v√°lida (ejemplo: 1, 2 ... o el n√∫mero de 'Otra').")
    #         return
    #
    #     # Si no hab√≠a ciudades guardadas
    #     pais_num = respuestas.setdefault(numero, {}).get(4)
    #     clave_pais = mapa_paises.get(str(pais_num))
    #     ciudades = ciudades_por_pais.get(clave_pais)
    #     if ciudades:
    #         opciones = "\n".join([f"{i+1}. {c}" for i, c in enumerate(ciudades)])
    #         opciones += f"\n{len(ciudades)+1}. Otra (especifica)"
    #         respuestas[numero]["ciudades_mostradas"] = ciudades
    #         enviar_mensaje(numero, f"üìå Elige tu ciudad principal:\n{opciones}")
    #     else:
    #         usuarios_flujo[numero] = "ciudad_otro"
    #         enviar_mensaje(numero, "Por favor, escribe tu ciudad principal:")
    #     return
    #
    # elif paso == "ciudad_otro":
    #     respuestas[numero]["ciudad"] = texto.strip()
    #     guardar_respuesta(numero, 5, texto.strip())
    #     usuarios_flujo[numero] = 6
    #     enviar_pregunta(numero, 6)
    #     return

    # # Plataformas (selecci√≥n m√∫ltiple)
    # if paso == 13:
    #     seleccion = validar_opciones_multiples(texto, opciones_plataformas)
    #     if not seleccion:
    #         enviar_mensaje(numero, "‚ùå Respuesta inv√°lida. Ejemplo v√°lido: 1,3,5")
    #         return
    #     respuestas.setdefault(numero, {})["plataformas"] = seleccion
    #     if "8" in seleccion:
    #         usuarios_flujo[numero] = "plataforma_otro_nombre"
    #         enviar_mensaje(numero, "Indica el nombre de la otra plataforma:")
    #     else:
    #         usuarios_flujo[numero] = 14
    #         enviar_pregunta(numero, 14)
    #     return
    #
    # elif paso == "plataforma_otro_nombre":
    #     respuestas[numero]["plataforma_otro"] = texto
    #     usuarios_flujo[numero] = "plataforma_otro_experiencia"
    #     enviar_mensaje(numero, f"¬øCu√°ntos a√±os de experiencia tienes en {texto}?")
    #     return
    #
    # elif paso == "plataforma_otro_experiencia":
    #     if not texto.isdigit():
    #         enviar_mensaje(numero, "Por favor ingresa solo el n√∫mero de a√±os (ejemplo: 2)")
    #         return
    #     respuestas[numero]["plataforma_otro_experiencia"] = int(texto)
    #     usuarios_flujo[numero] = 14
    #     enviar_pregunta(numero, 14)
    #     return

    # Cuando selecciona plataformas (paso 13)
    if paso == 13:
        seleccion = validar_opciones_multiples(texto, opciones_plataformas)
        if not seleccion:
            enviar_mensaje(numero, "‚ùå Respuesta inv√°lida. Ejemplo v√°lido: 1,3,5")
            return
        respuestas.setdefault(numero, {})["plataformas"] = seleccion
        usuarios_flujo[numero] = ("experiencia_plataforma", 0)  # 0: primer √≠ndice de plataforma
        plataforma_actual = opciones_plataformas[int(seleccion[0]) - 1]
        enviar_mensaje(numero, f"¬øCu√°ntos a√±os de experiencia tienes en {plataforma_actual}?")
        return

    # Cuando est√° preguntando experiencia por plataforma
    if isinstance(paso, tuple) and paso[0] == "experiencia_plataforma":
        idx = paso[1]
        seleccionadas = respuestas[numero]["plataformas"]
        plataforma_actual = opciones_plataformas[int(seleccionadas[idx]) - 1]
        # Validar y guardar la respuesta
        try:
            a√±os = float(texto.replace(",", "."))
        except Exception:
            enviar_mensaje(numero, "Por favor ingresa solo el n√∫mero de a√±os (ejemplo: 2 o 0.5)")
            return
        if "experiencia_por_plataforma" not in respuestas[numero]:
            respuestas[numero]["experiencia_por_plataforma"] = {}
        respuestas[numero]["experiencia_por_plataforma"][plataforma_actual] = a√±os
        if idx + 1 < len(seleccionadas):
            usuarios_flujo[numero] = ("experiencia_plataforma", idx + 1)
            plataforma_actual = opciones_plataformas[int(seleccionadas[idx + 1]) - 1]
            enviar_mensaje(numero, f"¬øCu√°ntos a√±os de experiencia tienes en {plataforma_actual}?")
        else:
            usuarios_flujo[numero] = 14
            enviar_pregunta(numero, 14)
        return

    # Tipos de contenido
    if paso == 15:
        seleccion = validar_opciones_multiples(texto, tiposContenido_opciones)
        if not seleccion:
            enviar_mensaje(numero, "‚ùå Respuesta inv√°lida. Ejemplo v√°lido: 1,4,7")
            return
        respuestas.setdefault(numero, {})["tipos_contenido"] = seleccion
        guardar_respuesta(numero, 15, seleccion)  # <--- GUARDA LA RESPUESTA
        if "13" in seleccion:
            usuarios_flujo[numero] = "contenido_otro_nombre"
            enviar_mensaje(numero, "Indica el tipo de contenido adicional:")
        else:
            usuarios_flujo[numero] = 16
            enviar_pregunta(numero, 16)
        return

    elif paso == "contenido_otro_nombre":
        respuestas[numero]["contenido_otro"] = texto
        guardar_respuesta(numero, "contenido_otro_nombre", texto)  # <--- GUARDA
        usuarios_flujo[numero] = 16
        enviar_pregunta(numero, 16)
        return

    # Intereses
    if paso == 16:
        seleccion = validar_opciones_multiples(texto, interesesOpciones_opciones)
        if not seleccion:
            enviar_mensaje(numero, "‚ùå Respuesta inv√°lida. Ejemplo v√°lido: 2,8,12")
            return
        respuestas.setdefault(numero, {})["intereses"] = seleccion
        guardar_respuesta(numero, 16, seleccion)  # <--- GUARDA LA RESPUESTA
        if "23" in seleccion:
            usuarios_flujo[numero] = "interes_otro_nombre"
            enviar_mensaje(numero, "Indica el inter√©s adicional:")
        else:
            usuarios_flujo[numero] = 17
            enviar_mensaje(numero, "‚úÖ Gracias, completaste todas las preguntas.")
            consolidar_perfil(numero)
        return

    elif paso == "interes_otro_nombre":
        respuestas[numero]["interes_otro"] = texto
        guardar_respuesta(numero, "interes_otro_nombre", texto)  # <--- GUARDA
        usuarios_flujo[numero] = 17
        enviar_mensaje(numero, "‚úÖ Gracias, completaste todas las preguntas.")
        consolidar_perfil(numero)
        return

    # Validaci√≥n de edad
    if paso == 2:
        try:
            edad = int(texto)
            if not (0 < edad < 120):
                raise ValueError
        except Exception:
            enviar_mensaje(numero, "‚ö†Ô∏è Por favor, ingresa una edad v√°lida (n√∫mero entre 1 y 119).")
            return

    # Guardar respuesta y avanzar
    guardar_respuesta(numero, paso, texto)

    if isinstance(paso, int) and paso < len(preguntas):
        usuarios_flujo[numero] += 1
        enviar_pregunta(numero, usuarios_flujo[numero])
    else:
        del usuarios_flujo[numero]
        enviar_mensaje(numero, "‚úÖ Gracias, completaste todas las preguntas.")
        consolidar_perfil(numero)
        enviar_menu_principal(numero)  # <-- vuelve al men√∫ seg√∫n rol

# ============================
# MANEJO RESPUESTAS
# ============================
# def manejar_respuesta(numero, texto):
#     paso = usuarios_flujo.get(numero)
#
#     # Si el usuario no tiene flujo asignado, muestra opciones principales
#     if paso is None:
#         if texto in ["1", "actualizar", "actualizar informaci√≥n", "perfil"]:
#             usuarios_flujo[numero] = 1  # Empieza el flujo de preguntas
#             enviar_pregunta(numero, 1)
#             return
#
#         elif texto in ["2", "diagn√≥stico", "diagnostico"]:
#             usuarios_flujo[numero] = "diagnostico"
#             enviar_diagnostico(numero)  # funci√≥n que analiza y env√≠a el diagn√≥stico
#             return
#
#         elif texto in ["3", "requisitos"]:
#             usuarios_flujo[numero] = "requisitos"
#             enviar_requisitos(numero)  # funci√≥n que env√≠a informaci√≥n de requisitos
#             return
#
#         elif texto in ["4", "chat", "asesor"]:
#             usuarios_flujo[numero] = "chat_libre"
#             enviar_mensaje(numero, "Est√°s en chat libre. Escribe tu consulta y un asesor te responder√° pronto.")
#             return
#
#         else:
#             enviar_mensaje(numero, """
#     üëã ¬°Hola! ¬øQu√© deseas hacer hoy?
#     1Ô∏è‚É£ Actualizar informaci√≥n de mi perfil
#     2Ô∏è‚É£ Diagn√≥stico y mejoras de mi perfil
#     3Ô∏è‚É£ Ver requisitos para ingresar a la Agencia
#     4Ô∏è‚É£ Chat libre con un asesor
#     Responde con el n√∫mero de la opci√≥n.
#     """)
#             return
#
#     # --- PASO ESPECIAL: Selecci√≥n ciudad principal seg√∫n pa√≠s ---
#     if paso == 5:
#         # Si ya mostramos opciones, validamos la respuesta a la ciudad
#         ciudad_seleccionada = texto.strip()
#         ciudades_mostradas = respuestas.setdefault(numero, {}).get("ciudades_mostradas")
#
#         if ciudades_mostradas:
#             # El usuario debe responder con n√∫mero v√°lido o "otra"
#             if ciudad_seleccionada.isdigit():
#                 idx = int(ciudad_seleccionada) - 1
#                 if idx >= 0 and idx < len(ciudades_mostradas):
#                     ciudad = ciudades_mostradas[idx]
#                     respuestas[numero]["ciudad"] = ciudad
#                     guardar_respuesta(numero, 5, ciudad)
#                     usuarios_flujo[numero] += 1
#                     enviar_pregunta(numero, usuarios_flujo[numero])
#                     return
#                 elif idx == len(ciudades_mostradas):
#                     # Eligi√≥ "Otra"
#                     usuarios_flujo[numero] = "ciudad_otro"
#                     enviar_mensaje(numero, "Por favor, escribe tu ciudad principal:")
#                     return
#             # Si no v√°lido, p√≠delo de nuevo
#             enviar_mensaje(numero, "Por favor elige una opci√≥n v√°lida (ejemplo: 1, 2 ... o el n√∫mero de 'Otra').")
#             return
#
#         # Si no hay ciudades guardadas, es la primera vez que llega a este paso
#         pais_num = respuestas.setdefault(numero, {}).get(4)
#         clave_pais = mapa_paises.get(str(pais_num))
#         ciudades = ciudades_por_pais.get(clave_pais)
#         if ciudades:
#             # Mostrar opciones y guardar para validarlas luego
#             opciones = "\n".join([f"{i+1}. {ciudad}" for i, ciudad in enumerate(ciudades)])
#             opciones += f"\n{len(ciudades)+1}. Otra (especifica)"
#             respuestas[numero]["ciudades_mostradas"] = ciudades
#             enviar_mensaje(numero, f"üìå Elige tu ciudad principal:\n{opciones}")
#             return
#         else:
#             # Si el pa√≠s no est√° en la lista, pide ciudad en texto libre
#             usuarios_flujo[numero] = "ciudad_otro"
#             enviar_mensaje(numero, "Por favor, escribe tu ciudad principal:")
#             return
#
#     elif paso == "ciudad_otro":
#         # Guarda la ciudad escrita por el usuario
#         respuestas[numero]["ciudad"] = texto.strip()
#         guardar_respuesta(numero, 5, texto.strip())
#         usuarios_flujo[numero] = 6
#         enviar_pregunta(numero, 6)
#         return
#
#     # Plataformas (selecci√≥n m√∫ltiple)
#     if paso == 13:
#         seleccion = validar_opciones_multiples(texto, opciones_plataformas)
#         if not seleccion:
#             enviar_mensaje(numero, "‚ùå Respuesta inv√°lida. Ejemplo v√°lido: 1,3,5")
#             return
#         respuestas.setdefault(numero, {})["plataformas"] = seleccion
#         if "8" in seleccion:  # "Otro"
#             usuarios_flujo[numero] = "plataforma_otro_nombre"
#             enviar_mensaje(numero, "Indica el nombre de la otra plataforma:")
#         else:
#             usuarios_flujo[numero] = 14
#             enviar_pregunta(numero, 14)
#         return
#
#     elif paso == "plataforma_otro_nombre":
#         respuestas[numero]["plataforma_otro"] = texto
#         usuarios_flujo[numero] = "plataforma_otro_experiencia"
#         enviar_mensaje(numero, f"¬øCu√°ntos a√±os de experiencia tienes en {texto}?")
#         return
#
#     elif paso == "plataforma_otro_experiencia":
#         if not texto.isdigit():
#             enviar_mensaje(numero, "Por favor ingresa solo el n√∫mero de a√±os (ejemplo: 2)")
#             return
#         respuestas[numero]["plataforma_otro_experiencia"] = int(texto)
#         usuarios_flujo[numero] = 14
#         enviar_pregunta(numero, 14)
#         return
#
#     # Tipo de contenido (selecci√≥n m√∫ltiple)
#     if paso == 15:
#         seleccion = validar_opciones_multiples(texto, tiposContenido_opciones)
#         if not seleccion:
#             enviar_mensaje(numero, "‚ùå Respuesta inv√°lida. Ejemplo v√°lido: 1,4,7")
#             return
#         respuestas.setdefault(numero, {})["tipos_contenido"] = seleccion
#         if "13" in seleccion:  # "Otro"
#             usuarios_flujo[numero] = "contenido_otro_nombre"
#             enviar_mensaje(numero, "Indica el tipo de contenido adicional:")
#         else:
#             usuarios_flujo[numero] = 16
#             enviar_pregunta(numero, 16)
#         return
#
#     elif paso == "contenido_otro_nombre":
#         respuestas[numero]["contenido_otro"] = texto
#         usuarios_flujo[numero] = 16
#         enviar_pregunta(numero, 16)
#         return
#
#     # Intereses (selecci√≥n m√∫ltiple)
#     if paso == 16:
#         seleccion = validar_opciones_multiples(texto, interesesOpciones_opciones)
#         if not seleccion:
#             enviar_mensaje(numero, "‚ùå Respuesta inv√°lida. Ejemplo v√°lido: 2,8,12")
#             return
#         respuestas.setdefault(numero, {})["intereses"] = seleccion
#         if "23" in seleccion:  # "Otro"
#             usuarios_flujo[numero] = "interes_otro_nombre"
#             enviar_mensaje(numero, "Indica el inter√©s adicional:")
#         else:
#             usuarios_flujo[numero] = 17
#             enviar_mensaje(numero, "‚úÖ Gracias, completaste todas las preguntas.")
#             consolidar_perfil(numero)
#         return
#
#     elif paso == "interes_otro_nombre":
#         respuestas[numero]["interes_otro"] = texto
#         usuarios_flujo[numero] = 17
#         enviar_mensaje(numero, "‚úÖ Gracias, completaste todas las preguntas.")
#         consolidar_perfil(numero)
#         return
#
#     # ----- PASOS GEN√âRICOS -----
#     # Ejemplo: validaci√≥n de edad
#     if paso == 2:
#         try:
#             edad = int(texto)
#             if not (0 < edad < 120):
#                 raise ValueError
#         except Exception:
#             enviar_mensaje(numero, "‚ö†Ô∏è Por favor, ingresa una edad v√°lida (n√∫mero entre 1 y 119).")
#             return
#
#     # Guardar la respuesta
#     guardar_respuesta(numero, paso, texto)
#
#     # Avanzar al siguiente paso (si hay m√°s)
#     if paso < len(preguntas):
#         usuarios_flujo[numero] += 1
#         enviar_pregunta(numero, usuarios_flujo[numero])
#     else:
#         del usuarios_flujo[numero]
#         enviar_mensaje(numero, "‚úÖ Gracias, completaste todas las preguntas.")
#         consolidar_perfil(numero)

@router.post("/enviar_solicitud_informacion")
async def api_enviar_solicitar_informacion(data: dict):
    telefono = data.get("telefono")
    nombre = data.get("nombre", "").strip()

    if not telefono or not nombre:
        return JSONResponse({"error": "Faltan datos (telefono o nombre)"}, status_code=400)

    try:
        plantilla = "solicitar_informacion"
        parametros = [nombre]

        codigo, respuesta_api = enviar_plantilla_generica(
            token=TOKEN,
            phone_number_id=PHONE_NUMBER_ID,
            numero_destino=telefono,
            nombre_plantilla=plantilla,
            codigo_idioma="es_CO",
            parametros=parametros
        )

        guardar_mensaje(
            telefono,
            f"[Plantilla enviada: {plantilla} - {parametros}]",
            tipo="enviado"
        )

        return {
            "status": "ok",
            "mensaje": f"Se envi√≥ la plantilla {plantilla} a {telefono}",
            "codigo_api": codigo,
            "respuesta_api": respuesta_api
        }

    except Exception as e:
        return JSONResponse({"error": str(e)}, status_code=500)


@router.post("/webhook")
async def whatsapp_webhook(request: Request):
    data = await request.json()
    print("üì© Webhook recibido:", json.dumps(data, indent=2))

    try:
        mensajes = data["entry"][0]["changes"][0]["value"].get("messages", [])
        for mensaje in mensajes:
            numero = mensaje["from"]

            # Bot√≥n "continuar"
            if mensaje.get("type") == "button":
                boton_texto = mensaje["button"]["text"]
                if boton_texto.lower() == "s√≠, continuar":  # puedes comparar por texto
                    usuarios_flujo[numero] = 1  # iniciamos en paso 1
                    enviar_pregunta(numero, 1)

            # Mensaje de texto
            elif "text" in mensaje:
                texto = mensaje["text"]["body"].strip().lower()
                print(f"üì• Texto recibido de {numero}: {texto}")
                manejar_respuesta(numero, texto)

    except Exception as e:
        print("‚ùå Error procesando webhook:", e)
        traceback.print_exc()

    return {"status": "ok"}

import psycopg2
import json
from typing import Union, Any

def guardar_respuesta(numero: str, paso: Union[int, str], texto: Any):
    """
    Guarda la respuesta del usuario para un paso, aceptando cualquier tipo de valor.
    Serializa listas y diccionarios como JSON.
    """
    # Serializa el valor si es lista o dict
    if isinstance(texto, (list, dict)):
        valor_guardar = json.dumps(texto, ensure_ascii=False)
    else:
        valor_guardar = str(texto)
    print(f"GUARDADO: {numero} | Paso: {paso} | Valor: {valor_guardar}")
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO perfil_creador_flujo_temp (telefono, paso, respuesta)
            VALUES (%s, %s, %s)
            ON CONFLICT (telefono, paso) DO UPDATE SET respuesta = EXCLUDED.respuesta
        """, (numero, str(paso), valor_guardar))
        conn.commit()
    except Exception as e:
        if 'conn' in locals():
            conn.rollback()
        print("‚ùå Error guardando respuesta:", e)
    finally:
        try:
            cur.close()
        except: pass
        try:
            conn.close()
        except: pass

def consolidar_perfil(numero: str):
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()

        cur.execute("""
            SELECT paso, respuesta 
            FROM perfil_creador_flujo_temp 
            WHERE telefono = %s 
            ORDER BY paso ASC
        """, (numero,))
        respuestas = cur.fetchall()

        datos = {paso: resp for paso, resp in respuestas}

        # cur.execute("""
        #     INSERT INTO perfil_creador (
        #         nombre, edad, genero, pais, ciudad, estudios, idioma, actividad,
        #         horario_preferido, intencion_trabajo, frecuencia_lives, tiempo_disponible,
        #         plataformas, plataformas_detalle, tipo_contenido, intereses, telefono
        #     )
        #     VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)
        # """, (
        #     datos.get(1),  # nombre
        #     datos.get(2),  # edad
        #     datos.get(3),  # genero
        #     datos.get(4),  # pais
        #     datos.get(5),  # ciudad
        #     datos.get(6),  # estudios
        #     datos.get(7),  # idioma
        #     datos.get(8),  # actividad
        #     datos.get(9),  # horario preferido
        #     datos.get(10),  # intenci√≥n
        #     datos.get(11),  # frecuencia lives
        #     datos.get(12),  # tiempo disponible
        #     datos.get(13),  # plataformas (lista cruda)
        #     datos.get(14),  # detalle de plataformas con a√±os/horas
        #     datos.get(15),  # tipo contenido
        #     datos.get(16),  # intereses
        #     numero
        # ))
        #
        # cur.execute("DELETE FROM perfil_creador_flujo_temp WHERE telefono = %s", (numero,))
        conn.commit()

        cur.close()
        conn.close()
        print(f"‚úÖ Perfil consolidado para {numero}")
    except Exception as e:
        if 'conn' in locals():
            conn.rollback()
            conn.close()
        print("‚ùå Error al consolidar perfil:", str(e))


def enviar_diagnostico(numero):
    # 1. Recupera respuestas previas del usuario (puede ser de la tabla definitiva o temporal)
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        cur.execute("""
            SELECT paso, respuesta 
            FROM perfil_creador_flujo_temp 
            WHERE telefono = %s 
            ORDER BY paso ASC
        """, (numero,))
        respuestas = dict(cur.fetchall())
        cur.close()
        conn.close()
    except Exception as e:
        print("‚ùå Error al obtener datos para diagn√≥stico:", e)
        enviar_mensaje(numero, "Ocurri√≥ un error al generar tu diagn√≥stico. Intenta m√°s tarde.")
        return

    # 2. Analiza y genera diagn√≥stico (ejemplo simple, personal√≠zalo seg√∫n tus reglas)
    nombre = respuestas.get(1, "usuario")
    edad = respuestas.get(2, "")
    plataformas = respuestas.get(13, "")
    tipos_contenido = respuestas.get(15, "")
    intereses = respuestas.get(16, "")

    diagnostico = f"üîé Diagn√≥stico para {nombre}:\n"
    if edad and int(edad) < 18:
        diagnostico += "‚Ä¢ Eres menor de edad, aseg√∫rate de tener permiso de tus padres/tutores.\n"
    if plataformas:
        diagnostico += f"‚Ä¢ Est√°s presente en: {plataformas}\n"
    if tipos_contenido:
        diagnostico += f"‚Ä¢ Tus tipos de contenido: {tipos_contenido}\n"
    if intereses:
        diagnostico += f"‚Ä¢ Tus intereses principales: {intereses}\n"

    # Ejemplo de recomendaci√≥n simple
    if "TikTok" in plataformas or "7" in plataformas:
        diagnostico += "‚Ä¢ ¬°TikTok es excelente para crecer r√°pido! Aseg√∫rate de publicar frecuentemente.\n"
    if "ventas" in tipos_contenido or "12" in tipos_contenido:
        diagnostico += "‚Ä¢ El contenido de ventas en vivo es una gran oportunidad, ¬°sigue capacit√°ndote en esto!\n"
    if not intereses:
        diagnostico += "‚Ä¢ Te sugerimos definir bien tus intereses para conectar mejor con tu audiencia.\n"

    diagnostico += "\n¬øTe gustar√≠a recibir asesor√≠a personalizada? Responde 'asesor√≠a'."

    # 3. Env√≠a el diagn√≥stico
    enviar_mensaje(numero, diagnostico)

def enviar_requisitos(numero):
    requisitos = (
        "üìã *Requisitos para ingresar a la Agencia:*\n"
        "1Ô∏è‚É£ Ser mayor de 18 a√±os.\n"
        "2Ô∏è‚É£ Contar con documento de identidad vigente.\n"
        "3Ô∏è‚É£ Tener acceso a una computadora o smartphone con internet.\n"
        "4Ô∏è‚É£ Disponer de tiempo para transmisiones en vivo y capacitaciones.\n"
        "5Ô∏è‚É£ Contar con cuentas activas en al menos una red social (Instagram, TikTok, Facebook, etc.).\n"
        "6Ô∏è‚É£ Disposici√≥n para aprender y trabajar en equipo.\n"
        "7Ô∏è‚É£ Cumplir con las pol√≠ticas y normas internas de la Agencia.\n"
        "\n¬øTienes dudas? Responde este mensaje y te ayudamos. Puedes volver al *men√∫ principal* escribiendo 'menu'."
    )
    enviar_mensaje(numero, requisitos)